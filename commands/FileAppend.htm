<!DOCTYPE HTML>
<html>
<head>
<title>FileAppend</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>FileAppend</h1>

<p>Schreibt Text an das Ende einer Datei (und erstellt sie erst, falls notwendig).</p>

<pre class="Syntax"><span class="func">FileAppend</span> <span class="optional">, Text, Dateiname, Codierung</span></pre>
<h3>Parameter</h3>
<dl>

  <dt>Text</dt>
  <dd><p>Der Text, der an das Ende der Datei angefügt werden soll. Dieser Text kann Zeilenumbruchszeichen (`n) enthalten, um neue Zeilen beginnen zu können. Außerdem kann mithilfe eines <a href="../Scripts.htm#continuation">Fortsetzungsbereichs</a> eine lange Zeile in mehreren kurzen Zeilen aufgeteilt werden.</p>
      <p>Wenn der <em>Text</em>-Parameter leer ist, wird <em>Dateiname</em> als leere Datei erstellt (wenn die Datei bereits existiert, wird nur ihr Änderungsdatum aktualisiert).</p>
    <p>Enthält der <em>Text</em>-Parameter <a href="../misc/Clipboard.htm#ClipboardAll">%ClipboardAll%</a> oder eine Variable mit dem Wert von ClipboardAll, wird <em>Dateiname</em> ohne Vorbehalt mit dem kompletten Inhalt des Zwischenspeichers überschrieben (d. h. <a href="FileDelete.htm">FileDelete</a> ist nicht notwendig).</p></dd>

  <dt>Dateiname</dt>
  <dd><p>Der Name der Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist.</p>
    <p><strong>End-of-Line-Übersetzung (EOL)</strong>: Um die EOL-Konvertierung zu deaktivieren, setzt man vor dem Dateinamen ein Sternchen. Dieser Modus schreibt jedes Zeilenumbruchszeichen (`n) als einzelnes LF-Zeichen (LF), anstatt üblicherweise als CR+LF. Zum Beispiel: <code>*C:\Meine Unix-Datei.txt</code>.</p>
    <p>Falls die Datei noch nicht offen ist (z. B. wegen einer <a href="LoopReadFile.htm">Datei-lesenden Schleife</a>), wird die EOL-Übersetzung automatisch deaktiviert, wenn der <em>Text</em>-Parameter CR-LF-Paare (`r`n) enthält. Das heißt, dass die oben genannte Sternchenoption automatisch in Kraft tritt. Ein Sternchen bei einem <em>Text</em> mit `r`n verbessert die Performance, weil das Programm nicht nach diesen Zeichen in <em>Text</em> suchen muss.</p>
    <p id="stdout"><strong>Standardausgabe (stdout)</strong>: Ein Sternchen (*) im Parameter <em>Dateiname</em> bewirkt, dass der <em>Text</em> zur Standardausgabe (stdout) gesendet wird. Diese Art von Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden. Zum Beispiel wäre die folgende Zeile als Eingabeaufforderung gültig:</p>
      <pre>"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" &gt;"Fehlerprotokoll.txt"</pre>
    <p>Allerdings wird ein zur Standardausgabe gesendeter Text nicht in der Eingabeaufforderung angezeigt, von wo aus die Zeile gestartet wurde. Diese Problematik kann umgangen werden, indem man die Ausgabe des Skripts an einen anderen Befehl oder Programm weiterleitet. Zum Beispiel:</p>
      <pre>"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" |more</pre>
      <pre>For /F "tokens=*" %L in ('""%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk""') do @Echo %L</pre>
    <p><span class="ver">[v1.1.20+]:</span> Zwei Sternchen (**) in <em>Dateiname</em> bewirken, dass <em>Text</em> zum stderr-Stream gesendet wird.</p>
    </dd>

  <dt>Codierung</dt>
  <dd><p><span class="ver">[AHK_L 42+]:</span> Überschreibt die Standardcodierung von <a href="FileEncoding.htm">FileEncoding</a> mit einer benutzerdefinierten <em>Codierung</em>.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span>: Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird bei Misserfolg auf 1 und bei Erfolg auf 0 gesetzt.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h3>Bemerkungen</h3>
<p>Um eine existierende Datei zu überschreiben, löscht man sie mit <a href="FileDelete.htm">FileDelete</a>, bevor man FileAppend verwendet.</p>
<p>Die Zieldatei wird nach Anfügen des Textes automatisch geschlossen (außer wenn FileAppend in seinem Einzelparameter-Modus innerhalb einer <a href="LoopReadFile.htm">Datei-lesenden/-schreibenden Schleife</a> ist).</p>
<p><span class="ver">[AHK_L 42+]:</span> <a href="FileOpen.htm">FileOpen()</a> im Anfügemodus bietet mehr Kontrolle als FileAppend und lässt die Datei geöffnet, anstatt sie jedesmal neu zu öffnen und zu schließen. Sobald eine Datei im Anfügemodus geöffnet ist, kann die Zeichenkette mit <code>File.<a href="../objects/File.htm#Write">Write</a>(Zeichenkette)</code> angefügt werden. File-Objekte unterstützen auch binäre Verarbeitung mit <a href="../objects/File.htm#RawWrite">RawWrite</a>/<a href="../objects/File.htm#RawRead">RawRead</a> oder <a href="../objects/File.htm#WriteNum">Write<i>Num</i></a>/<a href="../objects/File.htm#ReadNum">Read<i>Num</i></a>, während FileAppend nur Text unterstützt.</p>
<h3>Siehe auch</h3>
<p><a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="LoopReadFile.htm">Datei-lesende Schleife</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="IniWrite.htm">IniWrite</a>, <a href="FileDelete.htm">FileDelete</a>, <a href="OutputDebug.htm">OutputDebug</a>, <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">FileAppend, Eine weitere Zeile.`n, C:\Meine Dokumente\Test.txt

<em>; Das folgende Beispiel verwendet ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a>, um ein Text besser lesbar und verwaltbar zu machen:</em>
FileAppend,
(
Eine Textzeile.
Standardmäßig befindet sich das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile.
    Diese Zeile wird mit einem Tabulator eingerückt; Standardmäßig wird dieser Tabulator auch in die Datei geschrieben.
Variablenverweise wie %Var% werden standardmäßig mit dem Variableninhalt ersetzt.
), C:\Meine Datei.txt</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="FTP"><em>; Das folgende Beispiel zeigt, wie das FTP-Hochladen mithilfe des systeminternen FTP-Befehls
; automatisiert werden kann. Dieses Skript wurde auf Windows XP getestet.</em>

FTPBefehlDatei = %A_ScriptDir%\FTPBefehle.txt
FTPLogDatei = %A_ScriptDir%\FTPLog.txt
FileDelete %FTPBefehlDatei%  <em>; Falls das vorherige Ausführen vorzeitig beendet wurde.</em>

FileAppend,  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
open host.domain.com
username
password
binary
cd htdocs
put %VarMitNamenDerZieldatei%
delete EineAndereDatei.htm
rename AlterDateiname.htm NeuerDateiname.htm
ls -l
quit
), %FTPBefehlDatei%

RunWait %ComSpec% /c ftp.exe -s:"%FTPBefehlDatei%" &gt;"%FTPLogDatei%"
FileDelete %FTPBefehlDatei%  <em>; Löscht sie aus Sicherheitsgründen.</em>
Run %FTPLogDatei%  <em>; Zeigt das Protokoll zum Untersuchen an.</em></pre>

</body>
</html>
