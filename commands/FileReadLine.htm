<!DOCTYPE HTML>
<html>
<head>
<title>FileReadLine</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>FileReadLine</h1>

<p>Liest eine bestimme Zeile aus einer Datei und speichert den Text in eine <a href="../Variables.htm">Variable</a>.</p>

<pre class="Syntax"><span class="func">FileReadLine</span>, AusgabeVar, Dateiname, Zeilennummer</pre>
<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der <a href="../Variables.htm">Variable</a>, in der der ermittelte Text gespeichert werden soll.</p></dd>

  <dt>Dateiname</dt>
  <dd><p>Der Name der Datei, die im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet wird, wenn kein absoluter Pfad angegeben ist. Windows- und Unix-Formate werden unterstützt; das heißt, dass die Zeilen einer Datei entweder mit einem CR-LF-Paar (`r`n) oder LF-Zeichen (`n) enden können.</p></dd>

  <dt>Zeilennummer</dt>
  <dd><p>Welche Zeile gelesen werden soll (1 für die erste, 2 für die zweite und so weiter). Das kann auch ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein.</p>
    <p>Überschreitet die angegebene Zeilennummer die Gesamtanzahl der Dateizeilen, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt und <em>AusgabeVar</em> leer gemacht. Das geschieht auch, wenn die angegebene Zeilennummer die letzte Zeile in der Datei ist und diese Zeile leer ist und nicht mit einem Zeilenumbruch/CRLF endet.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span>: Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p>Bei Erfolg wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 0 gesetzt. Ansonsten wird es auf 1 gesetzt und der ursprüngliche Inhalt von <em>AusgabeVar</em> beibehalten.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h3>Bemerkungen</h3>
<p>Es wird dringend empfohlen, diesen Befehl nur für kleine Dateien zu verwenden, oder falls nur eine einzige Textzeile benötigt wird. Um eine große Anzahl von Zeilen zu untersuchen oder zu verarbeiten (eine nach der anderen), verwendet man eine <a href="LoopReadFile.htm">Datei-lesende Schleife</a>, weil sie die höchste Performance bietet. Mit <a href="FileRead.htm">FileRead</a> kann eine komplette Datei in eine Variable eingelesen werden.</p>
<p>Tabulator- und Leerzeichen, die am Anfang und Ende der Zeile vorkommen, werden in <em>AusgabeVar</em> geschrieben. Befindet sich am Zeilenende ein LF-Zeichen (`n), wird es ignoriert. Es ist möglich, Tabulator- und Leerzeichen an beiden Enden jeder Variable zu entfernen, indem man die Variable sich selbst zuweisen lässt, während <a href="AutoTrim.htm">AutoTrim</a> aktiv ist (Standardeinstellung). Zum Beispiel: <code>MeineZeile = %MeineZeile%</code>.</p>
<p>Es können Zeilen gelesen werden, die bis zu 65.534 Zeichen lang sind. Alle ermittelten Zeichen, die danach erfolgen, gehen verloren (verwende stattdessen <a href="FileRead.htm">FileRead</a> oder <a href="LoopReadFile.htm">Datei-lesende Schleife</a>).</p>
<h3>Siehe auch</h3>
<p><a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm#ReadLine">File.ReadLine()</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="LoopReadFile.htm">Datei-lesende Schleife</a>, <a href="IniRead.htm">IniRead</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">Loop
{
    FileReadLine, Zeile, C:\Meine Dokumente\Kontaktliste.txt, %A_Index%
    if ErrorLevel
        break
    MsgBox, 4, , Zeile #%A_Index% ist "%Zeile%".  Weiter?
    IfMsgBox, No
        return
}
MsgBox, Das Ende der Datei wurde erreicht oder es ist ein Problem aufgetreten.
return</pre>

</body>
</html>
