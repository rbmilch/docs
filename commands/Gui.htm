<!DOCTYPE HTML>
<html>
<head>
<title>GUI</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>GUI</h1>

<p>Erstellt und verwaltet Fenster und Steuerelemente. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden.</p>

<pre class="Syntax"><span class="func">Gui</span>, Unterbefehl <span class="optional">, Param2, Param3, Param4</span></pre>
<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#New">New</a>: Erstellt ein neues Fenster.</li>
  <li><a href="#Add">Add</a>: Erstellt ein Steuerelement wie z. B. Text, Button oder CheckBox.</li>
  <li><a href="#Show">Show</a>: Zeigt das Fenster an. Kann ein Fenster auch minimieren, maximieren oder verschieben.</li>
  <li><a href="#Submit">Submit</a>: Speichert die Benutzereingaben und versteckt optional das Fenster.</li>
  <li><a href="#Cancel">Cancel</a> (oder Hide): Versteckt das Fenster.</li>
  <li><a href="#Destroy">Destroy</a>: Entfernt das Fenster.</li>
  <li><a href="#Font">Font</a>: Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und die Textfarbe für danach erstellte Steuerelemente.</li>
  <li><a href="#Color">Color</a>: Bestimmt die Hintergrundfarbe des Fensters und/oder dessen Steuerelemente.</li>
  <li><a href="#Margin">Margin</a>: Bestimmt den Abstand/Freiraum, der bei Steuerelementen ohne expliziter Positionsangabe eine Rolle spielt.</li>
  <li><a href="#Options">Fenster-spezifische Optionen und Styles</a>: Bestimmen das Aussehen und Verhalten des Fensters.</li>
  <li><a href="#Menu">Menu</a>: Fügt eine Menüleiste hinzu oder entfernt sie.</li>
  <li><a href="#Minimize">Minimize / Maximize / Restore</a>: Minimiert, Maximiert oder stellt ein Fenster wieder her.</li>
  <li><a href="#Flash">Flash</a>: Lässt das Fenster und seine Taskleistenschaltfläche einmal aufblinken.</li>
  <li><a href="#Default">Default</a>: Ändert den Standard-GUI-Fensternamen des aktuellen Threads.</li>
  <li><a href="#Position">Position und Größe von Steuerelementen anpassen</a></li>
  <li><a href="#Events">Speichern von und Reagieren auf Benutzereingaben</a>: Variablen und g-Label</li>
  <li><a href="#OtherOptions">Optionen und Styles für Steuerelemente</a></li>
  <li><a href="#Labels">Fensterereignisse</a>: <a href="#GuiClose">GuiClose</a> | <a href="#GuiEscape">GuiEscape</a> | <a href="#GuiSize">GuiSize</a> | <a href="#GuiContextMenu">GuiContextMenu</a> | <a href="#GuiDropFiles">GuiDropFiles</a></li>
  <li><a href="#MultiWin">Mehrere GUI-Fenster erstellen</a></li>
  <li><a href="#DefaultWin">GUI-Ereignisse, Threads und Subroutinen</a></li>
  <li>Sonstiges: <a href="#Navigate">Navigation mit der Tastatur</a> | <a href="#Appear">Fensterdarstellung</a> | <a href="#GenRemarks">Allgemeine Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a>: Enthält funktionierende Skripte, die GUI-Fenster und Steuerelemente zeigen.</li>
</ul>

<h2 id="New">Gui, New [, Optionen, Titel] <span class="ver">[v1.1.04]+</span></h2>
<p>Erstellt ein neues Fenster und macht es zum <a href="#Default">Standardfenster</a> für den aktuellen Thread.</p>
<pre>Gui, New, Optionen, Titel  <em>; Erstellt ein neues unbenanntes und nicht nummeriertes GUI.</em>
Gui, Name: New, Optionen, Titel  <em>; Erstellt ein neues GUI, und zerstört dabei jedes vorhandene GUI mit diesem Namen.</em>
</pre>
<p>Der <strong><em>Optionen</em></strong>-Parameter kann <a href="#Options">Optionen</a> enthalten, die vom Haupt-GUI-Befehl unterstützt werden.</p>
<p>Falls der <strong><em>Titel</em></strong>-Parameter nicht vorhanden ist, wird der Dateiname des Skripts verwendet.</p>
<p>Beachten Sie folgende Hinweise:</p>
<ul>
  <li>In den meisten Fällen wird das Fenster bei Bedarf automatisch erstellt, daher muss <em>Gui New</em> üblicherweise nicht aufgerufen werden.</li>
  <li>Das neue Fenster wird nur für den <em>aktuellen</em> Thread zum <a href="#Default">Standardfenster</a>  gemacht - bei allen anderen Nicht-GUI-Threads ist die <a href="#DefaultWin">Standard-GUI-Nummer</a> weiterhin 1.</li>
  <li>Wenn das GUI keinen Namen hat und nicht das <a href="#Default">Standard-GUI</a> ist, muss man es anhand seines HWND ansteuern. Mit der Option <a href="#GuiHwndOutputVar">+Hwnd<i>GuiHwnd</i></a> kann das HWND des neuen Fensters in die <em>GuiHwnd</em>-Variable gespeichert werden. Verwenden Sie dann <code>Gui, %<i>GuiHwnd</i>%:Default</code>, um dieses Fenster als Standardfenster für nachfolgende Gui-Befehle zu machen.</li>
</ul>
<p>Gründe, warum dieser Befehl sinnvoll ist:</p>
<ul>
  <li>Wenn man <em>Gui New</em> aufruft, wird sichergestellt, dass das Skript ein neues GUI erstellt und nicht ein bereits Existierendes modifiziert. Außerdem kann dieser Befehl die Chance erhöhen, dass andere Programmierer (oder Ihr zukünftiges Ich) Ihr Skript besser verstehen.</li>
  <li><em>Gui New</em> erspart Ihnen die Arbeit, für jedes GUI einen eindeutigen Namen oder Nummer zu vergeben. Man profitiert besonders davon, wenn das Skript mehr als einen GUI erstellen muss, oder wenn es in anderen Skripten enthalten sein soll.</li>
  <li>Manchmal ist es intuitiver, den Fenstertitel zu setzen, wenn das GUI erstellt wird, und nicht erst, wenn das GUI <a href="#Show">angezeigt</a> wird.</li>
</ul>

<p>Wenn kein Name angegeben ist, gilt folgendes:</p>
<ul>
  <li>Spezielle <a href="#Labels">Label</a> wie <a href="#GuiClose"><em>GuiClose</em></a> haben standardmäßig das Präfix "Gui", sofern es nicht via <a href="#PlusLabel">+Label<em>Präfix</em></a> überschrieben wurde.</li>
  <li>Immer wenn das GUI einen neuen Thread startet, wird in <a href="../Variables.htm#Gui">A_Gui</a> das HWND anstelle des Namens gespeichert.</li>
</ul>
<p class="note"><strong>Hinweis</strong>: Erst seit <span class="ver">[v1.1.08]</span> setzt dieser Befehl das Standard-Gui, wenn ein Name angegeben wird.</p>

<h2 id="Add">Gui, Add, Steuerelement [, Optionen, Text]</h2>
<p>Fügt ein Steuerelement in das GUI-Fenster ein (und erstellt vorher das GUI-Fenster, falls notwendig).</p>

<p><em>Steuerelement</em> kann folgendes sein:</p>
<ul>
  <li><a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#UpDown">UpDown</a>, <a href="GuiControls.htm#Picture">Picture</a></li>
  <li><a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Radio">Radio</a></li>
  <li><a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a></li>
  <li><a href="GuiControls.htm#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a></li>
  <li><a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#DateTime">DateTime</a>, <a href="GuiControls.htm#MonthCal">MonthCal</a></li>
  <li><a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Progress">Progress</a></li>
  <li><a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a></li>
  <li><a href="GuiControls.htm#ActiveX">ActiveX</a> (z. B. Internet Explorer Control)</li>
  <li><a href="GuiControls.htm#Custom">Custom</a></li>
</ul>
<p>Zum Beispiel:</p>
<pre>Gui, Add, Text,, Bitte Name eingeben:
Gui, Add, Edit, vName
Gui, Show</pre>
<h2 id="Show">Gui, Show [, Optionen, Titel]</h2>
<p>Lässt man die <em>Optionen</em> weg, wird das Fenster sichtbar gemacht, der minimierte Zustand aufgehoben (falls notwendig), das Fenster <a href="WinActivate.htm">aktiviert</a> und der Fenstertitel gesetzt. Lässt man den <em>Titel</em> weg, bleibt der vorherige Titel erhalten (sofern es einen gibt, ansonsten der Dateiname des Skripts).</p>
<p>Wenn man die Optionen X, Y, W und H weglässt, wird das Fenster seine vorherige Größe und Position beibehalten. Falls keine vorherige Position vorhanden ist, wird das Fenster automatisch auf eine der beiden Koordinatenachsen zentriert, wenn die unten erwähnten Optionen X und/oder Y fehlen. Falls eine vorherige Größe nicht wiederhergestellt werden kann, wird die Fenstergröße automatisch an den vorhandenen Steuerelementen angepasst.</p>
<p>Folgende Zeichenketten können in den <em>Optionen</em> angegeben werden (jede Zahl muss im dezimalen Format sein):</p>
<p><strong>Wn</strong>: Geben Sie für <strong>n</strong> die Breite (in Pixel) des Client-Fensterbereichs an (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a> des Fensters).</p>
<p><strong>Hn</strong>: Geben Sie für <strong>n</strong> die Höhe des Client-Fensterbereichs an (in Pixel).</p>
<p><strong>Xn</strong>: Geben Sie für <strong>n</strong> die X-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste linke sichtbare Pixelspalte auf dem Bildschirm.</p>
<p><strong>Yn</strong>: Geben Sie für <strong>n</strong> die Y-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste obere sichtbare Pixelzeile auf dem Bildschirm.</p>
<p><strong>Center</strong>: Zentriert das Fenster horizontal und vertikal auf dem Bildschirm.</p>
<p><strong>xCenter</strong>: Zentriert das Fenster horizontal auf dem Bildschirm. Zum Beispiel: <code>Gui, Show, xCenter y0</code>.</p>
<p><strong>yCenter</strong>: Zentriert das Fenster vertikal auf dem Bildschirm.</p>
<p id="AutoSize"><strong>AutoSize</strong>: Passt die Fenstergröße an den aktuell sichtbaren Steuerelementen an. Diese Option ist besonders hilfreich, wenn neue Steuerelemente hinzugefügt werden, oder wenn bereits vorhandene Steuerelemente größer, kleiner, sichtbar oder unsichtbar gemacht werden. Zum Beispiel:<br>
  <code>Gui, Show, AutoSize Center</code></p>
<p><br>
  <em><strong>Von den folgenden Optionen kann nur eine aktiv sein:</strong></em></p>
<p><strong>Minimize</strong>: Minimiert das Fenster und aktiviert das darunterliegende Fenster.</p>
<p><strong>Maximize</strong>: Maximiert und aktiviert das Fenster.</p>
<p><strong>Restore</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Das Fenster wird dabei angezeigt und aktiviert.</p>
<p><strong>NoActivate</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Das Fenster wird dabei angezeigt, aber nicht aktiviert.</p>
<p><strong>NA</strong>: Zeigt das Fenster an, ohne es zu aktivieren. Das Fenster bleibt falls zutreffend minimiert, aber steigt in der Z-Rangordnung nach oben (die aktuelle Rangordnung sieht man, wenn man ALT+TAB drückt). Wenn das Fenster vorher versteckt wurde, dann erscheint es so, als befände es sich direkt über dem aktiven Fenster, egal ob das aktive Fenster deaktiviert ist oder nicht.</p>
<p><strong>Hide</strong>: Versteckt das Fenster und aktiviert das darunterliegende Fenster. Funktioniert genauso wie <a href="#Cancel">Gui Cancel</a>, aber das versteckte Fenster darf hier weiterhin verschoben, kleiner/größer gemacht oder neu betitelt werden, ohne es anzeigen zu müssen. Zum Beispiel: <code>Gui, Show, Hide x55 y66 w300 h200, Neuer Titel</code>.</p>

<h2 id="Submit">Gui, Submit [, NoHide]</h2>
<p>Speichert die Inhalte der Steuerelemente in ihre <a href="#var">zugeordneten Variablen</a> (falls vorhanden) und versteckt das Fenster, sofern man die NoHide-Option weglässt. Mehrere Ausgabefelder eines Steuerelements, wie z. B. eine <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a>, werden mit dem <a href="#Delimiter">aktuellen Trennzeichen</a> des Fensters voneinander abgegrenzt. Dieser Befehl kann nur funktionieren, wenn das Fenster existiert (und nicht z. B. via <a href="#Destroy">Gui Destroy</a> entfernt wurde).</p>

<h2 id="Cancel">Gui, Cancel</h2>
<p>Versteckt das Fenster, ohne dabei die Inhalte der Steuerelemente in ihre <a href="#var">zugeordneten Variablen</a> zu speichern. Dieser Befehl kann nur funktionieren, wenn das Fenster existiert (und nicht z. B. via <a href="#Destroy">Gui Destroy</a> entfernt wurde).</p>

<h2 id="Destroy">Gui, Destroy</h2>
<p>Bewirkt, dass das Fenster (falls vorhanden) und seine Steuerelemente entfernt, und die benutzten Systemressourcen wie z. B. Arbeitsspeicher freigegeben werden. Falls das Skript später das Fenster neu erstellt, beginnen alle Fenstereigenschaften wie Farbe und Schriftart wieder mit ihren Standardwerten (als hätte das Fenster nie existiert). Selbst wenn man <code>Gui Destroy</code> nicht verwendet - alle GUI-Fenster werden automatisch entfernt, sobald das Skript beendet wird.</p>

<h2 id="Font">Gui, Font [, Optionen, Schriftart]</h2>
<p>Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und/oder die Textfarbe für alle nachfolgenden Steuerelemente, die neu hinzugefügt werden. Zum Beispiel:</p>
<pre>Gui, Font, s10, Verdana  <em>; Schriftart Verdana mit Größe 10.</em></pre>
<p>Wenn man die letzten beiden Parameter weglässt, werden die Standardeinstellungen für die Schriftart, Schriftgröße und Textfarbe wiederhergestellt.</p>
<p><em>Schriftart</em> kann der Name einer beliebigen Schriftart sein (siehe <a href="../misc/FontsStandard.htm">Tabelle für Schriftarten</a>). Lässt man die <em>Schriftart</em> weg oder wird sie im System nicht gefunden, bleibt die vorherige Schriftart erhalten (sofern es eine gibt, ansonsten die Standardschriftart des Systems). So könnte man mit mehreren Schriftarten sicherstellen, dass bei verschiedenen Systemen eine von denen verwendet wird. Wenn man die folgenden Befehle in dieser Reihenfolge verwendet, wird Verdana Vorrang vor Arial haben, welches wiederum Vorrang vor MS Sans Serif haben wird:</p>
<pre>Gui, Font,, MS sans serif
Gui, Font,, Arial
Gui, Font,, Verdana  <em>; Bevorzugte Schriftart.</em></pre>
<p>Wenn der <em>Optionen</em>-Parameter leer ist, werden die zuvor benutzten Attribute der Schriftart weiter verwendet. Ansonsten sind folgende Optionsbuchstaben möglich:</p>
<p><strong>C</strong>: Der Name einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder ein RGB-Wert, oder das Wort "Default", um die Standardfarbe des Systems wiederherzustellen (üblicherweise schwarz). Beispielwerte: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Hinweis: <a href="GuiControls.htm#Button">Buttons</a> können nicht mit einer benutzerdefinierten Farbe versehen werden. Fügen Sie ein C und direkt danach die gewünschte Farbe in den Optionen ein, um die Textfarbe eines bestimmten Steuerelements zu ändern. Zum Beispiel: <code>Gui, Add, Text, cRed, Mein Text</code>.</p>
<p><strong>S</strong>: Größe (in Punkten). Zum Beispiel: <code>s12</code> (muss dezimal sein).</p>
<p><strong>W</strong>: Breite (Dicke). Eine Nummer zwischen 1 und 1000 (400 ist normal und 700 ist fett). Zum Beispiel: <code>w600</code> (muss dezimal sein).</p>
<p>Zudem werden folgende Wörter unterstützt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm (übersetzt: fett, kursiv, durchgestrichen, unterstrichen und normal). <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und deaktiviert italic, strike und underline (Farbe und Größe bleiben unberührt). Man kann mit norm zuerst alle Attribute deaktivieren und dann bestimmte Attribute wieder aktivieren. So zum Beispiel könnte man mit <code>norm italic</code> die Schrift normalisieren und sie dann kursiv machen.</p>
<p>Mehrere Optionen müssen mit einem Leerzeichen voneinander getrennt werden. Zum Beispiel: <code>cBlue s12 bold</code>.</p>
<p>Bei <a href="#MultiWin">mehreren GUI-Fenstern</a> sollte man beachten, dass jedes Fenster seine eigenen gespeicherten Schrifteinstellungen abruft, wenn neue Steuerelemente erstellt werden.</p>
<p>Pro forma ist noch zu erwähnen, dass das Betriebssystem vorgefertigte Dialogfenster anbietet, die der Benutzer zum Auswählen einer Farbe, einer Schriftart oder eines Symbols verwenden kann. Solche Dialogfenster können via <a href="DllCall.htm">DllCall()</a> angezeigt werden, siehe dazu <a href="http://www.autohotkey.com/forum/topic17230.html">www.autohotkey.com/forum/topic17230.html</a>.</p>
<p id="fontq"><strong>Q</strong>: <span class="ver">[AHK_L 19+]:</span> Textdarstellungsqualität. Zum Beispiel: <code>q3</code>. Nach Q muss eine Zahl aus der folgenden Tabelle erfolgen:</p>
<table class="info">
  <tr><td>0 = DEFAULT_QUALITY</td><td>Die Darstellung der Schriftart spielt keine Rolle.</td></tr>
  <tr><td>1 = DRAFT_QUALITY</td><td>Die Darstellung der Schriftart ist ein wenig unwichtiger als wie bei PROOF_QUALITY.</td></tr>
  <tr><td>2 = PROOF_QUALITY</td><td>Die Zeichenqualität der Schriftart ist wichtiger als die exakte Übereinstimmung mit logischen Schriftattributen (z. B. fett, kursiv und so weiter).</td></tr>
  <tr><td>3 = NONANTIALIASED_QUALITY</td><td>Schrift wird nicht geglättet.</td></tr>
  <tr><td>4 = ANTIALIASED_QUALITY</td><td>Schrift wird geglättet, wenn die Schriftart so etwas unterstützt und deren Größe nicht zu klein und nicht zu groß ist.</td></tr>
  <tr><td>5 = CLEARTYPE_QUALITY</td><td>Windows XP und höher: Der Text wird gegebenenfalls mithilfe der ClearType-Kantenglättung dargestellt.</td></tr>
</table>
<p>Um mehr darüber zu erfahren, was diese Werte bedeuten, siehe <a href="https://msdn.microsoft.com/de-de/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
<p>Standardmäßig gilt die höchste Qualitätseinstellung. Deshalb wird dieses Feature eher dazu verwendet, Kantenglättung zu deaktivieren, um den Text bei bestimmten Fällen besser lesbar zu machen.</p>
<h2 id="Color">Gui, Color [, Fensterfarbe, Steuerelementfarbe]</h2>
<p>Bestimmt die Hintergrundfarbe des Fensters und/oder der Steuerelemente. Mit <em>Fensterfarbe</em> wird der Hintergrund des GUI-Fensters selbst bestimmt. <em>Steuerelementfarbe</em> gilt für alle gegenwärtigen und zukünftigen Steuerelemente im Fenster (beachte dabei, dass einige Steuerelemente benutzerdefinierte Farben nicht unterstützen). <em>Steuerelementfarbe</em> hat nur eine einmalige Auswirkung auf <a href="ListView.htm">ListView</a>- und <a href="TreeView.htm">TreeView</a>-Steuerelemente; nachfolgende Änderungen der <em>Steuerelementfarbe</em> sind wirkungslos. In so einem Fall kann man mit <code>GuiControl +BackgroundFF9977, MeineListview</code> die Farbe explizit ändern.</p>
<p>Lassen Sie den entsprechenden Parameter leer, wenn die aktuelle Farbe beibehalten werden soll. Ansonsten kann eine der 16 <a href="Progress.htm#colors">HTML-Hauptfarben</a> oder ein 6-stelliger RGB-Wert (0x-Präfix ist optional) angegeben werden, oder das Wort "Default", um die Standardfarbe wiederherzustellen. Beispielwerte: <code>Silver</code>, <code>FFFFAA</code>, <code>0xFFFFAA</code>, <code>Default</code>.</p>
<p>Ein Fenster benutzt als Hintergrundfarbe standardmäßig die vordefinierte Farbe eines Buttons, während ein Steuerelement als Hintergrundfarbe standardmäßig die vordefinierte Farbe eines Fensters benutzt (üblicherweise weiß).</p>
<p>Die Farbe der <a href="#Menu">Menüleiste</a> und ihre Untermenüs können wie folgt geändert werden: <code><a href="Menu.htm">Menu</a>, MeineMenüleiste, Color, White</code>.</p>
<p>Mit <a href="WinSet.htm#TransColor">WinSet TransColor</a> kann der Hintergrund transparent gemacht werden. Allerdings werden dabei eventuell vorhandene Buttons ebenfalls transparent. Daher ist es sinnvoll, die aktuelle Fensterfarbe via <a href="#Color">Gui Color</a> zu ändern und diese Farbe dann transparent zu machen. Zum Beispiel:</p>
<pre>Gui, Color, EEAA99
Gui +LastFound  <em>; Macht das GUI-Fenster zum <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a>.</em>
WinSet, TransColor, EEAA99</pre>
<p>Die folgenden Zeilen können hinzugefügt werden, um den Rahmen und die Titelleiste eines Fensters zu entfernen, das <strong>bereits</strong> transparent gemacht wurde:</p>
<pre>Gui -Caption  <em>; Oder <i>"Gui, GuiName:-Caption"</i>, falls es nicht das <a href="#DefaultWin">Standardfenster</a> ist.</em></pre>
<p>Weiter unten finden Sie das Beispiel einer Bildschirmanzeige (OSD), die zeigt, wie diese Methode praktisch eingesetzt werden kann.</p>

<h2 id="Margin">Gui, Margin [, X, Y]</h2>
<p><strong>X</strong> und <strong>Y</strong> definieren den Pixelabstand zwischen der linken/rechten bzw. oberen/unteren Fensterseite und Steuerelementen, die aufgrund fehlender <a href="#XY">X- oder Y-Koordinate</a> automatisch positioniert wurden. Diese Werte bestimmen auch den vertikalen und horizontalen Abstand zwischen automatisch positionierten Steuerelementen. Der Befehl <a href="#Show">Gui Show</a> wird diese Werte einkalkulieren, wenn er das Fenster erstellen und seine Größe berechnen muss (und wenn er ohne Größenangabe verwendet wird).</p>
<p><code>Gui, Margin</code> beeinflusst nur das <a href="#Default">Standardfenster</a>, während <code>Gui, Name:Margin</code> nur Einfluss auf das <a href="#MultiWin">benannte Fenster</a> hat. Wenn dieser Befehl beim Hinzufügen des ersten Steuerelements fehlt, bekommt das Fenster einen vordefinierten Abstand auf jeder Seite, proportional zur Größe der aktuell ausgewählten <a href="#Font">Schriftart</a> (0.75 x Schrifthöhe für Unten &amp; Oben, 1.25 x Schriftbreite für Links &amp; Rechts).</p>
<p>Man kann die Größe der Abstände ändern, während Steuerelemente hinzugefügt werden. Allerdings gelten solche Änderungen nur für Steuerelemente, die nachträglich hinzugefügt werden, nicht für Steuerelemente, die bereits vorhanden sind. Wenn man X oder Y weglässt, bleibt der entsprechende Abstand unverändert.</p>

<h2 id="Options">Gui, +/-Option1 +/-Option2 ...</h2>
<p>Nach dem GUI-Befehl können eine oder mehrere Optionen angegeben werden. Aus Performance-Gründen ist es besser, alle Optionen auf einer Zeile zu setzen, bevor das Fenster erstellt wird (das heißt, bevor andere Unterbefehle wie <a href="#Add">Gui Add</a> verwendet werden).</p>
<p>Der Effekt des Befehls ist kumulativ (summierend). Das heißt, dass dieser Befehl nur die explizit angegebenen Optionen ändert, alle anderen bleiben unverändert.</p>
<p>Geben Sie ein Pluszeichen an, um die Option hinzuzufügen, und ein Minuszeichen, um sie zu entfernen. Zum Beispiel:</p>
<pre>Gui +Resize -MaximizeBox  <em>; Ändert die Einstellungen des <a href="#DefaultWin">Standard</a>-GUI-Fensters.</em>
Gui <strong>MeinGui:</strong>+Resize -MaximizeBox  <em>; Ändert die Einstellungen des GUI's namens <i>MeinGui</i>.</em></pre>
<p><strong>AlwaysOnTop</strong>: Gibt dem Fenster die Eigenschaft, immer im Vordergrund bzw. immer vor allen anderen Fenstern sichtbar zu sein, was den gleichen Effekt hat wie <a href="WinSet.htm#AlwaysOnTop">WinSet AlwaysOnTop</a>.</p>
<p><strong>Border</strong>: Stattet das Fenster mit einem dünnen Rahmen aus. Diese Option benutzt man eher selten.</p>
<p><strong>Caption</strong> (standardmäßig vorhanden): Stattet das Fenster mit einer Titelleiste und einem dicken Rahmen aus. Wenn man <a href="WinSet.htm#TransColor">WinSet TransColor</a> bei einem Fenster anwendet, sollte man die Titelleiste eines Fensters erst entfernen, nachdem man es damit transparent gemacht hat.</p>
<p id="Delimiter"><strong>Delimiter</strong>: Bewirkt, dass das Fenster nicht den senkrechten Strich (|), sondern ein beliebig anderes Zeichen als Trennzeichen verwendet, wenn die Inhalte der Steuerelemente via <a href="#Add">Gui Add</a> hinzugefügt, via <a href="GuiControl.htm">GuiControl</a> modifiziert, oder via <a href="#Submit">Gui Submit</a> oder <a href="GuiControlGet.htm">GuiControlGet</a> abgerufen werden. Geben Sie das gewünschte Trennzeichen direkt nach dem Wort Delimiter an. Zum Beispiel könnte man mit <code>Gui +Delimiter`n</code> ein Zeilenumbruchszeichen als Trennzeichen definieren, das besonders gut für <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a> geeignet wäre. Mit <code>Gui +Delimiter|</code> könnte man wiederum das vordefinierte Trennzeichen wiederherstellen. Wenn ein Leer- oder Tabulatorzeichen notwendig ist, kann man <code>Gui +DelimiterSpace</code> oder <code>Gui +DelimiterTab</code> angeben. Das Ändern des Trennzeichens wirkt sich auf alle vorhandenen und nachfolgenden <a href="../misc/Threads.htm">Threads</a> aus, die sich auf dieses bestimmte Fenster beziehen.</p>
<p><strong>Disabled</strong>: Deaktiviert das Fenster, wodurch der Benutzer nicht länger mit den Steuerelementen interagieren kann. Diese Option wird oft bei Fenstern benutzt, die untergeordnete Fenster haben (siehe <a href="#Owner">Owner</a>).</p>
<p id="DPIScale"><strong>DPIScale</strong> <span class="ver">[v1.1.11+]</span>: Verwenden Sie <code>Gui -DPIScale</code>, um die üblicherweise aktive DPI-Skalierung zu deaktivieren. Wenn das System eine benutzerdefinierte DPI-Skalierung aktiv hat, werden Gui-Befehle versuchen, die Steuerelemente verhältnismäßig gleich groß aussehen zu lassen (aber in höherer Auflösung). Bei einer DPI von beispielsweise 144 (150%) würde <code>Gui Show, w100</code> das Gui 150 Pixel breit machen (<a href="../Variables.htm#GuiWidth">A_GuiWidth</a> enthält aber weiterhin 100). <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> enthält die aktuelle DPI des Systems.</p>
<p>DPI-Skalierung gilt nur für Gui-Befehle, daher werden Koordinaten, die direkt von anderen Quellen stammen, wie z. B. ControlGetPos oder WinGetPos, nicht funktionieren. Es gibt eine Reihe von Möglichkeiten, damit umzugehen:</p>
<ul>
  <li>Vermeiden Sie hartcodierte Koordinaten, wenn möglich. Zum Beispiel können Sie zum Positionieren von Steuerelementen die Optionen <a href="#xp">xp</a>, <a href="#xs">xs</a>, <a href="#xm">xm</a> und <a href="#PosPlusMargin">x+m</a> benutzen und als Höhe <a href="#R">Textreihen</a> statt Pixel angeben.</li>
  <li>Je nach Bedarf können Sie die Skalierung aktivieren (<code>Gui +DPIScale</code>) und deaktivieren (<code>Gui -DPIScale</code>). Einstellungsänderungen haben keinen Einfluss auf Positionen oder Größen, die bereits gesetzt worden sind.</li>
  <li>Skaliere die Koordinaten manuell. Zum Beispiel würde <code>x*(A_ScreenDPI/96)</code> die logische/Gui-Koordinate X in eine physische/Nicht-Gui-Koordinate umwandeln.</li>
</ul>
<p id="GuiHwndOutputVar"><strong>Hwnd</strong><em>AusgabeVar</em> <span class="ver">[v1.1.04+]:</span> Diese Option speichert das Fenster-Handle (HWND) des GUI in <em>AusgabeVar</em>. Zum Beispiel: <code>Gui +HwndMeinGuiHwnd</code>. Innerhalb einer Funktion wird <em>MeinGuiHwnd</em> als <a href="../Functions.htm#DynVar">dynamische Variable</a> behandelt. Das HWND eines GUI wird oft in Verbindung mit <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall</a> verwendet. Außerdem kann es direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-Fenstertitel</a> oder anstelle eines GUI-Namens benutzt werden; zum Beispiel <code>Gui %MeinGuiHwnd%:Destroy</code>.</p>
<p id="PlusLabel"><strong>Label</strong> <span class="ver">[v1.0.44.09+]:</span> Ändert die <a href="#Labels">speziellen Labelnamen</a> des Fensters. <code>Gui MeinGui:+LabelMeinGui_On</code> würde das Fenster beispielsweise auf die Label MeinGui_OnClose und MeinGui_OnSize zugreifen lassen, anstatt auf MeinGuiGuiClose und MeinGuiGuiSize. Anders gesagt wird die Zeichenkette "MeinGuiGui" in den <a href="#Labels">speziellen Labelnamen</a> mit "MeinGui_On" ersetzt. Auf diese Weise können die Label auch von mehreren Fenstern benutzt werden (in diesem Fall kann das Skript auf <a href="../Variables.htm#Gui">A_Gui</a> zurückgreifen, um zu ermitteln, welches Fenster die Subroutine gestartet hat).</p>
<p id="LastFound"><strong>LastFound</strong>: Markiert das aktuelle Fenster als das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> (das aber in einem <a href="#DefaultWin">GUI-Thread</a> eigentlich automatisch geschieht), wodurch Befehle wie <a href="WinSet.htm">WinSet</a> sogar auf versteckte Fenster zugreifen können (ohne dass <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> notwendig ist). So kann man die Eigenschaften des Fensters ändern, ohne es zuvor anzeigen zu müssen. Zum Beispiel:</p>
<pre>Gui +LastFound
WinSet, TransColor, %BeliebigeFarbe% 150
Gui Show</pre>
<p id="LastFoundExist"><strong>LastFoundExist</strong> <span class="ver">[v1.0.43.09+]:</span> Diese Option funktioniert nur, wenn sie die einzige Option ist. <em>+LastFoundExist</em> ist funktionell identisch zu <em>+LastFound</em> - der einzige Unterschied ist, dass das Fenster nicht erstellt wird, wenn es noch nicht existiert. Der Hauptnutzen von dieser Option ist es zu erkennen, ob ein bestimmtes GUI-Fenster bereits vorhanden ist. Zum Beispiel:</p>
<pre>Gui MeinGui:+LastFoundExist
IfWinExist
    MsgBox GUI "MeinGui" existiert bereits.</pre>
<p><strong>MaximizeBox</strong>: Aktiviert die Titelleistenschaltfläche zum Maximieren des Fensters. <em>Resize</em> enthält diese Option auch (weiter unten zu finden).</p>
<p><strong>MinimizeBox</strong> (standardmäßig vorhanden): Aktiviert die Titelleistenschaltfläche zum Minimieren des Fensters.</p>
<p id="MinSize"><strong>MinSize</strong> und <strong>MaxSize</strong> <span class="ver">[v1.0.44.13+]:</span> Bestimmen die minimale und/oder maximale Größe des Fensters. Diese Optionen sind zum Beispiel relevant, wenn man den Benutzer daran hindern will, das Fenster uneingeschränkt zu verkleinern oder zu vergrößern. Geben Sie <em>MinSize</em> und/oder <em>MaxSize</em> ohne Suffix an, um die aktuelle Größe des Fensters als Grenzwert zu nutzen (wenn das Fenster keine aktuelle Größe hat, wird die gesetzte Größe des ersten <a href="#Show">Gui Show</a> verwendet). Alternativ können Sie auch die Breite, ein X und dann die Höhe anfügen; zum Beispiel: <code>Gui +Resize +MinSize640x480</code>. Diese Größen (in Pixel) beziehen sich auf den Clientbereich des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a>). Geben Sie dezimale Zahlen an, nicht hexadezimale.</p>
<p>Man kann eine der Größenangaben weglassen, um diese unverändert zu lassen (z. B. <code>+MinSize640x</code> oder <code>+MinSizex480</code>). Desweiteren kann man Min/MaxSize mehrmals angeben, um die aktuelle Fenstergröße für eine Größenangabe und eine eindeutige Größe für die andere Größenangabe zu verwenden. Zum Beispiel würde <code>+MinSize +MinSize640x</code> die aktuelle Fensterhöhe als Minimalhöhe und 640 Pixel als Minimalbreite definieren.</p>
<p>Lässt man <em>MinSize</em> und <em>MaxSize</em> komplett weg, gelten die Standardwerte des Betriebssystems (ähnlich wie <code>Gui -MinSize -MaxSize</code>, welches auch die Standardwerte wiederherstellen würde).</p>
  <p class="note"><strong>Hinweis</strong>: Der Benutzer kann ein Fenster nur größer oder kleiner machen, wenn die Option <a href="#Resize">+Resize</a> vorhanden ist.</p>
<p id="OwnDialogs"><strong>OwnDialogs</strong>: <code>Gui +OwnDialogs</code> bewirkt, dass alle nachfolgenden <a href="MsgBox.htm">MsgBox</a>-, <a href="InputBox.htm">InputBox</a>-, <a href="FileSelectFile.htm">FileSelectFile</a>- oder <a href="FileSelectFolder.htm">FileSelectFolder</a>-Dialogfenster im aktuellen <a href="../misc/Threads.htm">Thread</a> (z. B. ButtonOK-Subroutine) als Unterfenster des aktuellen Fensters definiert werden. Solche Dialogfenster werden dabei modal. Das heißt, dass der Benutzer erst wieder mit dem GUI-Fenster interagieren kann, wenn das Dialogfenster geschlossen wird. <a href="ToolTip.htm">ToolTip</a>-, <a href="Progress.htm">Progress</a>- und <a href="Progress.htm">SplashImage</a>-Fenster können hingegen nicht modal sein, selbst wenn sie als Unterfenster definiert werden. Sie werden immer im Vordergrund sein. In beiden Fällen werden untergeordnete Dialogfenster automatisch zerstört, sobald ihr GUI-Fenster <a href="#Destroy">zerstört</a> wird.</p>
<p>Normalerweise ist es nicht notwendig, diese Einstellung wieder zu deaktivieren, weil sie keine Auswirkung auf andere <a href="../misc/Threads.htm">Threads</a> hat. Verwenden Sie je nach Bedarf <code>Gui -OwnDialogs</code>, um ein Thread sowohl untergeordnete als auch nicht-untergeordnete Dialogfenster anzeigen zu lassen.</p>
<p>Wenn kein Fensternamepräfix angegeben ist -- beispielsweise <code>Gui +OwnDialogs</code> anstelle von <code>Gui MeinGui:+OwnDialogs</code> -- werden die Dialogfenster dem <a href="#DefaultWin">Standardfenster des Threads</a> untergeordnet.</p>
<p id="Owner"><strong>Owner</strong>: Mit <em>+Owner</em> kann das Fenster als Unterfenster eines anderen Fensters definiert werden. Ein untergeordnetes Fenster hat standardmäßig keinen eigenen Taskleisten-Button, außerdem befindet es sich immer vor dem Hauptfenster. Es wird automatisch zerstört, sobald das Hauptfenster zerstört wird. <em>+Owner</em> sollte man erst verwenden, wenn das Hauptfenster des Unterfensters <u>bereits erstellt ist</u>. Seit <span class="ver">[v1.1.05]</span> gilt diese Einschränkung nicht mehr. Es gibt zwei Möglichkeiten, wie man <em>+Owner</em> verwenden kann:</p>
<pre>Gui, MeinGui:+OwnerAnderesGui  <em>; Definiert <i>MeinGui</i> als Unterfenster von <i>AnderesGui</i>.</em>
Gui, MeinGui:+Owner  <em>; Definiert <i>MeinGui</i> als Unterfenster vom <a href="Menu.htm#MainWindow">Hauptfenster des Skripts</a> und bewirkt, dass die Schaltfläche in der Taskleiste fehlt.</em></pre>
<p><span class="ver">[v1.1.03+]:</span> Unmittelbar nach <code>+Owner</code> kann der <a href="#Name">Name</a> oder die Nummer eines bereits vorhandenen Gui-Fensters, oder das <a href="WinGet.htm#ID">HWND</a> eines nicht-untergeordneten Fensters erfolgen.</p>
<p class="note"><strong>Hinweis zur Kompatibilität</strong>: Seit <span class="ver">[v1.1.03]</span> bewirkt <code>+Owner</code>, dass der WS_CHILD-Style entfernt und der WS_POPUP-Style gesetzt wird. Um ein Gui als Unterfenster eines beliebigen Fensters zu definieren, müssen Skripte entweder die <code>+Parent</code>-Option verwenden, oder sie überschreiben die entsprechenden Styles, <em>nachdem</em> die Option <code>+Owner</code> gesetzt wurde.</p>
<p>Um eine Interaktion mit dem übergeordneten Fenster zu verbieten, während eines seiner Unterfenster sichtbar ist, deaktiviert man das übergeordnete Fenster via <code>Gui +Disabled</code>. Später kann man das übergeordnete Fenster, nachdem sein Unterfenster geschlossen oder entfernt wurde, wieder mit <code>Gui -Disabled</code> aktivieren. Diese Anweisung sollte aber erfolgen, bevor das Unterfenster geschlossen bzw. entfernt wird, um das übergeordnete Fenster automatisch reaktivieren zu lassen.</p>
<p id="Parent"><strong>Parent</strong> <span class="ver">[v1.1.03+]</span>: Unmittelbar nach <code>+Parent</code> kann der <a href="#Name">Name</a> oder die Nummer eines bereits vorhandenen Gui-Fensters, oder das <a href="WinGet.htm#ID">HWND</a> eines beliebigen Fensters oder Steuerelements erfolgen, um es als Unterfenster zu definieren. Mit <code>-Parent</code> kann dieser Zustand wieder rückgängig gemacht werden. Diese Option funktioniert auch, nachdem das Fenster erstellt wurde.</p>
<p id="Resize"><strong>Resize</strong>: Aktiviert die Größenänderung des Fensters und die Titelleistenschaltfläche zum Maximieren des Fensters. Mit <code>+Resize -MaximizeBox</code> kann die Schaltfläche zum Maximieren des Fensters versteckt werden, falls nötig.</p>
<p><strong>SysMenu</strong> (standardmäßig vorhanden): Geben Sie <code>-SysMenu</code> (minus SysMenu) an, um das Systemmenü und Symbol aus der oberen linken Ecke des Fensters zu entfernen. Die Titelleistenschaltflächen zum Minimieren, Maximieren und Schließen werden dabei auch versteckt.</p>
<p id="Theme"><strong>Theme</strong>: <code>-Theme</code> bewirkt, dass alle nachfolgenden Steuerelemente im klassischen Design angezeigt werden (nur ab Windows XP). Um später weitere Steuerelemente zu erstellen, die dem aktuellen Design des Systems angehören, schaltet man es via <code>+Theme</code> wieder ein.</p>
  <p class="note"><strong>Hinweis</strong>: Die Theme-Option funktioniert nicht, wenn das Betriebssystem älter als Windows XP ist, oder wenn in Windows XP selbst das klassische Design aktiv ist.</p>
  <p>Wenn diese Einstellung nur für ein bestimmtes Steuerelement gelten soll, kann bei seiner Erstellung <code>+Theme</code> oder <code>-Theme</code> in den Optionen eingefügt werden.</p>
<p><strong>ToolWindow</strong>: Verkleinert die Titelleiste und deaktiviert die Taskleistenschaltfläche des Fensters.</p>
<p><strong>(Unbenannter Style)</strong>: Geben Sie ein Plus- oder Minuszeichen an und fügen Sie direkt danach eine dezimale oder hexadezimale <a href="../misc/Styles.htm">Style-Nummer</a> ein.</p>
<p><strong>(Unbenannter ExStyle)</strong>: Geben Sie ein Plus- oder Minuszeichen an und fügen Sie direkt danach ein "E" und eine dezimale oder hexadezimale erweiterte Style-Nummer ein. <code>+E0x40000</code> würde beispielsweise den WS_EX_APPWINDOW-Style hinzufügen, um die Taskleistenschaltfläche eines Fensters zu aktivieren, das aktuell keine hat. Weitere nicht-dokumentierte Styles findet man auf <a href="http://www.microsoft.com">www.microsoft.com</a> mit Suchbegriffen wie WS_EX_APPWINDOW.</p>

<h2 id="Menu">Gui, Menu [, Menüname]</h2>
<p>Stattet das Fenster mit einer Menüleiste aus. Verwenden Sie dazu den <a href="Menu.htm">Menu</a>-Befehl, um ein gewöhnliches Menü zu erstellen. Zum Beispiel:</p>
<pre>Menu, Dateimenü, Add, Ö&amp;ffnen<a href="_EscapeChar.htm">`t</a>Ctrl+F, MenüDateiÖffnen  <em>; Siehe untere Bemerkungen zu Ctrl+F.</em>
Menu, Dateimenü, Add, &amp;Beenden, MenuHandler
Menu, Hilfsmenü, Add, Inf&amp;o, MenuHandler
Menu, MeineMenüleiste, Add, &amp;Datei, :Dateimenü  <em>; Fügt die oben erstellten Untermenüs hinzu.</em>
Menu, MeineMenüleiste, Add, &amp;?, :Hilfsmenü
<strong>Gui, Menu, MeineMenüleiste</strong></pre>
<p>Auf der ersten Zeile oben sieht man <code>Ö&amp;ffnen</code> in Kombination mit <code>Ctrl+F</code> (mit einem Tabulatorzeichen dazwischen). Diese Schreibweise ermöglicht dem Benutzer, ein Tastenkürzel zu drücken, um den Menüpunkt zu aktivieren, ohne eine langwierige Navigation über sich ergehen zu lassen. <span class="ver">[v1.1.04+]:</span> Tastenkürzel, die die Standard-Modifikatoren Ctrl, Alt und Shift enthalten, werden automatisch als <em>Keyboard Accelerator</em> für das GUI registriert. Keyboard Accelerators ohne Modifikatoren können nur durch ungewöhnliche Mitteln wie IME oder ALT+NNNN ausgelöst werden.</p>
<p>Wenn eine bestimmte Tastenkombination nicht wie erwartet automatisch funktioniert, gäbe es die Alternative, einen <a href="_IfWinActive.htm">kontextabhängigen Hotkey</a> zu verwenden. Beachten Sie aber, dass solche Hotkeys üblicherweise nicht durch <a href="Send.htm">Send</a> ausgelöst werden können und dass es zu Komplikationen mit anderen Skripten kommen kann.</p>
<p>Mit <code>Gui Menu</code> (also ohne den letzten Parameter) kann die aktuelle Menüleiste des Fensters entfernt werden.</p>
<p>Ein Menü, das als Menüleiste verwendet wurde, sollte später nicht als Popup-Menü oder Untermenü benutzt werden. Menüleisten benötigen intern ein anderes Format (allerdings gilt diese Einschränkung nicht für ihre Untermenüs). Umgehen Sie dieses Problem einfach, indem Sie zweimal das gleiche Menü erstellen und eines davon der Menüleiste zuweisen.</p>
<p>Das Anwenden von destruktiven <a href="Menu.htm">Menu-Unterbefehlen</a> wie Delete und DeleteAll auf eine Menüleiste (und in einigen Fällen auf ihre Untermenüs) ist wirkungslos und verursacht eine Fehlermeldung (sofern <a href="Menu.htm">UseErrorLevel</a> nicht aktiv ist). Führen Sie die folgenden Schritte durch, um solche Änderungen vornehmen zu können: 1) entfernen Sie die Menüleiste mit <code>Gui Menu</code> (<em>Menüname</em> muss weggelassen werden); 2) führen Sie die gewünschte Änderungen durch; 3) fügen Sie die Menüleiste via <code>Gui, Menu, MeineMenüleiste</code> wieder hinzu.</p>

<span id="Maximize"></span><span id="Restore"></span><span id="Hide"></span><h2 id="Minimize">Gui, Hide / Minimize / Maximize / Restore</h2>
<p><code>Gui Hide</code> ist das gleiche wie <a href="#Cancel">Gui Cancel</a>. Die anderen drei Befehle machen das Fenster wieder sichtbar (falls notwendig) und führen dann die entsprechenden Operationen aus. Diese Befehle sind wirkungslos, wenn das Fenster nicht existiert -- weil es beispielsweise via <a href="#Destroy">Gui Destroy</a> zerstört wurde.</p>

<h2 id="Flash">Gui, Flash [, Off]</h2>
<p>Lässt die Taskleistenschaltfläche des Fensters einmal aufblinken. Dazu wird die Farbe der Titelleiste und/oder der Taskleistenschaltfläche (falls vorhanden) invertiert. Das optionale Wort "OFF" stellt die Originalfarben der Titelleiste und Taskleistenschaltfläche wieder her (die tatsächliche Auswirkung variiert aber je nach Betriebssystemversion). Das folgende Beispiel lässt das Fenster dreimal aufblinken, weil jedes Paar von "Gui Flash" die Farben des Fensters invertiert und wiederherstellt:</p>
<pre>Loop 6
{
    Gui Flash
    Sleep, 500  <em>; Dieser Wert ist ziemlich empfindlich; Änderungen können zu unerwarteten Ergebnissen führen.</em>
}</pre>

<h2 id="Default">Gui, GuiName:Default</h2>
<p>Ändert den <a href="#MultiWin">GUI-Standardfensternamen</a> des <a href="../misc/Threads.htm">aktuellen Threads</a>. <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und der Gui-Befehl verwenden ihn standardmäßig, wenn bei ihnen ein GUI-Fenstername fehlt. Das folgende Beispiel zeigt, wie man den GUI-Standardname des Fensters zu "MeinGui" ändern kann: <code>Gui MeinGui:Default</code>. Siehe "<a href="#DefaultWin">Standardnummer eines Threads</a>", wenn Sie mehr darüber erfahren wollen.</p>
<p><span class="ver">[v1.1.03+]:</span> <em>GuiName</em> kann das <a href="#GuiHwndOutputVar">HWND</a> eines der GUI-Fenster des Skripts sein. Wenn das Fenster einen Namen hat, wird er als Standardname festgelegt. Dieser Name bleibt auch nach der Zerstörung des Fensters erhalten. Wenn das Fenster keinen Namen hat, wird der Standardname beim Zerstören des Fensters auf 1 zurückgesetzt.</p>
<p><span class="ver">[v1.1.23+]:</span> Die interne Variable <a href="../Variables.htm#DefaultGui">A_DefaultGui</a> enthält den Namen oder die Nummer des Standard-GUI.</p>

<h2 id="Position">Positionierung und Layout mittels SmartGUI Creator</h2>
<p>In der Regel reichen die im nächsten Abschnitt beschriebenen Optionen für einfache Layouts vollkommen aus. Für komplexere Layouts ist z. B. der SmartGUI Creator von Rajat besser geeignet, weil man mit so einem Tool ein GUI-Fenster visuell gestalten kann. Also um genau das zu bekommen, was man sieht (WYSIWYG). Der SmartGUI Creator kann von <a href="http://www.autohotkey.com/docs/SmartGUI/">www.autohotkey.com/docs/SmartGUI/</a> kostenlos heruntergeladen werden.</p>

<h2 id="PosSize">Position und Größe von Steuerelementen anpassen</h2>
<p>Wenn man einige Größenangaben oder Koordinaten in <em>Optionen</em> absichtlich weglässt, wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder je nach Inhalt und Typ automatisch größer/kleiner gemacht.</p>
<p>Folgende Optionen werden unterstützt:</p>
<p id="R"><strong>R</strong>: Textzeilen (kann eine Gleitkommazahl wie bei R2.5 enthalten). <strong>R</strong> ist oft besser als <strong>H</strong> (Höhe). Wenn <strong>R</strong> und <strong>H</strong> gleichzeitig vorhanden sind, wird <strong>R</strong> Vorrang haben. Bei einer GroupBox bestimmt diese Einstellung die Menge an Steuerelementen, für die innerhalb der Box Platz geschaffen werden soll. Bei <a href="GuiControls.htm#DropDownList">DropDownLists</a>, <a href="GuiControls.htm#ComboBox">ComboBoxes</a> und <a href="GuiControls.htm#ListBox">ListBoxes</a> ist das die Anzahl an Einträgen, die gleichzeitig im Listenbereich sichtbar sein sollen (aber in Windows XP oder höher ist es oft besser, die Optionen <strong>R</strong> und <strong>H</strong> bei DropDownList und ComboBox wegzulassen, damit die aufklappbare Liste von der verfügbaren Höhe des Desktops profitieren kann). Bei allen anderen Steuerelementen ist <strong>R</strong> die Anzahl der Textzeilen, die sichtbar im Steuerelement reinpassen können.</p>
<p><strong>W</strong>: Breite in Pixel. Wenn diese Option fehlt, wird die Breite bei einigen Steuerelementarten automatisch anhand ihrer Inhalte berechnet. Alle anderen Steuerelementarten haben standardmäßig folgende Breiten:<br>
  Tab-Steuerelemente: Das 30-fache der aktuellen Schriftgröße, plus das 3-fache des <a href="#Margin">X-Abstands</a>.<br>
Vertikale ProgressBars: Das 2-fache der aktuellen Schriftgröße.<br>
Horizontale ProgressBars, horizontale Slider, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes, Edits und Hotkeys: Das 15-fache der aktuellen Schriftgröße (außer GroupBoxes, die mit 18 multipliziert werden, um innerhalb der Abstände Platz zu schaffen).</p>
<p><strong>H</strong>: Höhe in Pixel. Wenn man sowohl <strong>H</strong> als auch <strong>R</strong> weglässt, verwenden DropDownLists, ComboBoxes, ListBoxes und leere mehrzeilige Edit-Steuerelemente standardmäßig eine Höhe von 3 Zeilen; GroupBoxes standardmäßig 2 Zeilen; vertikale Slider und ProgressBars standardmäßig 5 Zeilen; horizontale Slider standardmäßig 30 Pixel (außer wenn eine Dicke angegeben wurde); horizontale ProgressBars standardmäßig das 2-fache der aktuellen Schriftgröße; Hotkey-Steuerelemente standardmäßig 1 Zeile; und Tab-Steuerelemente standardmäßig 10 Zeilen. Bei allen anderen Steuerelementen wird die Höhe automatisch anhand ihrer Inhalte berechnet. Die Höhe <strong>H</strong> von DropDownLists und ComboBoxes ist eine Kombination aus Höhe des sichtbaren Teils und Höhe des Listenbereichs (selbst wenn die Höhe zu niedrig ist, wird mindestens immer ein Element in der Liste sichtbar sein). Außerdem wäre es ratsam, die gewünschte Höhe via <strong>R</strong> statt via <strong>H</strong> zu definieren, um die vollständige Sichtbarkeit der Textzeilen zu gewährleisten.</p>
<p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong> und <strong>hp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) können dazu verwendet werden, die Größen eines Steuerelements an die Größen des zuvor hinzugefügten Steuerelements anzupassen, optional mit einem Plus- oder Minuszeichen. Zum Beispiel würde <code>wp</code> die Breite eines Steuerelements auf die Breite des vorherigen Steuerelements setzen, und <code>wp-50</code> würde die Breite des vorherigen Steuerelements verwenden, subtrahiert mit 50.</p>
<p id="XY"><strong>X</strong>: X-Position. Zum Beispiel würde <code>x0 y0</code> das Steuerelement in die obere linke Ecke des Client-Bereichs positionieren (das ist der Fensterbereich ohne Rahmen, Titelleiste und Menüleiste). Wenn <strong>Y</strong> vorhanden ist und <strong>X</strong> fehlt, wird das Steuerelement auf der rechten Seite der zuvor eingefügten Steuerelementen positioniert, wie als würde eine neue "Spalte" beginnen.</p>
<p><strong>Y</strong>: Y-Position. Wenn <strong>X</strong> vorhanden ist und <strong>Y</strong> fehlt, wird das Steuerelement auf der unteren Seite der zuvor eingefügten Steuerelementen positioniert, wie als würde eine neue "Zeile" beginnen.</p>
<p>Das Weglassen von <strong>X</strong> und/oder <strong>Y</strong> hat den Vorteil, dass sich ein GUI-Layout automatisch an zukünftigen Änderungen bzgl. der Größe von Steuerelementen oder Schriftart anpassen kann. Bei absoluten Steuerelementpositionen müsste man jedes einzelne Steuerelement manuell verschieben, das sich unterhalb oder rechts neben dem Steuerelement befindet, welches vergrößert oder verkleinert wurde.</p>
<p>Wenn sowohl <strong>X</strong> als auch <strong>Y</strong> fehlen, wird das Steuerelement unterhalb des vorherigen Steuerelements positioniert, unter Beachtung des vordefinierten Abstands.</p>
<p id="PosPlus">Bei <strong>X</strong> und <strong>Y</strong> kann optional ein Pluszeichen vor der Zahl angefügt werden, um ein Steuerelement relativ zum rechten oder unteren Rand des zuvor eingefügten Steuerelements zu positionieren. Zum Beispiel würde <code>Y+10</code> das Steuerelement unterhalb des vorherigen Steuerelements mit einem Abstand von 10 Pixel positionieren, anstatt auf den vordefinierten Abstand zurückzugreifen. <code>X+10</code> hingegen würde das Steuerelement rechts neben dem vorherigen Steuerelement mit einem Abstand von 10 Pixel positionieren. Negative Zahlen wie bei <code>X-10</code> sind für die absolute Positionierung vorbehalten. Um einen negativen Abstand zu erreichen, muss zusätzlich ein Pluszeichen davorgesetzt werden. Zum Beispiel: <code>X+-10</code>.</p>
<p id="PosPlusMargin"><span class="ver">[v1.1.16+]:</span> Bei <strong>X+</strong> und <strong>Y+</strong> kann der Buchstabe <strong>M</strong> als Ersatz für den aktuellen <a href="#Margin">Abstand</a> (Margin) des Fensters verwendet werden. Zum Beispiel würde <strong>x+m</strong> den rechten Rand des vorherigen Steuerelements verwenden, plus den voreingestellten Innenabstand. <strong>xp y+m</strong> würde ein Steuerelement unterhalb des vorherigen Steuerelements positionieren, während eine X-Koordinate allein normalerweise standardmäßig <strong>yp</strong> bedeuten würde.</p>
<p id="xp"><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong> und <strong>yp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) können dazu verwendet werden, Steuerelemente relativ zur linken oberen Ecke des vorherigen Steuerelements zu positionieren, um beispielsweise Steuerelemente in einer <a href="GuiControls.htm#GroupBox">GroupBox</a> einzuschließen.</p>
<p id="xm"><strong>xm</strong> und <strong>ym</strong> können dazu verwendet werden, ein Steuerelement jeweils am linken und rechten <a href="#Margin">Abstand</a> des Fensters zu positionieren (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl folgen). Wenn man <strong>ym</strong> ohne X-Position verwendet, wird das Steuerelement am oberen Abstand positioniert, aber rechts neben allen zuvor eingefügten Steuerelementen, wie als würde eine neue "Spalte" beginnen. Umgekehrt gilt das gleiche (xs ohne Y-Position).</p>
<p id="xs"><strong>xs</strong> und <strong>ys</strong>: Diese Optionen sind ungefähr das gleiche wie <strong>xm</strong> und <strong>ym</strong>, allerdings beziehen sie sich auf Koordinaten, die via <a href="#Section">Section</a>-Option eines zuvor hinzugefügten Steuerelements gespeichert wurden (das erste Steuerelement eines Fensters beginnt immer eine neue Sektion, egal ob diese Option vorhanden ist oder nicht). Wenn man <strong>ys</strong> ohne X-Position verwendet, wird das Steuerelement auf die zuvor gespeicherte Y-Position positioniert, aber rechts neben allen Steuerelementen, die seit der letzten Verwendung von <a href="#Section">Section</a> hinzugefügt wurden; wie als würde eine neue "Spalte" innerhalb der Sektion beginnen. Zum Beispiel:</p>
<pre>Gui, Add, Edit, w600  <em>; Fügt ein breites Eingabefeld am oberen Rand des Fensters hinzu.</em>
Gui, Add, Text, <strong>Section</strong>, Vorname:  <em> ; Speichert die Position des Steuerelements und beginnt eine neue Sektion.</em>
Gui, Add, Text,, Nachname:
Gui, Add, Edit, <strong>ys</strong>  <em>; Beginnt eine neue Spalte innerhalb dieser Sektion.</em>
Gui, Add, Edit
Gui, Show</pre>
<p>Umgekehrt gilt das gleiche (<strong>xs</strong> ohne Y-Position).</p>
<p>Bei Bedarf kann nach <strong>xs</strong> und <strong>ys</strong> ein Plus-/Minuszeichen und eine Zahl erfolgen. Das Wort <a href="#Section">Section</a> und xs/ys können gleichzeitig in den Optionen des Steuerelements vorhanden sein, dadurch kann das Steuerelement die vorherigen Positionsdaten für sich selbst nutzen und für nachfolgende Steuerelemente eine neue Sektion beginnen.</p>

<h2 id="Events">Speichern von und Reagieren auf Benutzereingaben</h2>
<p id="var"><strong>V</strong>: Variable. Verbindet eine Variable mit einem Steuerelement. Geben Sie dazu den Buchstaben V an und fügen Sie direkt danach den Namen einer globalen Variable ein (oder eine <a href="../Functions.htm#ByRef">lokale ByRef-Variable</a>, die auf eine globale Variable verweist, oder <span class="ver">[in v1.0.46.01+]</span> eine <a href="../Functions.htm#static">statische Variable</a>). <code><strong>v</strong>MeinEdit</code> würde beispielsweise den Inhalt des Steuerelements in die Variable <em>MeinEdit</em> speichern, sobald man <a href="#Submit">Gui Submit</a> verwendet. Das Zuweisen von Variablen ist auch bei Steuerelementen hilfreich, die nicht eingabefähig sind (z. B. das Text-Steuerelement oder GroupBox), weil der Name von so einer Variable zeitgleich als eindeutiger Identifikator dient, den man ganz leicht in Verbindung mit <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> benutzen kann.</p>
  <p class="note"><strong>Hinweis</strong>: <a href="#Submit">Gui Submit</a> funktioniert nur bei Steuerelementen, mit denen der Benutzer interagieren kann (z. B. Edit und Slider), aber es gibt Ausnahmen (z. B. <a href="ListView.htm">ListView</a> und <a href="TreeView.htm">TreeView</a>).</p>
<p id="label"><strong>G</strong>: Gosub (g-label). Startet automatisch eine Subroutine oder Funktion, wenn der Benutzer ein Steuerelement anklickt oder ändert. Geben Sie dazu den Buchstaben G an und fügen Sie direkt danach den Namen eines <a href="../misc/Labels.htm">Labels</a> ein, das ausgeführt werden soll. <code>gCancel</code> kann man benutzen, um standardmäßig ein indirektes <a href="#Cancel">Gui Cancel</a> auszulösen (aber nur, wenn man noch nicht selbst ein Label namens "Cancel" definiert hat). Die Subroutine kann auf folgende interne Variablen zurückgreifen: <a href="../Variables.htm#Gui">A_Gui</a>, <a href="../Variables.htm#GuiControl">A_GuiControl</a>, <a href="../Variables.htm#GuiEvent">A_GuiEvent</a> und <a href="../Variables.htm#EventInfo">A_EventInfo</a>.</p>
<p><span class="ver">[v1.1.20+]:</span> Wenn der Labelname ungültig ist, wird er stattdessen als Funktionsname angesehen. Alternativ kann man via <a href="GuiControl.htm#Functor">GuiControl</a> ein <a href="../objects/Functor.htm">Funktionsobjekt</a> mit einem Steuerelement verbinden. Die Funktion akzeptiert folgende Parameter (wenn man in diesem Fall <code>gCtrlEvent</code> in den Optionen verwendet):</p>
<pre class="Syntax"><span class="func">CtrlEvent</span>(CtrlHwnd, GuiEvent, EventInfo, ErrLevel:="")</pre>
<p>Die Bedeutung der Parameter ist vom Typ des Steuerelements abhängig. Hinweis: Wenn man den vierten Parameter ohne Standardwert deklariert, kann die Funktion nur von Ereignissen aufgerufen werden, die vier Parameter unterstützen.</p>

<h2 id="OtherOptions">Steuerelemente: Häufig verwendete Styles und Optionen</h2>
<p class="note"><strong>Hinweis</strong>: Vorzeichenlose Optionen werden standardmäßig hinzugefügt; zum Beispiel ist <code>Wrap</code> das gleiche wie <code>+Wrap</code>. <code>-Wrap</code> hingegen entfernt den Zeilenumbruch im Steuerelement.</p>
<p id="AltSubmit"><strong>AltSubmit</strong>: Eine alternative Submit-Methode. Bei DropDownList, ComboBox oder ListBox bewirkt diese Option, dass <a href="#Submit">Gui Submit</a> die Position des ausgewählten Elements speichert, nicht dessen Text. Wenn kein Element ausgewählt ist, wird eine ComboBox den Text in ihrem Eingabefeld als den zu speichernden Wert verwenden, während eine DropDownList oder ListBox ihre <a href="#var">zugewiesene Ausgabevariable</a> leer macht. Hinweis: AltSubmit beeinflusst auch das Verhalten von <a href="GuiControlGet.htm">GuiControlGet</a>, wenn der Inhalt von solchen Steuerelementen abgerufen wird.</p>
<p><strong>C</strong>: Farbe des Textes (funktioniert nicht bei <a href="GuiControls.htm#Button">Buttons</a>). Geben Sie den Buchstaben C an und fügen Sie direkt danach den Namen einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder einen RGB-Wert ein (das 0x-Präfix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p><strong>Disabled</strong>: Deaktiviert ein eingabefähiges Steuerelement, wodurch es weder fokussiert noch geändert werden kann. Mit <a href="GuiControl.htm#EnableDisable">GuiControl Enable</a> kann es später wieder aktiviert werden. Hinweis: Um ein Edit-Steuerelement stattdessen in den schreibgeschützten Zustand zu versetzen, gibt man <code>ReadOnly</code> in den Optionen an. Direkt nach dem Wort Disabled kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für aktiviert, 1 für deaktiviert). In diesem Fall wäre <code>Disabled</code> das gleiche wie <code>Disabled%VarMitEins%</code>.</p>
<p><strong>Hidden</strong>: Das Steuerelement wird zu Beginn unsichtbar sein. Mit <a href="GuiControl.htm#Show">GuiControl Show</a> kann es später wieder sichtbar gemacht werden. Direkt nach dem Wort Hidden kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für sichtbar, 1 für versteckt). In diesem Fall wäre <code>Hidden</code> das gleiche wie <code>Hidden%VarMitEins%</code>.</p>
<p><strong>Left</strong>: Richtet den Text im Steuerelement nach links aus. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
<p><strong>Right</strong>: Richtet den Text im Steuerelement nach rechts aus. Bei CheckBox- und Radio-Steuerelementen wird das Auswahlfeld auf die rechte Seite gesetzt. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
<p><strong>Center</strong>: Zentriert den Text im Steuerelement auf horizontaler Ebene. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.</p>
<p id="Section"><strong>Section</strong>: Beginnt eine neue Sektion und speichert die Positiondaten des Steuerelements, die für die Positionierungsoptionen <em>xs</em> und <em>ys</em> gedacht sind (<a href="#xs">siehe oben</a>).</p>
<p id="Tabstop"><strong>Tabstop</strong>: <code>-Tabstop</code> bewirkt, dass ein eingabefähiges Steuerelement übersprungen wird, wenn der Benutzer die TAB-Taste zum Navigieren verwendet.</p>
<p id="Wrap"><strong>Wrap</strong>: Aktiviert den automatischen Zeilenumbruch im Steuerelement. Nahezu alle Arten von Steuerelementen haben zu Beginn den automatischen Zeilenumbruch aktiv, daher verwendet man häufiger <code>-Wrap</code>, um es zu deaktivieren.</p>
<p><strong>VScroll</strong>: Stattet das Steuerelement mit einer vertikalen Scrollleiste aus, sofern möglich.</p>
<p><strong>HScroll</strong>: Stattet das Steuerelement mit einer horizontalen Scrollleiste aus, sofern möglich. Der Rest dieses Absatzes gilt nur für die <a href="GuiControls.htm#ListBox">ListBox</a>. Die Breite des scrollbaren Bereichs ist standardmäßig 3-mal so groß wie die Breite der ListBox. Um eine eigene Breite des scrollbaren Bereichs zu definieren, fügt man direkt nach dem Wort HScroll eine Zahl ein. Zum Beispiel wäre <code>HScroll500</code> ein scrollbarer Bereich von 500 Pixeln innerhalb der ListBox. Wenn die angegebene Breite des scrollbaren Bereichs allerdings kleiner ist als die Breite der ListBox, wird die Scrollleiste nicht angezeigt (beachte aber, dass die bloße Anwesenheit von <em>HScroll</em> es überhaupt erst möglich macht, die horizontale Scrollleiste später via <code><a href="GuiControl.htm">GuiControl</a>, +HScroll500, MeineScrollleiste</code> zu aktivieren).</p>

<h2>Steuerelemente: Selten verwendete Styles und Optionen</h2>
<p id="BackgroundTrans"><strong>BackgroundTrans</strong>: Aktiviert einen transparenten Hintergrund, wodurch Steuerelemente unterhalb eines Text-, Picture- oder GroupBox-Steuerelements teilweise sichtbar sind. Ein transparentes Text-Steuerelement oberhalb eines Picture-Steuerelements würde beispielsweise die Illusion erzeugen, als gehöre der Text zum Bild. Mit <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann diese Option wieder entfernt werden. Im <a href="GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a> findet man weitere Informationen über transparente Bilder. Bekannte Einschränkung: BackgroundTrans kann sich falsch verhalten, wenn man diese Option bei Steuerelementen innerhalb eines <a href="GuiControls.htm#Tab">Tab-Steuerelement</a>s mit einer <a href="ListView.htm">ListView</a> anwendet.</p>
<p><strong>-Background</strong>: Zwingt das Steuerelement, nicht die Hintergrundfarbe von <a href="#Color">Gui Color</a>, sondern seine vordefinierte Hintergrundfarbe zu verwenden. Das wird häufig gemacht, um ein Tab-Steuerelement in seiner Standardfarbe anstatt in Fensterfarbe anzeigen zu lassen. Mit <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann diese Option wieder entfernt werden.</p>
<p><strong>Border</strong>: Umrahmt das Steuerelement mit einer dünnen Linie. Die meisten Steuerelemente benötigen diese Option nicht, da sie bereits einen typenspezifischen Rahmen haben. Beim <em>nachträglichen</em> Hinzufügen eines Rahmens kann es vorkommen, dass man die Breite und Höhe des Steuerelements um 1 Pixel erweitern muss, um eine korrekte Darstellung zu gewährleisten.</p>
<p id="HwndOutputVar"><strong>Hwnd</strong><em>AusgabeVar</em> <span class="ver">[v1.0.46.01+]:</span> In Verbindung mit <a href="#Add">Gui Add</a> wird diese Option das Fenster-Handle (HWND) des neu erstellten Steuerelements in <em>AusgabeVar</em> speichern. Zum Beispiel: <code>Gui, Add, Edit, vMeinEdit HwndMeinEditHwnd</code>. Benutzt man dieses Beispiel in einer Funktion, wird <em>MeinEditHwnd</em> als <a href="../Functions.htm#DynVar">dynamische Variable</a> behandelt. Das HWND eines Steuerelements benutzt man häufig in Verbindung mit <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall</a>. Desweiteren kann man es direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-Fenstertitel</a> benutzen (das auch bei versteckten Steuerelementen funktioniert, selbst wenn <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> ausgeschaltet ist) oder <span class="ver">[seit v1.1.04+]</span> in Verbindung mit GuiControl und GuiControlGet als <em>SteuerelementID</em>-Parameter. Beachten Sie zudem, dass das HWND eines übergeordneten Fensters via <a href="#GuiHwndOutputVar">Gui MeinGui:+HwndAusgabeVar</a> abgerufen werden kann.</p>
<p><strong>Theme</strong>: Mit dieser Option kann das aktuelle Fenster-Design des neu erstellten Steuerelements überschrieben werden. Bei bereits vorhandenen Steuerelementen hat diese Option keinen Effekt; allerdings kann sich das in einer zukünftigen Version noch ändern. Siehe <a href="#Theme">Gui +/-Theme</a> für Details.</p>
<p><strong>(Unbenannter Style)</strong>: Geben Sie ein Plus- oder Minuszeichen an und fügen Sie direkt danach eine dezimale oder hexadezimale <a href="../misc/Styles.htm">Style-Nummer</a> ein. Wenn das Vorzeichen fehlt, wird die Style-Nummer standardmäßig hinzugefügt.</p>
<p><strong>(Unbenannter ExStyle)</strong>: Geben Sie ein Plus- oder Minuszeichen an und fügen Sie direkt danach ein "E" und eine dezimale oder hexadezimale erweiterte Style-Nummer ein. Wenn das Vorzeichen fehlt, wird die Style-Nummer standardmäßig hinzugefügt. <code>E0x200</code> würde beispielsweise den WS_EX_CLIENTEDGE-Style hinzufügen, der Steuerelemente wie z. B. Picture mit einem abgesenkten Rahmen ausstattet. Es gibt noch viele andere Styles, die hier zwar nicht aufgelistet sind (weil sie eher selten benutzt werden), aber auf <a href="http://www.microsoft.com">www.microsoft.com</a> zu finden sind, wenn man dort z. B. nach WS_EX_CLIENTEDGE sucht.</p>

<h2 id="Labels">Fensterereignisse</h2>
<p>Die folgenden Label (Subroutinen) werden automatisch mit einem GUI-Fenster verbunden, sofern sie im Skript vorkommen:</p>
<ul>
  <li><a href="#GuiClose">GuiClose</a></li>
  <li><a href="#GuiEscape">GuiEscape</a></li>
  <li><a href="#GuiSize">GuiSize</a></li>
  <li><a href="#GuiContextMenu">GuiContextMenu</a></li>
  <li><a href="#GuiDropFiles">GuiDropFiles</a></li>
</ul>
<p><span class="ver">[v1.1.20+]:</span> Wenn ein Label für das angegebene Ereignis nicht existiert, kann man stattdessen eine gleichnamige Funktion aufrufen lassen. Mithilfe des ersten Parameters dieser Funktion kann man das <a href="#GuiHwndOutputVar">HWND</a> des GUI abrufen. Einige Ereignisse haben noch mehr Parameter.</p>
<p>Die oben genannten Labelnamen gelten nur das <a href="#MultiWin">Fenster mit der Nummer 1</a> (also das Standardfenster ohne Fenstername oder -nummer). Die speziellen Label von anderen Fenstern müssen zusätzlich den Namen oder die Nummer dieses Fensters davorhaben. Zum Beispiel wären 2GuiEscape und 2GuiClose die Standardlabel des zweiten Fensters, und <em>MeinGui</em>GuiEscape und <em>MeinGui</em>GuiClose die Standardlabel von <em>MeinGui</em>. Mit <a href="#PlusLabel">Gui +Label</a> kann ein benutzerdefiniertes Präfix definiert werden.</p>

<p id="GuiClose"><strong>GuiClose</strong>: Startet, wenn das Fenster mit eine der folgenden Methoden geschlossen wird: X-Schaltfläche in der Titelleiste drücken, "Schließen" im Systemmenü auswählen oder via <a href="WinClose.htm">WinClose</a> schließen. Wenn dieses Label fehlt, wird das geschlossene Fenster nur versteckt, was den gleichen Effekt hat wie <a href="#Cancel">Gui Cancel</a>. Die am häufigsten durchgeführte Aktion für GuiClose ist <a href="ExitApp.htm">ExitApp</a>. Zum Beispiel:</p>
<pre>GuiClose:
ExitApp</pre>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiClose eine Funktion ist, wird das GUI standardmäßig geschlossen. Das folgende Beispiel zeigt, wie die Funktion dies verhindern kann, indem sie einen Integer ungleich 0 zurückgibt:</p>
<pre>GuiClose(GuiHwnd) {  <em>; Dieser Parameter ist optional.</em>
    MsgBox 4,, Wollen Sie das GUI wirklich schließen?
    IfMsgBox No
        return true  <em>; true = 1</em>
}</pre>

<p id="GuiEscape"><strong>GuiEscape</strong>: Startet, wenn der Benutzer die ESC-Taste drückt, während das GUI-Fenster aktiv ist. Wenn dieses Label fehlt, ist das Drücken der ESC-Taste wirkungslos. Bekannte Einschränkung: Sollte das erste Steuerelement im Fenster deaktiviert sein (wahrscheinlich abhängig vom Typ des Steuerelements), wird das GuiEscape-Label nicht ausgeführt. Dieser Effekt könnte auch durch andere Umstände ausgelöst werden.</p>

<p id="GuiSize"><strong>GuiSize</strong>: Startet, wenn das Fenster kleiner/größer gemacht, minimiert, maximiert oder wiederhergestellt wird. Die internen Variablen <a href="../Variables.htm#GuiWidth">A_GuiWidth</a> und <a href="../Variables.htm#GuiWidth">A_GuiHeight</a> enthalten jeweils die neue Breite und Höhe des Client-Fensterbereichs (das ist der Bereich ohne Rahmen, Titelleiste und Menüleiste). Außerdem enthalten <a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> jeweils eine der folgenden Zahlen:</p>
<p>0: Das Fenster wurde wiederhergestellt oder auf normale Weise größer/kleiner gemacht, z. B. durch Ziehen seines Rahmens.<br>
  1: Das Fenster wurde minimiert.<br>
  2: Das Fenster wurde maximiert.</p>
<p>Ein Skript kann mit GuiSize die Steuerelemente neu positionieren und größer/kleiner machen, wenn der Benutzer die Größe des Fensters ändern sollte. Mithilfe der Funktion von <a href="https://autohotkey.com/boards/viewtopic.php?f=6&amp;t=1079">AutoXYWH() von tmplinshi und toralf</a> könnte man diesen Vorgang vereinfachen.</p>
<p>Wenn man das Fenster größer/kleiner macht (auch via Skript), wird GuiSize nicht sofort aufgerufen. Wenn der aktuelle Thread <a href="Thread.htm#Interrupt">nicht unterbrochen werden kann</a>, wird GuiSize (und alle anderen Fenstereignisse) erst aufgerufen, wenn der Thread unterbrechbar ist. Das folgende Beispiel zeigt, wie GuiSize sofort aufgerufen werden kann, nachdem das Skript die Größe des Fensters geändert hat:</p>
<pre><a href="Critical.htm#Off">Critical Off</a>  <em>; Selbst wenn Critical On nie verwendet wurde.</em>
<a href="Sleep.htm">Sleep -1</a></pre>
<p><span class="ver">[v1.1.22.05+]:</span> Gui Show führt automatisch ein <code>Sleep -1</code> aus, demzufolge könnte man in diesem Fall das Sleep weglassen.</p>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiSize eine Funktion ist, wird sie folgende Parameter haben:</p>
<pre class="Syntax"><span class="func">GuiSize</span>(GuiHwnd, EventInfo, Breite, Höhe)</pre>

<p id="GuiContextMenu"><strong>GuiContextMenu</strong>: Startet immer dann, wenn der Benutzer innerhalb des Fensters (außer Titelleiste und Menüleiste) einen Rechtsklick macht. Es startet auch, wenn der Benutzer die MENÜ-Taste oder UMSCHALT+F10 drückt. GuiContextMenu kann, im Gegensatz zu vielen anderen GUI-Labels, gleichzeitig mehrere <a href="../misc/Threads.htm">Threads</a> von sich selbst aktiv haben. Innerhalb des GuiContextMenu-Labels sind folgende interne Variablen verfügbar:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a> mit dem <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements, welches das Ereignis empfangen hat (leer, wenn dies nicht der Fall ist).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>: Falls ListBox, ListView oder TreeView das Ziel des Kontextmenüs ist (via A_GuiControl feststellbar), wird A_EventInfo einen Wert enthalten, der ein Element innerhalb des Steuerelements repräsentiert:<br>
    <a href="GuiControls.htm#ListBox">ListBox</a> oder <a href="ListView.htm">ListView</a>: A_EventInfo enthält die Nummer der aktuell fokussierten Zeile/Reihe (0, wenn dies nicht der Fall ist).<br>
    <a href="TreeView.htm">TreeView</a>: Bei Rechtsklick enthält A_EventInfo die ID-Nummer des angeklickten Elements (0, wenn der Benutzer kein Element angeklickt hat). Beim Drücken der MENÜ-Taste oder UMSCHALT+F10 enthält A_EventInfo die ID-Nummer des ausgewählten Elements.</li>
  <li>A_GuiX und A_GuiY mit den X- und Y-Koordinaten der Position, wo das Menü angezeigt werden soll (z. B. <code><a href="Menu.htm">Menu</a>, MeinKontext, Show, %A_GuiX%, %A_GuiY%</code>). Die Koordinaten sind relativ zur linken oberen Ecke des Fensters.</li>
  <li>A_GuiEvent mit dem Wort "RightClick", wenn der Benutzer einen Rechtsklick gemacht hat, oder "Normal", wenn das Menü via MENÜ-Taste oder UMSCHALT+F10 aufgerufen wurde.</li>
</ol>
<p class="note"><strong>Hinweis</strong>: <a href="GuiControls.htm#Edit">Edit</a> und <a href="GuiControls.htm#MonthCal">MonthCal</a> haben ein eigenes Kontextmenü, demzufolge wird ein Rechtsklick in solchen Steuerelementen kein GuiContextMenu auslösen können.</p>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiContextMenu eine Funktion ist, wird sie folgende Parameter haben:</p>
<pre class="Syntax"><span class="func">GuiContextMenu</span>(GuiHwnd, CtrlHwnd, EventInfo, IstRechtsklick, X, Y)</pre>
<p><em>CtrlHwnd</em> ist leer, wenn das Ereignis nicht von einem Steuerelement stammt. <em>IstRechtsklick</em> ist wahr, wenn A_GuiEvent die Zeichenkette RightClick enthält.</p>

<p id="GuiDropFiles"><strong>GuiDropFiles</strong>: Startet immer dann, wenn man Dateien/Ordner mithilfe des Mauszeigers in das Fenster zieht und ablegt (wenn das Label bereits läuft, werden Drop-Ereignisse ignoriert). Innerhalb des GuiDropFiles-Labels sind folgende interne Variablen verfügbar:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a> mit dem <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements, wo die Dateien abgelegt wurden (leer, wenn dies nicht der Fall ist).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> mit der Anzahl abgelegter Dateien.</li>
  <li>A_GuiX und A_GuiY mit den X- und Y-Koordinaten der Position, wo die Dateien abgelegt wurden (die Koordinaten sind relativ zur oberen linken Ecke des Fensters).</li>
  <li>A_GuiEvent mit den Namen der abgelegten Dateien, jeweils mit einem Zeilenumbruchszeichen (`n) voneinander getrennt.</li>
</ol>
<p>Einzelne Dateien können extrahiert werden, wenn man eine <a href="LoopParse.htm">Parsende Schleife</a> wie folgt benutzt:
</p>
<pre><em>; BEISPIEL #1:</em>
Loop, parse, A_GuiEvent, `n
{
    MsgBox, 4,, Dateinummer %A_Index% ist:`n%A_LoopField%.`n`nWeiter?
    IfMsgBox, No, Break
}

<em>; BEISPIEL #2: Das folgende Beispiel zeigt, wie man die erste Datei extrahiert:</em>
Loop, parse, A_GuiEvent, `n
{
    ErsteDatei = %A_LoopField%
    Break
}

<em>; BEISPIEL #3: Das folgende Beispiel zeigt, wie man die Dateien in alphabetischer Reihenfolge abarbeitet:</em>
Dateiliste = %A_GuiEvent%
Sort, Dateiliste
Loop, parse, Dateiliste, `n
    MsgBox Dateinummer %A_Index% ist:`n%A_LoopField%.</pre>
<p>Um das Ziehen und Ablegen von Dateien in einem Fenster zu deaktivieren, entfernt man den WS_EX_ACCEPTFILES-Style via <code>Gui -E0x10</code>. Mit <code>Gui +E0x10</code> kann es wieder aktiviert werden.</p>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiDropFiles eine Funktion ist, wird sie Parameter haben, die weiter unten zu finden sind. <em>CtrlHwnd</em> ist leer, wenn Dateien auf das GUI selbst abgelegt werden. <em>DateiArray</em> ist ein <a href="../Objects.htm#Usage_Simple_Arrays">Array (Objekt)</a> mit Dateinamen, wo <code>DateiArray[1]</code> die erste Datei ist und <code>DateiArray.MaxIndex()</code> die Anzahl der Dateien zurückgibt. Mit einer <a href="For.htm">For-Schleife</a> kann man die Dateien einzeln durchgehen:</p>
<pre>GuiDropFiles(GuiHwnd, DateiArray, CtrlHwnd, X, Y) {
    for i, file in DateiArray
        MsgBox Datei %i% ist:`n%file%
}
</pre>

<p><strong>Erkennen von und reagieren auf andere Ereignisse</strong>: Andere Arten von GUI-Ereignissen können via <a href="OnMessage.htm">OnMessage()</a> erkannt und verarbeitet werden. Zum Beispiel könnte ein Skript eine kontextabhängige Hilfe via ToolTip anzeigen, wenn der Benutzer den Mauszeiger über bestimmte Steuerelemente im Fenster bewegt. Siehe dazu das <a href="#ExToolTip">GUI-ToolTip-Beispiel</a>.</p>

<h2 id="MultiWin">Mehrere GUI-Fenster erstellen</h2>
<p>Um mit einem anderen Fenster als das <a href="#DefaultWin">Standardfenster</a> zu agieren, fügt man dessen Namen oder Nummer (oder <span class="ver">[in v1.1.03+]</span> dessen <a href="#GuiHwndOutputVar">HWND</a>), gefolgt von einem Doppelpunkt, vor dem Unterbefehl ein. Zum Beispiel:</p>
<pre>Gui, <strong>MeinGui:</strong>Add, Text,, Text für das Über-Fenster.
Gui, <strong>MeinGui:</strong>Show</pre>
<p><code><a href="#Default">Gui MeinGui:Default</a></code> verhindert, dass jeder Unterbefehl mit "MeinGui:" vorangestellt werden muss. Innerhalb eines <a href="#DefaultWin">GUI-Threads</a> kann das Präfix weggelassen werden, sofern man dasselbe Fenster ansteuern will, das diesen Thread gestartet hat.</p>
<p id="Name"><span class="ver">[v1.1.03+]:</span> Die <a href="../Concepts.htm#names">Richtlinien zum Erstellen von Variablennamen</a> gelten auch bei Gui-Namen. Jede Nummer größer als 99 oder länger als zwei Zeichen (z. B. 0x01) wird automatisch als HWND eines Gui-Fensters behandelt. Wenn dieses Gui-Fenster nicht existiert, wird der Befehl fehlschlagen. Die maximale Anzahl neu erstellter Fenster richtet sich nur nach verfügbaren Systemressourcen.</p>
<p><span class="ver">[v1.1.04+]:</span> Mit <a href="#New">Gui, New</a> können beliebig viele unbenannte GUI-Fenster erstellt werden.</p>

<h2 id="DefaultWin">GUI-Ereignisse, Threads und Subroutinen</h2>
<p>Ein GUI-<a href="../misc/Threads.htm">Thread</a> ist ein Thread, der aufgrund einer GUI-Aktion gestartet wurde. Zu den GUI-Aktionen gehört beispielsweise das Auswählen eines <a href="#Menu">Menüpunkts</a> oder das Ausführen eines <a href="#label">g-Labels</a> (z. B. durch Drücken eines Buttons).</p>
<p>Der Name des Fensters, das einen GUI-Thread gestartet hat, wird gleichzeitig auch der <strong><a href="#MultiWin">Standardfenstername</a></strong> für diesen Thread sein. Nicht-GUI-Threads verwenden standardmäßig eine 1.</p>
<p>Das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> eines GUI-<a href="../misc/Threads.htm">Thread</a>s ist zu Beginn das GUI-Fenster selbst. Dadurch können Fenster- und Steuerelementbefehle -- z. B. <a href="WinMove.htm">WinMove</a>, <a href="WinHide.htm">WinHide</a>, <a href="WinSet.htm">WinSet</a>, <a href="WinSetTitle.htm">WinSetTitle</a> und <a href="ControlGetFocus.htm">ControlGetFocus</a> -- ohne Fenstertitel- und Fenstertextparameter benutzt werden, sofern man das GUI-Fenster selbst bearbeiten möchte (sogar wenn es versteckt ist).</p>
<p>Ein Klick auf ein Steuerelement, dessen <a href="#label">g-Label</a> wegen eines vorherigen Klicks noch läuft, ist unwirksam und führt dazu, dass dieses Ereignis verworfen wird. Um das zu verhindern, fügt man <a href="Critical.htm">Critical</a> als erste Zeile in die Subroutine ein (beachte aber, dass andere <a href="../misc/Threads.htm">Threads</a> wie Hotkey-Ereignisse dadurch auch zwischengespeichert/aufgeschoben werden).</p>
<p>Die internen Variablen A_Gui und A_GuiControl enthalten den Fensternamen und die ID des Steuerelements, das den aktuellen Thread gestartet hat. Siehe <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> für mehr Details.</p>
<p>Damit mehrere Ereignisse dieselbe Subroutine ausführen können, stapelt man die entsprechenden Labelnamen einfach übereinander. Zum Beispiel:</p>
<pre>GuiEscape:
GuiClose:
ButtonCancel:
ExitApp  <em>; Alle Label oben werden diesen Befehl ausführen.</em></pre>
<p>In einem GUI-<a href="../misc/Threads.htm">Thread</a> werden Einstellungen wie <a href="SendMode.htm">SendMode</a> zu Beginn mit Standardwerten geladen. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<h2 id="Navigate">Navigation mit der Tastatur</h2>
<p>Mit der TAB-Taste ist es möglich, den Tastaturfokus jeweils auf das nächste eingabefähige Steuerelement in einem GUI-Fenster zu setzen (Steuerelemente mit deaktiviertem <a href="#Tabstop">Tabstop</a>-Style werden übersprungen). In welcher Reihenfolge die Steuerelemente den Tastaturfokus erhalten, ist allein abhängig davon, zu welchem Zeitpunkt sie ursprünglich hinzugefügt worden sind. Sobald man das Fenster das erste Mal erblickt, wird der Tastaturfokus auf das erste eingabefähige Steuerelement mit aktiviertem Tabstop-Style gesetzt (was auf die meisten zutrifft).</p>
<p id="ShortcutKey">Die Texte einiger Steuerelemente können ein Und-Zeichen (&amp;) enthalten, um das nachfolgende Zeichen zu unterstreichen (abhängig von den Systemeinstellungen) und als Tastenkürzel zu bestimmen. Um das Tastenkürzel zu aktivieren, muss der Benutzer die ALT-Taste gedrückt halten und dann das entsprechende Zeichen auf der Tastatur drücken. Die Benutzung des Tastenkürzels bei Button-, CheckBox- und Radio-Steuerelementen ist das gleiche wie, als würde man auf das Steuerelement klicken. Bei GroupBox- und Text-Steuerelementen hingegen wird der Tastaturfokus auf das nächstmögliche <a href="#Tabstop">Tabstop</a>-Steuerelement gesetzt, das eingabefähig ist. Wenn mehrere Steuerelemente das gleiche Tastenkürzel verwenden und drückt man dieses, springt der Tastaturfokus zwischen solchen Steuerelementen abwechselnd hin und her.</p>
<p>Um ein direkt geschriebenes Und-Zeichen in einem der oben genannten Steuerelementtypen darzustellen, schreibt man zwei aufeinanderfolgende Und-Zeichen. Zum Beispiel: <code>Save &amp;&amp; Exit</code>.</p>
<h2 id="Appear">Fensterdarstellung</h2>
<p>Ein GUI-Fenster verwendet als Symbol das Tray-Symbol, welches zum Zeitpunkt seiner Erstellung wirksam war. Wenn das Fenster also ein anderes Symbol haben soll, muss man das Tray-Symbol vor seiner Erstellung ändern. Zum Beispiel: <code><a href="Menu.htm">Menu</a>, Tray, Icon, MeinSymbol.ico</code>. Es ist auch möglich, ein anderes großes Symbol für ein Fenster zu definieren (das große Symbol kann man sich in der Programmumschaltung via ALT+TAB anschauen). Mit LoadPicture und SendMessage wäre das wie folgt zu erreichen:</p>
<pre>Symbolgröße := 32  <em>; Die ideale Größe für Alt-Tab variiert je nach System und Windows-Version.</em>
hIcon := <a href="LoadPicture.htm">LoadPicture</a>("Mein Symbol.ico", "Icon1 w" Symbolgröße " h" Symbolgröße, Bildtyp)
Gui +LastFound
<a href="PostMessage.htm">SendMessage</a> 0x80, 1, hIcon  <em>; 0x80 ist WM_SETICON; und 1 bedeutet ICON_BIG (0 wäre ICON_SMALL).</em>
Gui Show</pre>
<p>Aufgrund von Einschränkungen in Windows XP und höher werden CheckBox-, Radio- und GroupBox-Steuerelemente, deren Textfarbe vom Standard abweicht, im klassischen Design dargestellt.</p>
<p>Verwandtes Thema: <a href="#Margin">Margin</a> (Abstände innerhalb eines Fensters).</p>
<h2 id="GenRemarks">Allgemeine Bemerkungen</h2>
<p>Mit <a href="GuiControl.htm">GuiControl</a> und <a href="GuiControlGet.htm">GuiControlGet</a> können bestimmte Steuerelemente in einem GUI-Fenster bearbeitet werden.</p>
<p>Jedes GUI-Fenster kann bis zu 11.000 Steuerelemente enthalten. Aber Vorsicht: Bei mehr als 5.000 Steuerelementen kann es vorkommen, dass bestimmte Typen von Steuerelementen instabil werden.</p>
<p>Skripte, die den GUI-Befehl irgendwo enthalten, sind automatisch <a href="_Persistent.htm">persistent</a> (selbst wenn der GUI-Befehl nie ausgeführt wird). Außerdem sind mehrere Instanzen dieses Skripts nicht möglich, es sein denn, man überschreibt diese Einschränkung mit der <a href="_SingleInstance.htm">#SingleInstance</a>-Direktive.</p>
<h2>Siehe auch</h2>
<p><a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="Menu.htm">Menu</a>, <a href="GuiControls.htm">Typen von Steuerelementen</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Control.htm">Control</a>, <a href="ControlGet.htm">ControlGet</a>, <a href="Progress.htm">SplashImage</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelectFile.htm">FileSelectFile</a>, <a href="FileSelectFolder.htm">FileSelectFolder</a></p>
<h2 id="Examples">Beispiele</h2>
<pre class="NoIndent"><em>; Beispiel: Erzielt einen ähnlichen Effekt wie SplashTextOn:</em>

Gui, +AlwaysOnTop +Disabled -SysMenu +Owner  <em>; +Owner verhindert eine Taskleistenschaltfläche.</em>
Gui, Add, Text,, Beliebiger Text.
Gui, Show, NoActivate, Fenstertitel  <em>; NoActivate verhindert, dass ein anderes Fenster seinen Aktivzustand verliert.</em></pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Ein einfaches Eingabefenster zum Abfragen des Vor- und Nachnamens:</em>

Gui, Add, Text,, Vorname:
Gui, Add, Text,, Nachname:
Gui, Add, Edit, vVorname ym  <em>; Die ym-Option beginnt eine neue Spalte für Steuerelemente.</em>
Gui, Add, Edit, vNachname
Gui, Add, Button, default, OK  <em>; ButtonOK-Label (wenn vorhanden) wird ausgeführt, wenn der Button gedrückt wird.</em>
Gui, Show,, Einfaches Eingabebeispiel
return  <em>; Ende des automatischen Ausführungsbereichs. Das Skript ist solange im Leerlauf, bis der Benutzer irgendetwas macht.</em>

GuiClose:
ButtonOK:
Gui, Submit  <em>; Speichert die Benutzereingaben in die entsprechenden Steuerelementvariablen.</em>
MsgBox Sie haben "%Vorname% %Nachname%" eingegeben.
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Tab-Steuerelement:</em>

Gui, Add, Tab2,, Erster Tab|Zweiter Tab|Dritter Tab  <em>; Tab2 benötigt <span class="ver">[v1.0.47.05+]</span>.</em>
Gui, Add, Checkbox, vMeineCheckBox, Kontrollkästchen
Gui, Tab, 2
Gui, Add, Radio, vMeinRadio, Optionsfeld 1
Gui, Add, Radio,, Optionsfeld 2
Gui, Tab, 3
Gui, Add, Edit, vMeinEdit r5  <em>; r5 bedeutet 5 Reihen hoch.</em>
Gui, Tab  <em>; nachfolgende Steuerelemente werden nicht als Teil des Tab-Steuerelements angesehen.</em>
Gui, Add, Button, default xm, OK  <em>; xm positioniert den Button in die untere linke Ecke.</em>
Gui, Show
return

ButtonOK:
GuiClose:
GuiEscape:
Gui, Submit  <em>; Speichert die Inhalte der Steuerelemente in ihre zugeordneten Variablen.</em>
MsgBox Ihre Eingabe:`n%MeineCheckBox%`n%MeinRadio%`n%MeinEdit%
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: ListBox mit Dateien aus einem Verzeichnis:</em>

Gui, Add, Text,, Eine Datei zum Ausführen auswählen.`nDrücken Sie ESCAPE oder schließen Sie das Fenster, um den Vorgang abzubrechen.
Gui, Add, ListBox, vMeineListBox gMeineListBox w640 r10
Gui, Add, Button, Default, OK
Loop, C:\*.*  <em>; Ordner und musterbasierte Suche je nach Bedarf anpassen.</em>
{
    GuiControl,, MeineListBox, %A_LoopFileFullPath%
}
Gui, Show
return

MeineListBox:
if A_GuiEvent &lt;&gt; DoubleClick
    return
<em>; Ansonsten wurde ein Doppelklick auf einen Listeneintrag gemacht, also wie OK-Drücken behandeln
; und zum nächsten Label übergehen.</em>
ButtonOK:
GuiControlGet, MeineListBox  <em>; Ermittelt die aktuelle Auswahl in der ListBox.</em>
MsgBox, 4,, Wollen Sie die folgende Datei wirklich öffnen?`n`n%MeineListBox%
IfMsgBox, No
    return
<em>; Ansonsten versuchen zu starten:</em>
Run, %MeineListBox%,, UseErrorLevel
if ErrorLevel = ERROR
    MsgBox Die angegebene Datei konnte nicht ausgeführt werden.  Scheinbar fehlt ein passendes Programm dafür.
return

GuiClose:
GuiEscape:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="ExToolTip"><em>; Beispiel: Zeigt eine kontextabhängige Hilfe an (via ToolTip), wenn man den Mauszeiger über ein bestimmtes Steuerelement bewegt:</em>

Gui, Add, Edit, v<strong>MeinEdit</strong>
<strong>MeinEdit</strong>_TT := "Das Tooltip für das Steuerelement mit der Variable MeinEdit"
Gui, Add, DropDownList, v<strong>MeineDDL</strong>, Rot|Grün|Blau
<strong>MeineDDL</strong>_TT := "Wählen Sie eine Farbe aus."
Gui, Add, Checkbox, vMeineCheckBox, Dieses Steuerelement hat kein Tooltip.
Gui, Show
<a href="OnMessage.htm">OnMessage</a>(0x200, "WM_MOUSEMOVE")
return

WM_MOUSEMOVE()
{
    static CurrControl, PrevControl, _TT  <em>; _TT bleibt für den unteren ToolTip-Befehl leer.</em>
    CurrControl := A_GuiControl
    If (CurrControl &lt;&gt; PrevControl and not InStr(CurrControl, " "))
    {
        ToolTip  <em>; Schließt alle offenen Tooltips.</em>
        SetTimer, ZeigeToolTip, 1000
        PrevControl := CurrControl
    }
    return

    ZeigeToolTip:
    SetTimer, ZeigeToolTip, Off
    <a href="ToolTip.htm">ToolTip</a> % %CurrControl%_TT  <em>; Das erste Prozentzeichen erzwingt einen Ausdruck.</em>
    SetTimer, EntferneToolTip, 3000
    return

    EntferneToolTip:
    SetTimer, EntferneToolTip, Off
    ToolTip
    return
}


GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="OSD"><em>; Beispiel: Bildschirmanzeige (OSD) mittels transparentem Fenster:</em>

UnsichtbareFarbe = EEAA99  <em>; Kann eine beliebige RGB-Farbe sein (wird weiter unten transparent gemacht).</em>
Gui +LastFound +AlwaysOnTop -Caption +ToolWindow  <em>; +ToolWindow entfernt die Taskleistenschaltfläche und die Möglichkeit, via ALT+TAB angesteuert zu werden.</em>
Gui, Color, %UnsichtbareFarbe%
Gui, Font, s32  <em>; Setzt eine große Schriftgröße (32 Punkte).</em>
Gui, Add, Text, vMeinText cLime, XXXXX YYYYY  <em>; XX &amp; YY dienen zum automatischen Anpassen der Fenstergröße.
; Macht alle Pixel dieser Farbe unsichtbar und den Text selbst transparent (150):</em>
WinSet, TransColor, %UnsichtbareFarbe% 150
SetTimer, AktualisiereOSD, 200
Gosub, AktualisiereOSD  <em>; Aktualisierung sofort durchzuführen, anstatt auf den Timer zu warten.</em>
Gui, Show, x0 y400 NoActivate  <em>; NoActivate verhindert, dass ein anderes Fenster sein Aktivzustand verliert.</em>
return

AktualisiereOSD:
MouseGetPos, MausX, MausY
GuiControl,, MeinText, X%MausX%, Y%MausY%
return</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Eine animierte Fortschrittsleiste auf einem Hintergrundbild.</em>

Gui, Color, White
Gui, Add, Picture, x0 y0 h350 w450, %A_WinDir%\system32\ntimage.gif
Gui, Add, Button, Default xp+20 yp+250, Animation starten
Gui, Add, Progress, vMeinProgress w416
Gui, Add, Text, vMeinText wp  <em>; wp bedeutet "vorherige Breite verwenden".</em>
Gui, Show
return

ButtonAnimationStarten:
Loop, %A_WinDir%\*.*
{
    if A_Index &gt; 100
        break
    GuiControl,, MeinProgress, %A_Index%
    GuiControl,, MeinText, %A_LoopFileName%
    Sleep 50
}
GuiControl,, MeinText, Animation beendet.
return

GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Einfacher Bildbetrachter:</em>

Gui, +Resize
Gui, Add, Button, default, Neues Bild &amp;laden
Gui, Add, Radio, ym+5 x+10 vOption checked, &amp;Originalgröße
Gui, Add, Radio, ym+5 x+10, &amp;Kompletter Bildschirm
Gui, Add, Pic, xm vPic
Gui, Show
return

ButtonNeuesBildLaden:
FileSelectFile, Datei,,, Bild auswählen:, Bilder (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)
if Datei =
    return
Gui, Submit, NoHide <em>; Speichert die Werte der Optionsfelder.</em>
if Option = 1  <em>; Bild mit aktueller Größe anzeigen.</em>
{
    Breite = 0
    Höhe = 0
}
else <em>; Zweites Optionsfeld ausgewählt: Größe des Bildes an Bildschirmgröße anpassen.</em>
{
    Breite := A_ScreenWidth - 28  <em>; Minus 28, um Platz für Rahmen und Innenabstand zu schaffen.</em>
    Höhe = -1  <em>; "Seitenverhältnis beibehalten" erscheint sinnvoll.</em>
}
GuiControl,, Pic, *w%Breite% *h%Höhe% %Datei%  <em>; Bild laden.</em>
Gui, Show, xCenter y0 AutoSize, %Datei%  <em>; Fenstergröße an Bildgröße anpassen.</em>
return

GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Einfacher Texteditor mit Menüleiste.</em>

<em>; Untermenüs für die Menüleiste erstellen:</em>
Menu, Dateimenü, Add, &amp;Neu, DateiNeu
Menu, Dateimenü, Add, &amp;Öffnen, DateiÖffnen
Menu, Dateimenü, Add, &amp;Speichern, DateiSpeichern
Menu, Dateimenü, Add, Speichern &amp;unter..., DateiSpeichernAls
Menu, Dateimenü, Add  <em>; Trennlinie.</em>
Menu, Dateimenü, Add, E&amp;xit, DateiBeenden
Menu, Hilfsmenü, Add, &amp;Über, HilfeÜber

<em>; Fügt die Untermenüs in die Menüleiste ein:</em>
Menu, MeineMenüleiste, Add, &amp;Datei, :Dateimenü
Menu, MeineMenüleiste, Add, &amp;Hilfe, :Hilfsmenü

<em>; Heftet die Menüleiste an das Fenster an:</em>
Gui, Menu, MeineMenüleiste

<em>; Erstellt das Haupt-Eingabefeld und zeigt das Fenster an:</em>
Gui, +Resize  <em>; Macht die Größe des Fensters veränderbar.</em>
Gui, Add, Edit, vHauptEdit WantTab W600 R20
Gui, Show,, Unbenannt
AktuellerDateiname =  <em>; Bedeutet, dass keine aktuelle Datei vorhanden ist.</em>
return

DateiNeu:
GuiControl,, HauptEdit  <em>; Eingabefeld leeren.</em>
return

DateiÖffnen:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
FileSelectFile, AusgewählterDateiname, 3,, Datei öffnen, Text-Dokumente (*.txt)
if AusgewählterDateiname =  <em>; Keine Datei ausgewählt.</em>
    return
Gosub DateiLesen
return

DateiLesen:  <em>; Der Aufrufer hat AusgewählterDateiname bereits für uns gesetzt.</em>
FileRead, HauptEdit, %AusgewählterDateiname%  <em>; Liest den Inhalt der Datei und speichert ihn in die Variable.</em>
if ErrorLevel
{
    MsgBox "%AusgewählterDateiname%" konnte nicht geöffnet werden.
    return
}
GuiControl,, HauptEdit, %HauptEdit%  <em>; Fügt den Text in das Steuerelement ein.</em>
AktuellerDateiname = %AusgewählterDateiname%
Gui, Show,, %AktuellerDateiname%   <em>; Zeigt den Dateinamen in der Titelleiste an.</em>
return

DateiSpeichern:
if AktuellerDateiname =   <em>; Aktuell keinen Dateinamen ausgewählt, daher "Speichern unter...".</em>
    Goto DateiSpeichernAls
Gosub AktuelleDateiSpeichern
return

DateiSpeichernAls:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
FileSelectFile, AusgewählterDateiname, S16,, Datei speichern, Text-Dokumente (*.txt)
if AusgewählterDateiname =  <em>; Keine Datei ausgewählt.</em>
    return
AktuellerDateiname = %AusgewählterDateiname%
Gosub AktuelleDateiSpeichern
return

AktuelleDateiSpeichern:  <em>; Der Aufrufer hat sichergestellt, dass AktuellerDateiname nicht leer ist.</em>
IfExist %AktuellerDateiname%
{
    FileDelete %AktuellerDateiname%
    if ErrorLevel
    {
        MsgBox Überschreiben der Datei "%AktuellerDateiname%" fehlgeschlagen.
        return
    }
}
GuiControlGet, HauptEdit  <em>; Ermittelt den Inhalt des Eingabefeldes.</em>
FileAppend, %HauptEdit%, %AktuellerDateiname%  <em>; Speichert den Inhalt in eine Datei.
; Bei Erfolg den Dateinamen in der Titelleiste anzeigen (falls es mit DateiSpeichernAls aufgerufen wurde):</em>
Gui, Show,, %AktuellerDateiname%
return

HilfeÜber:
Gui, Über:+owner1  <em>; Macht das Über-Fenster zum Unterfenster vom Hauptfenster (Gui Nr. 1).</em>
Gui +Disabled  <em>; Deaktiviert das Hauptfenster.</em>
Gui, Über:Add, Text,, Beliebiger Text.
Gui, Über:Add, Button, Default, OK
Gui, Über:Show
return

ÜberButtonOK:  <em>; Dieser Abschnitt gilt für das Über-Fenster oben.</em>
ÜberGuiClose:
ÜberGuiEscape:
Gui, 1:-Disabled  <em>; Reaktiviert das Hauptfenster (muss vor dem nächsten Schritt erfolgen).</em>
Gui Destroy  <em>; Entfernt das Über-Fenster.</em>
return

GuiDropFiles:  <em>; Ziehen &amp; Ablegen unterstützen.</em>
Loop, Parse, A_GuiEvent, `n
{
    AusgewählterDateiname = %A_LoopField%  <em>; Nur die erste Datei nehmen (sofern mehrere Dateien vorhanden sind).</em>
    break
}
Gosub DateiLesen
return

GuiSize:
if ErrorLevel = 1  <em>; Das Fenster wurde minimiert.  Keine Aktion notwendig.</em>
    return
<em>; Ansonsten wurde die Größe des Fensters geändert oder maximiert. Die Größe des Eingabefeldes muss entsprechend angepasst werden.</em>
NeueBreite := A_GuiWidth - 20
NeueHöhe := A_GuiHeight - 20
GuiControl, Move, HauptEdit, W%NeueBreite% H%NeueHöhe%
return

DateiBeenden:     <em>; Benutzer hat "Exit" im Dateimenü ausgewählt.</em>
GuiClose:  <em>; Benutzer hat das Fenster geschlossen.</em>
ExitApp</pre>
</body>
</html>
