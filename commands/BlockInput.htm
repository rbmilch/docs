<!DOCTYPE HTML>
<html>
<head>
<title>BlockInput</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>BlockInput</h1>

<p>Deaktiviert oder aktiviert die Fähigkeit des Benutzers, mit dem Computer mittels Tastatur und Maus zu interagieren.</p>

<pre class="Syntax"><span class="func">BlockInput</span>, Modus</pre>
<h3>Parameter</h3>
<dl>

  <dt>Modus</dt>
  <dd><p><strong><u>Modus 1</u></strong>: Eines der folgenden Wörter:</p>
      <p><strong>On</strong>: Der Benutzer kann nicht länger mit dem Computer interagieren (Maus- und Tastatureingaben haben keine Wirkung).</p>
      <p><strong>Off</strong>: Aktiviert wieder die Eingabe.</p>
      <p><strong><u>Modus 2</u></strong>: Dieser Modus fungiert eigenständig; das heißt, dass einer der anderen Modi und dieser Modus zur selben Zeit aktiv sein können. Es ist zum Beispiel möglich, jederzeit <code>BlockInput On</code> und <code>BlockInput Off</code> zu nutzen, während einer der nachfolgenden Einstellungen aktiv ist.</p>
      <p><strong>Send</strong>: Die Tastatur- und Mauseingaben des Benutzers werden ignoriert, während <a href="Send.htm">Send</a> oder <a href="Send.htm">SendRaw</a> Tasten sendet (dies gilt nur für den traditionellen <a href="SendMode.htm">SendEvent-Modus</a>). Dadurch wird verhindert, dass die Tastatureingaben des Benutzers die Ausführung der künstlichen Tastatureingaben stören. Wenn das Senden beendet ist, wird die Eingabe wieder aktiviert (sofern sie nicht durch ein vorheriges <code>BlockInput On</code> blockiert wird).</p>
      <p><strong>Mouse</strong>: Die Tastatur- und Mauseingaben des Benutzers werden ignoriert, während <a href="Click.htm">Click</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="MouseClick.htm">MouseClick</a> oder <a href="MouseClickDrag.htm">MouseClickDrag</a> Mausaktionen durchführt (dies gilt nur für den traditionellen <a href="SendMode.htm">SendEvent-Modus</a>). Dadurch wird verhindert, dass die Mausaktionen des Benutzers künstlich gesendete Mausereignisse stören. Wenn der Mausbefehl seine Aktion durchgeführt hat, wird die Eingabe wieder aktiviert (sofern sie nicht durch ein vorheriges <code>BlockInput On</code> blockiert wird).</p>
      <p><strong>SendAndMouse</strong>: Eine Kombination der beiden oben genannten Einstellungen.</p>
      <p><strong>Default</strong>: Schaltet die <em>Send</em>- und <em>Mouse</em>-Einstellung aus, aber ändert nicht den aktuellen Zustand der Eingabeblockierung. <code>BlockInput On</code> beispielsweise kann nicht durch <code>BlockInput Default</code> deaktiviert werden.</p>
      <p id="MouseMove"><u><strong>Modus 3</strong></u> <span class="ver">[benötigt v1.0.43.11+]</span>: Dieser Modus fungiert eigenständig; das heißt, dass einer der anderen Modi und dieser Modus zur selben Zeit aktiv sein können. <code>BlockInput On</code> und <code>BlockInput MouseMove</code> beispielsweise blockieren die Mausbewegung. Um die Blockierung aufzuheben, müssen beide Modi ausgeschaltet werden.</p>
      <p><strong>MouseMove</strong>: Der Mauszeiger wird sich nicht bewegen, wenn der Benutzer die Maus physisch bewegt (eine mögliche Ausnahme sind DirectInput-Anwendungen). Wenn ein Skript diesen Befehl zum ersten Mal verwendet, wird der <a href="_InstallMouseHook.htm">Maus-Hook</a> installiert (falls noch nicht geschehen). Darüber hinaus wird das Skript <a href="_Persistent.htm">persistent</a>; das heißt, dass das Skript nur noch mit <a href="ExitApp.htm">ExitApp</a> beendet werden kann. Jedes Mal, wenn das Skript einen <a href="Suspend.htm">Suspend</a>- oder <a href="Hotkey.htm">Hotkey</a>-Befehl erreicht, wird überprüft, ob der Maus-Hook noch von Hotkeys oder Hotstrings beansprucht wird. Ist dies nicht der Fall, wird der Hook wieder deinstalliert (siehe <a href="_Hotstring.htm">#Hotstring NoMouse</a>).</p>
      <p><strong>MouseMoveOff</strong>: Der Benutzer darf den Mauszeiger wieder bewegen.</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p class="note"><strong>Hinweis:</strong> Modus 1 und 2 werden eventuell nicht funktionieren, wenn UAC aktiv ist und das Skript nicht als Administrator gestartet wurde. Weitere Informationen finden Sie in der <a href="../FAQ.htm#uac">FAQ</a>.</p>
<p>Anstelle von BlockInput ist es oft besser, <code><a href="SendMode.htm">SendMode</a> Input</code> oder <code><a href="SendMode.htm">SendMode</a> Play</code> zu nutzen, damit Tastendrücke und Mausklicks nicht unterbrochen werden können. Diese Modi verhindern im Gegensatz zu BlockInput, dass die eingegebenen Tasten des Benutzers während des Sendens verworfen werden; stattdessen werden solche Tastendrücke zwischengespeichert, um sie anschließend zu senden. Der Verzicht auf BlockInput verhindert auch, dass Tasten, die hängen bleiben, wie im nächsten Abschnitt beschrieben umgangen werden müssen.</p>
<p>Es kann vorkommen, dass Tasten "hängen bleiben", wenn der Benutzer sie gedrückt hält, während BlockInput aktiviert wird. Das folgende Beispiel zeigt, wie man das umgehen kann, indem man zuerst wartet, bis Tasten losgelassen werden, und dann BlockInput einschaltet:</p>
<pre>^!p::
KeyWait Control  <em>; Wartet, bis die Taste losgelassen wird.  Verwenden Sie für jeden Hotkey-Modifikator ein eigenes KeyWait.</em>
KeyWait Alt
BlockInput On
<em>; ... Tastendrücke und Mausklicks senden ...</em>
BlockInput Off
return</pre>
<p>Die Eingabeblockierung wird vorübergehend deaktiviert, wenn ein ALT-Ereignis gesendet wird (und danach wieder aktiviert).</p>
<p>BlockInput blockiert zwar die Benutzereingabe, aber kann nicht verhindern, dass AutoHotkey künstliche Tastatureingaben und Mausklicks erzeugt. Durch Drücken von STRG+ALT+ENTF wird die Eingabe jedoch aufgrund einer Windows-API-Funktion wieder aktiviert.</p>
<p>Bestimmte Arten von <a href="_UseHook.htm">Hook-Hotkeys</a> können auch dann noch ausgelöst werden, wenn BlockInput eingeschaltet ist. Darunter fallen würde zum Beispiel <code>MButton</code> (Maus-Hook) und <code>LWin &amp; Space</code> (Tastatur-Hook mit explizitem Präfix statt den Modifikatoren <code>$#</code>).</p>
<p>Die Eingabe wird automatisch wieder aktiviert, wenn das Skript beendet wird.</p>
<h3>Siehe auch</h3>
<p><a href="SendMode.htm">SendMode</a>, <a href="Send.htm">Send</a>, <a href="Click.htm">Click</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="MouseClick.htm">MouseClick</a>, <a href="MouseClickDrag.htm">MouseClickDrag</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">BlockInput, On
Run, notepad
WinWaitActive, Unbenannt - Editor
Send, {F5} <em>; Fügt Uhrzeit und Datum ein</em>
BlockInput, Off</pre>

</body>
</html>
