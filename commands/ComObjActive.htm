<!DOCTYPE HTML>
<html>
<head>
<title>ComObjActive()</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjActive() <span class="ver">[AHK_L 53+]</span></h1>

<p>Ermittelt ein laufendes Objekt, das mit OLE registriert wurde.</p>
<pre class="Syntax">ComObject := <span class="func">ComObjActive</span>(CLSID)</pre>

<p id="param">Erstellt ein Objekt, das in typisierter Form als Parameter oder Rückgabewert übergeben werden kann.</p>
<pre class="Syntax">ParamObj := <span class="func">ComObject</span>(VarTyp, Wert <span class="optional">, Flags</span>)</pre>

<h4 style="margin-top:2em">VERALTET:</h4>
<p>Die unten gezeigten Verwendungen sind veraltet und werden in einer zukünftigen Version geändert oder nicht mehr zur Verfügung stehen.</p>
<p id="missing">Erstellt ein Objekt, das stellvertretend für den Standardwert eines optionalen Parameters verwendet werden kann, wenn eine Methode eines COM-Objekts aufgerufen wird. <span class="ver">[v1.1.12+]</span>: Diese Funktion ist veraltet. Schreiben Sie stattdessen zwei aufeinanderfolgende Kommas, wie z. B. in <code>Obj.Methode(1,,3)</code></p>
<pre class="Syntax">ParamObj := <span class="func">ComObjMissing</span>()</pre>

<p id="enwrap">Wrappt oder entwrappt einen unbearbeiteten <a href="https://msdn.microsoft.com/de-DE/de/library/dd318520.aspx">IDispatch</a>-Pointer in ein brauchbares Objekt und ruft automatisch AddRef auf.</p>
<pre class="Syntax">
ComObject := <span class="func">ComObjEnwrap</span>(DispPtr)
DispPtr := <span class="func">ComObjUnwrap</span>(ComObject)
</pre>
<p>Um den Code zukunftssicherer zu machen, schreibt man Folgendes:</p>
<pre>ComObject := ComObject(9, DispPtr, 1), ObjAddRef(DispPtr)
DispPtr := <a href="ComObjValue.htm">ComObjValue</a>(ComObject), ObjAddRef(DispPtr)</pre>

<h3>Parameter</h3>
<dl>

  <dt>CLSID</dt>
  <dd><p>CLSID oder eine visuell lesbare ProgID des COM-Objekts.</p></dd>

  <dt>ComObject</dt>
  <dd><p>COM-Objekt, das mit der <a href="../Objects.htm#Usage_Objects">Objekt-Syntax</a> verwendbar ist.</p></dd>

  <dt>VarTyp</dt>
  <dd><p>Ein Integer-Wert, der den Typ des Wertes kennzeichnet. Siehe <a href="ComObjType.htm#vt">ComObjType()</a> für eine Liste von Typen.</p></dd>

  <dt>Wert</dt>
  <dd><p>Der Wert, der gewrappt werden soll. Zurzeit werden nur Integer- oder Pointer-Werte unterstützt.</p></dd>

  <dt>Flags</dt>
  <dd><p>Flags haben Einfluss auf das Verhalten dieser Funktion und des Wrapper-Objekts (siehe unten).</p></dd>

  <dt>DispPtr</dt>
  <dd><p>Unbearbeiteter IDispatch-Pointer.</p></dd>

</dl>

<h3 id="Flags">Flags</h3>
<table class="info">
  <tr>
    <td>&nbsp;0&nbsp;</td>
    <td>
      <p>Standardverhalten. <a href="https://msdn.microsoft.com/de-de/library/ms691379.aspx">AddRef</a> wird bei einem IUnknown- und IDispatch-Pointer automatisch aufgerufen, daher sollte der Aufrufer <a href="ObjAddRef.htm">ObjRelease</a> verwenden, um deren Kopie des Pointers bei Bedarf wieder freizugeben.</p>
      <p>Da das Standardverhalten in einer zukünftigen Version geändert werden könnte, empfiehlt es sich, <em>Flags</em> immer auf <code>1</code> zu setzen, wenn ein Interface-Pointer gewrappt wird, und bei Bedarf <a href="ObjAddRef.htm">ObjAddRef()</a> aufzurufen.</p>
    </td>
  </tr>
  <tr>
    <td>&nbsp;1&nbsp;</td>
    <td>Ergreift Besitz von einem IUnknown-, IDispatch- oder SAFEARRAY-Pointer. AddRef wird nicht aufgerufen. Enthält das Wrapper-Objekt einen SAFEARRAY (ohne VT_BYREF), wird beim Freigeben des Wrapper-Objekts <a href="https://msdn.microsoft.com/de-de/library/ms221702.aspx">SafeArrayDestroy</a> automatisch aufgerufen.</td>
  </tr>
</table>

<h3 id="ByRef">ByRef <span class="ver">[v1.1.17+]</span></h3>
<p>Wenn der <a href="ComObjType.htm"><em>VarTyp</em></a> eines Wrapper-Objekts den VT_BYREF-Flag (0x4000) enthält, kann mit leeren eckigen Klammern <code>[]</code> der verwiesene Wert gelesen oder geschrieben werden.</p>
<p>Beim Erstellen eines Verweises muss <em>Wert</em> die Speicheradresse einer Variable oder Puffer mit ausreichender Kapazität sein, um einen Wert des angegebenen Typs enthalten zu können. Zum Beispiel könnte man wie folgt eine Variable erstellen, in der eine VBScript-Funktion etwas schreiben kann:</p>
<pre>VarSetCapacity(var, 24, 0)
vref := ComObject(0x400C, &amp;var)  <em>; 0x400C ist eine Kombination von VT_BYREF und VT_VARIANT.</em>

vref[] := "Eingabewert"
sc.Run("Beispiel", vref)  <em>; sc sollte wie im <a href="#ByRefEx">unteren Beispiel</a> initialisiert werden.</em>
MsgBox % vref[]</pre>

<h3 id="Remarks">Allgemeine Bemerkungen</h3>
<p>In den aktuellen Versionen wird jeder Funktionsaufruf, der mit "ComObj" beginnt und nicht mit den anderen COM-Funktionen übereinstimmt, eigentlich ComObjActive aufrufen. Zum Beispiel sind <code>ComObjEnwrap(DispPtr)</code> und <code>ComObjActive(DispPtr)</code> das gleiche wie <code>ComObject(DispPtr)</code> (<em>VarType</em> 9 ist inbegriffen). Allerdings wird dieses Verhalten in einer zukünftigen Version nicht mehr zur Verfügung stehen, daher ist es am besten, nur <code>ComObject()</code> und <code>ComObjActive()</code> zu verwenden, wie unten gezeigt.</p>
<p>Wenn mit dieser Funktion ein IDispatch- oder IUnknown-Interface-Pointer gewrappt oder abgerufen wurde, erhöht sich standardmäßig die Referenzzählung des COM-Objekts. Daher muss der Interface-Pointer <a href="ObjAddRef.htm">manuell freigegeben werden</a>, wenn er nicht länger benötigt wird. Beim Freigeben des Wrapper-Objekts wird auch dessen Verweis automatisch freigegeben.</p>
<p><b>Bekannte Einschränkung:</b> Jedes Mal, wenn ein COM-Objekt gewrappt wurde, wird ein neues Wrapper-Objekt erstellt. Vergleiche und Zuweisungen wie <code>obj1 == obj2</code> und <code>array[obj1] := Wert</code> behandeln die zwei Wrapper-Objekte getrennt voneinander, selbst wenn sie das gleiche COM-Objekt enthalten.</p>

<h3 id="Related">Siehe auch</h3>
<p><a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjConnect.htm">ComObjConnect</a>, <a href="ComObjError.htm">ComObjError</a>, <a href="ComObjFlags.htm">ComObjFlags</a>, <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>, <a href="ComObjQuery.htm">ComObjQuery</a>, <a href="https://msdn.microsoft.com/de-de/library/ms221467.aspx">GetActiveObject (MSDN)</a></p>

<h3>Beispiele</h3>
<p>ComObjUnwrap: Siehe <a href="ComObjConnect.htm#Examples">ComObjConnect</a>.</p>
<pre class="NoIndent" id="ByRefEx">
<em>; Einleitung - ScriptControl benötigt eine 32-Bit-Version von AutoHotkey.</em>
code =
(
Sub Beispiel(Var)
    MsgBox Var
    Var = "Ausgabewert!"
End Sub
)
sc := <a href="ComObjCreate.htm">ComObjCreate</a>("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)


<em>; Beispiel: VARIANT-ByRef an eine COM-Funktion übergeben.</em>
var := ComVar()
var[] := "Eingabewert"
sc.Run("Beispiel", var.ref)
MsgBox % var[]


<em>; ComVar: Erstellt ein Objekt, mit dem ein Wert via ByRef übergeben werden kann.
;   ComVar[] bekommt den Wert.
;   ComVar[] := Val setzt den Wert.
;   ComVar.ref bekommt ein ByRef-Objekt, das eine COM-Funktion nutzen kann.</em>
ComVar(Type=0xC)
{
    static <a href="../Objects.htm#Custom_Objects">base</a> := { __Get: "ComVarGet", __Set: "ComVarSet", __Delete: "ComVarDel" }
    <em>; Erstellt ein Array mit 1 VARIANT.  Durch diese Methode kann der interne Code sich um
    ; alle Umwandlungen zwischen VARIANT und AutoHotkey's interne Typen kümmern.</em>
    arr := <a href="ComObjArray.htm">ComObjArray</a>(Type, 1)
    <em>; Sperrt das Array und bekommt einen Pointer, der auf das VARIANT verweist.</em>
    DllCall("oleaut32\SafeArrayAccessData", "ptr", <a href="ComObjValue.htm">ComObjValue</a>(arr), "ptr*", arr_data)
    <em>; Speichert das Array und ein Objekt, mit dem das VARIANT-ByRef übergeben werden kann.</em>
    return { ref: ComObject(0x4000|Type, arr_data), _: arr, base: base }
}

ComVarGet(cv, <a href="../Functions.htm#Variadic">p*</a>) { <em>; Wird aufgerufen, wenn das Skript auf ein unbekanntes Feld zugreift.</em>
    if p.MaxIndex() = "" <em>; Keine Namen/Parameter, also cv[]</em>
        return cv._[0]
}

ComVarSet(cv, v, p*) { <em>; Wird aufgerufen, wenn das Skript ein unbekanntes Feld setzt.</em>
    if p.MaxIndex() = "" <em>; Keine Namen/Parameter, also cv[]:=v</em>
        return cv._[0] := v
}

ComVarDel(cv) { <em>; Wird aufgerufen, wenn das Objekt freigegeben wird.
    ; Notwendig, damit das interne Array freigegeben werden kann.</em>
    DllCall("oleaut32\SafeArrayUnaccessData", "ptr", ComObjValue(cv._))
}
</pre>

</body>
</html>
