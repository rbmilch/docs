<!DOCTYPE HTML>
<html>
<head>
<title>Transform</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Transform</h1>

<p>Führt verschiedene mathematische Funktionen, bitweise Operationen und Aufgaben wie ASCII/Unicode-Konvertierung aus.</p>

<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Befehl, Wert1 <span class="optional">, Wert2</span></pre>
<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der Variable, in der das Ergebnis von <em>Befehl</em> gespeichert werden soll. <a href="SetFormat.htm">SetFormat</a> bestimmt, ob Integer im hexadezimalen oder dezimalen Format gespeichert werden sollen.</p></dd>

  <dt>Befehl, Wert1/2</dt>
  <dd><p>Siehe untere Liste.</p></dd>

</dl>

<h3>Befehl, Wert1, Wert2</h3>
<p>Die Parameter <em>Befehl</em>, <em>Wert1</em> und <em>Wert2</em> sind voneinander abhängig und können wie folgt genutzt werden.</p>
<p id="Unicode"><strong>Unicode [, Zeichenkette]</strong>: <em>(Dieser Befehl steht in der Unicode-Version von AutoHotkey nicht zur Verfügung.)</em> Ermittelt oder speichert den Unicode-Text in die Zwischenablage. Hinweis: Die gesamte Zwischenablage kann mit <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> gespeichert und wiederhergestellt werden, damit "Transform Unicode" ohne Verlust des originalen Inhalts der Zwischenablage laufen kann.</p>
<p>Es gibt zwei verschiedene Methoden, den Befehl auszuführen:</p>
<pre>Transform, AusgabeVar, Unicode  <em>; Ermittelt den Unicode-Text aus der Zwischenablage als UTF-8-Zeichenkette.</em>
Transform, Clipboard, Unicode, %MeinUTF_Zeichenkette%  <em>; Speichert den Unicode-Text in die Zwischenablage.</em></pre>
<p>Im zweiten oberen Beispiel besteht die Möglichkeit, anstelle von %MeinUTF_Zeichenkette% eine direkt geschriebene UTF-8-Zeichenkette anzugeben.</p>
<p>Mit dem folgenden Hotkey kann eine UTF-8-Zeichenkette ermittelt werden, die zu einer angegebene Unicode-Zeichenkette gehört:</p>
<pre>^!u::  <em>; Hotkey STRG+ALT+U.</em>
MsgBox Kopieren Sie einen beliebigen Unicode-Text, kehren Sie danach zu diesem Fenster zurück und drücken Sie auf OK, um fortzufahren.
Transform, ClipUTF, Unicode
Clipboard = Transform, Clipboard, Unicode, %ClipUTF%`r`n
MsgBox Die Zwischenablage enthält nun die folgende Zeile, die Sie in Ihrem Skript einfügen können. Bei ihrer Ausführung wird der originale Unicode-Text, den man kopiert hat, in die Zwischenablage gespeichert:`n`n%Clipboard%
return</pre>
<p class="note"><strong>Hinweis</strong>: Der Befehl <code><a href="Send.htm#sendu">Send {U+nnnn}</a></code> ist eine alternative Methode, um Unicode-Zeichen zu erzeugen.</p>
<br>
<p id="Asc"><strong>Asc, Zeichenkette</strong>: Ermittelt den Zeichencode (eine Zahl zwischen 1 und 255, oder bei Unicode zwischen 1 und 65535) des ersten Zeichens in der <em>Zeichenkette</em>. Falls die <em>Zeichenkette</em> leer ist, wird <em>AusgabeVar</em> auch leer gemacht. Zum Beispiel: <code>Transform, AusgabeVar, Asc, %VarMitZeichenkette%</code>. Dazugehörige Funktion: <a href="Asc.htm">Asc(Zeichenkette)</a>. Für Unicode-Ergänzungszeichen können Sie stattdessen <a href="Ord.htm">Ord(Zeichenkette)</a> verwenden.</p>
<p id="Chr"><strong>Chr, Wert1</strong>: Ermittelt ein einzelnes Zeichen, das zum angegebenen Zeichencode in <em>Wert1</em> gehört. Falls <em>Wert1</em> nicht zwischen 1 und 255 (oder bei Unicode zwischen 1 und 65535) liegt, wird <em>AusgabeVar</em> leer gemacht, um das Problem zu kennzeichnen. Zum Beispiel: <code>Transform, AusgabeVar, Chr, 130</code>. Dazugehörige Funktion: <a href="Chr.htm">Chr(Zahl)</a>. Im Gegensatz zu Chr() unterstützt Transform keine Unicode-Ergänzungszeichen (Zeichencodes von 0x10000 bis 0x10FFFF).</p>
<p id="Deref"><strong>Deref, Zeichenkette</strong>: Erweitert Variablenverweise und <a href="_EscapeChar.htm">Escapesequenzen</a>, die sich in anderen Variablen befinden. Jeder schlecht formatierte Variablenverweis wird im erweiterten Ergebnis weggelassen. Das gleiche gilt auch, wenn sich <em>AusgabeVar</em> in sich selbst erweitert. Das heißt, dass Verweise auf <em>AusgabeVar</em> innerhalb der Variablen von <em>Zeichenkette</em> beim Erweitern weggelassen werden (allerdings kann <em>Zeichenkette</em> selbst <u>%<em>AusgabeVar</em>% sein</u>). Wenn im folgenden Beispiel Var1 die Zeichenkette "Test" und Var2 die <u>direkt geschriebene</u> Zeichenkette "%Var1%" enthält, wird <em>AusgabeVar</em> auf die Zeichenkette "Test" gesetzt: <code>Transform, AusgabeVar, deref, %Var2%</code>. Innerhalb einer <a href="../Functions.htm">Funktion</a> wird jede Variable in der <em>Zeichenkette</em> immer in eine lokale Variable aufgelöst. Wenn aber so eine Variable nicht vorhanden ist, wird sie in eine globale Variable aufgelöst (oder leer sein, wenn keine vorhanden ist).</p>
<p id="HTML"><strong>HTML, Zeichenkette [, Flags]</strong>:</p>
<p><em>Bei ausführbaren ANSI-Dateien</em> wird <em>Zeichenkette</em> in ihr HTML-Äquivalent umgewandelt, indem Zeichen, deren ASCII-Werte über 127 liegen, in ihre HTML-Namen übersetzt werden (z. B. wird £ zu &amp;pound;). Zudem werden die vier Zeichen "&amp;&lt;&gt; in &amp;quot;&amp;amp;&amp;lt;&amp;gt; und zu guter Letzt jedes LF-Zeichen (`n) in &lt;br&gt;`n übersetzt (&lt;br&gt;, gefolgt von einem LF-Zeilenumbruchszeichen). Der <em>Flags</em>-Parameter wird ignoriert.</p>
<p><em>Bei ausführbaren Unicode-Dateien</em> kann zusätzlich der <em>Flags</em>-Parameter verwendet werden, der entweder eine 0 oder eine Kombination (Summe) der folgenden Werte sein kann. Fehlt dieser Parameter, gilt standardmäßig eine 1.</p>
<ul>
    <li>1: Wandelt bestimmte Zeichen in benannte Ausdrücke um. Zum Beispiel wird € zu <code>&amp;euro;</code>.</li>
    <li>2: Wandelt bestimmte Zeichen in nummerierte Ausdrücke um. Zum Beispiel wird € zu <code>&amp;#8364;</code>.</li>
</ul>
<p>Nur Zeichen, die nicht zum ASCII-Zeichensatz gehören, sind davon betroffen. Falls <i>Flags</i> = 3 ist, werden nummerierte Ausdrücke nur verwendet, wenn ein benannter Ausdruck nicht verfügbar ist. Die folgenden Zeichen werden immer umgewandelt: <code>&lt;&gt;"&amp;</code> und <code>`n</code> (LF-Zeilenumbruchszeichen).</p>
<p><strong id="FromCodePage">FromCodePage</strong> / <strong id="ToCodePage">ToCodePage</strong>: Veraltet. Verwenden Sie stattdessen <a href="StrPutGet.htm">StrPut() / StrGet()</a>.</p>
<p><strong>Mod, Dividend, Divisor</strong>: Ermittelt den Rest von <em>Dividend</em>, geteilt durch <em>Divisor</em>. Falls <em>Divisor</em> eine 0 ist, wird <em>AusgabeVar</em> leer gemacht. Sowohl <em>Dividend</em> als auch <em>Divisor</em> können einen Dezimalpunkt enthalten. Falls <em>Divisor</em> negativ ist, wird er für die Berechnung als positiv angesehen. Im folgenden Beispiel ist das Ergebnis eine 2: <code>Transform, AusgabeVar, mod, 5, 3</code>. Dazugehörige Funktion: <a href="Math.htm#Mod">Mod(Dividend, Divisor)</a>.</p>
<p><strong>Pow, Basis, Exponent</strong>: Ermittelt <em>Basis</em>, potenziert mit <em>Exponent</em>. Sowohl <em>Basis</em> als auch <em>Exponent</em> können einen Dezimalpunkt enthalten. Falls <em>Exponent</em> negativ ist, wird <em>AusgabeVar</em> in eine Gleitkommazahl umgewandelt, auch dann, wenn <em>Basis</em> und <em>Exponent</em> Integer sind. Eine negative <em>Basis</em>, kombiniert mit einem gebrochenen <em>Exponent</em> wie 1.5, wird nicht unterstützt und führt dazu, dass <em>AusgabeVar</em> leer gemacht wird. Siehe auch: <a href="../Variables.htm#pow">**-Operator</a>.</p>
<p><strong>Exp, N</strong>: Ermittelt e (ungefähr 2.71828182845905), potenziert mit <em>N</em>. <em>N</em> kann negativ sein und einen Dezimalpunkt enthalten. Dazugehörige Funktion: <a href="Math.htm#Exp">Exp(N)</a>.</p>
<p><strong>Sqrt, Wert1</strong>: Ermittelt die Quadratwurzel von Wert1. Falls <em>Wert1</em> negativ ist, wird <em>AusgabeVar</em> leer gemacht. Dazugehörige Funktion: <a href="Math.htm#Sqrt">Sqrt(Zahl)</a>.</p>
<p><strong>Log, Wert1</strong>: Ermittelt den Logarithmus (Basis 10) von <em>Wert1</em>. Falls <em>Wert1</em> negativ ist, wird <em>AusgabeVar</em> leer gemacht. Dazugehörige Funktion: <a href="Math.htm#Log">Log(Zahl)</a>.</p>
<p><strong>Ln, Wert1</strong>: Ermittelt den Logarithmus (Basis e) von <em>Wert1</em>. Falls <em>Wert1</em> negativ ist, wird <em>AusgabeVar</em> leer gemacht. Dazugehörige Funktion: <a href="Math.htm#Ln">Ln(Zahl)</a>.</p>
<p><strong>Round, Wert1 [, N]</strong>: Wenn <em>N</em> fehlt, wird <em>AusgabeVar</em> auf <em>Wert1</em> gesetzt, gerundet auf den nächsten Integer. Wenn <em>N</em> eine positive Zahl ist, wird <em>Wert1</em> auf <em>N</em> Stellen nach dem Komma gerundet. Falls <em>N</em> negativ ist, wird <em>Wert1</em> auf <em>N</em> Stellen vor dem Komma gerundet. Zum Beispiel rundet -1 auf Einerstelle, -2 auf Zehnerstelle und -3 auf Hunderterstelle. Hinweis: Round kann beim Runden von Dezimalstellen nachfolgende Nullen nicht entfernen. Zum Beispiel wird 12.333 zu 12.300000 beim Runden auf eine Dezimalstelle. Dieses Verhalten kann geändert werden, indem so etwas wie <code><a href="SetFormat.htm">SetFormat</a>, float, 0.1</code> vor der Operation verwendet wird (tatsächlich könnte <a href="SetFormat.htm">SetFormat</a> das Verwenden von Round an erster Stelle überflüssig machen). Dazugehörige Funktion: <a href="Math.htm#Round">Round(Zahl [, N])</a>.</p>
<p><strong>Ceil, Wert1</strong>: Ermittelt <em>Wert1</em>, auf den nächst höheren Integer gerundet. Dazugehörige Funktion: <a href="Math.htm#Ceil">Ceil(Zahl)</a>.</p>
<p><strong>Floor, Wert1</strong>: Ermittelt <em>Wert1</em>, auf den nächst niedrigeren Integer gerundet. Dazugehörige Funktion: <a href="Math.htm#Floor">Floor(Zahl)</a>.</p>
<p><strong>Abs, Wert1</strong>: Ermittelt den absoluten Wert von <em>Wert1</em>, indem das führende Minuszeichen (Bindestrich), falls vorhanden, von <em>Wert1</em> entfernt wird. Dazugehörige Funktion: <a href="Math.htm#Abs">Abs(Zahl)</a>.</p>
<p><strong>Sin, Wert1</strong>: Ermittelt den trigonometrischen Sinus von <em>Wert1</em>. <em>Wert1</em> muss als Bogenmaß angegeben werden. Dazugehörige Funktion: <a href="Math.htm#Sin">Sin(Zahl)</a>.</p>
<p><strong>Cos, Wert1</strong>: Ermittelt den trigonometrischen Kosinus von <em>Wert1</em>. <em>Wert1</em> muss als Bogenmaß angegeben werden. Dazugehörige Funktion: <a href="Math.htm#Cos">Cos(Zahl)</a>.</p>
<p><strong>Tan, Wert1</strong>: Ermittelt den trigonometrischen Tangens von <em>Wert1</em>. <em>Wert1</em> muss als Bogenmaß angegeben werden. Dazugehörige Funktion: <a href="Math.htm#Tan">Tan(Zahl)</a>.</p>
<p><strong>ASin, Wert1</strong>: Ermittelt den Arkussinus (die Zahl, deren Sinus <em>Wert1</em> ist) als Bogenmaß. Falls <em>Wert1</em> kleiner als -1 oder größer als 1 ist, wird <em>AusgabeVar</em> leer gemacht. Dazugehörige Funktion: <a href="Math.htm#ASin">ASin(Zahl)</a>.</p>
<p><strong>ACos, Wert1</strong>: Ermittelt den Arkuskosinus (die Zahl, deren Kosinus <em>Wert1</em> ist) als Bogenmaß. Falls <em>Wert1</em> kleiner als -1 oder größer als 1 ist, wird <em>AusgabeVar</em> leer gemacht. Dazugehörige Funktion: <a href="Math.htm#ACos">ACos(Zahl)</a>.</p>
<p><strong>ATan, Wert1</strong>: Ermittelt den Arkustangens (die Zahl, deren Tangens <em>Wert1</em> ist) als Bogenmaß. Dazugehörige Funktion: <a href="Math.htm#ATan">ATan(Zahl)</a>.</p>
<br>
<p class="note"><strong>Hinweis</strong>: Jede nachfolgende bitweise Operation kann innerhalb von Ausdrücken als <a href="../Variables.htm#bitwise">bitweiser Operator</a> angegeben werden.</p>
<p><strong>BitNot, Wert1</strong>: Speichert die bit-invertierte Version von <em>Wert1</em> in <em>AusgabeVar</em> (falls <em>Wert1</em> eine Gleitkommazahl ist, wird sie zu einem Integer gekürzt, bevor die Berechnung erfolgt). Wenn <em>Wert1</em> eine Zahl zwischen 0 und 4294967295 (0xffffffff) ist, wird sie als <u>vorzeichenlosen</u> 32-Bit-Wert behandelt. Ansonsten wird sie als <u>vorzeichenbehafteten</u> 64-Bit-Wert behandelt. Im folgenden Beispiel ist das Ergebnis 0xfffff0f0 (4294963440): <code>Transform, AusgabeVar, BitNot, 0xf0f</code>.</p>
<p><strong>BitAnd, Wert1, Wert2</strong>: Ermittelt das Ergebnis des bitweisen UND's von <em>Wert1</em> und <em>Wert2</em> (Gleitkommazahlen werden zu Integer gekürzt, bevor die Berechnung erfolgt). Im folgenden Beispiel ist das Ergebnis 0xff00 (65280): <code>Transform, AusgabeVar, BitAnd, 0xff0f, 0xfff0</code>.</p>
<p><strong>BitOr, Wert1, Wert2</strong>: Ermittelt das Ergebnis des bitweisen ODER's von <em>Wert1</em> und <em>Wert2</em> (Gleitkommazahlen werden zu Integer gekürzt, bevor die Berechnung erfolgt). Im folgenden Beispiel ist das Ergebnis 0xf0f0 (61680): <code>Transform, AusgabeVar, BitOr, 0xf000, 0x00f0</code>.</p>
<p><strong>BitXOr, Wert1, Wert2</strong>: Ermittelt das Ergebnis des bitweisen Exklusiv-ODER's von <em>Wert1</em> und <em>Wert2</em> (Gleitkommazahlen werden zu Integer gekürzt, bevor die Berechnung erfolgt). Im folgenden Beispiel ist das Ergebnis 0xff00 (65280): <code>Transform, AusgabeVar, BitXOr, 0xf00f, 0x0f0f</code>.</p>
<p><strong>BitShiftLeft, Wert1, Wert2</strong>: Ermittelt das Ergebnis durch Verschieben von <em>Wert1</em> um <em>Wert2</em> Bit-Positionen nach links, das dem Multiplizieren von <em>Wert1</em> mit "2 potenziert mit <em>Wert2</em>" entspricht (Gleitkommazahlen werden zu Integer gekürzt, bevor die Berechnung erfolgt). Im folgenden Beispiel ist das Ergebnis eine 8: <code>Transform, AusgabeVar, BitShiftLeft, 1, 3</code>.</p>
<p><strong>BitShiftRight, Wert1, Wert2</strong>: Ermittelt das Ergebnis durch Verschieben von <em>Wert1</em> um <em>Wert2</em> Bit-Positionen nach rechts, das dem Dividieren von <em>Wert1</em> mit "2 potenziert mit <em>Wert2</em>" entspricht, bei dem der Rest gekürzt wird (Gleitkommazahlen werden zu Integer gekürzt, bevor die Berechnung erfolgt). Im folgenden Beispiel ist das Ergebnis eine 2: <code>Transform, AusgabeVar, BitShiftRight, 17, 3</code>.</p>
<h3>Bemerkungen</h3>
<p>Unterbefehle, die numerische Parameter akzeptieren, können auch <a href="../Variables.htm#Expressions">Ausdrücke</a> für solche Parameter verwenden.</p>
<p>Sobald <em>Wert1</em> oder <em>Wert2</em> eine Gleitkommazahl ist, ermitteln folgende <em>Befehle</em> eine Gleitkommazahl, anstatt ein Integer: Mod, Pow, Round und Abs. Die Anzahl der abgerufenen Dezimalstellen wird über <a href="SetFormat.htm">SetFormat</a> bestimmt.</p>
<p>Um einen Bogenmaßwert in Grad umzuwandeln, multipliziert man ihn mit 180/pi (ungefähr 57.29578). Um einen Gradwert in Bogenmaß umzuwandeln, multipliziert man ihn mit pi/180 (ungefähr 0.01745329252).</p>
<p>Der Wert von pi (ungefähr 3.141592653589793) ist das 4-fache von Arkustangens 1.</p>
<h3>Siehe auch</h3>
<p><a href="SetFormat.htm">SetFormat</a>, <a href="../Variables.htm#Expressions">Ausdrücke</a>, <a href="EnvMult.htm">EnvMult</a>, <a href="EnvDiv.htm">EnvDiv</a>, <a href="StringLower.htm">StringLower</a>, <a href="IfIs.htm">if Var is Typ</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">Transform, AusgabeVar, Asc, A  <em>; Ermittelt den ASCII-Code des Buchstaben A.</em></pre>

</body>
</html>
