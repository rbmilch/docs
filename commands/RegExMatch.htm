<!DOCTYPE HTML>
<html>
<head>
<title>RegExMatch</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>RegExMatch() <span class="ver">[v1.0.45+]</span></h1>

<p>Überprüft, ob ein Muster (regulärer Ausdruck) in einer Zeichenkette vorkommt.</p>

<pre class="Syntax">Fundposition := <span class="func">RegExMatch</span>(Heuhaufen, NadelRegEx <span class="optional">, AusgabeVar, Startposition := 1</span>)</pre>
<h3>Parameter</h3>
<dl>

  <dt>Heuhaufen</dt>
  <dd><p>Eine Zeichenkette, deren Inhalt durchsucht werden soll.</p></dd>

  <dt>NadelRegEx</dt>
  <dd><p>Ein Muster im PCRE-Format (Perl-kompatibler regulärer Ausdruck), das gesucht werden soll. Die <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> des Musters (falls vorhanden) müssen am Anfang der Zeichenkette eingefügt werden, gefolgt von einer runden Endklammer. Zum Beispiel würde das Muster "<span class="red">i)</span>abc.*123" die nicht-Groß-/Kleinschreibung-sensitive Option einschalten und nach einer Zeichenkette suchen, die sich zusammensetzt aus "abc", null oder mehr Vorkommen eines beliebigen Zeichens und "123". Wenn es keine Optionen gibt, ist das ")" optional; zum Beispiel wäre ")abc" das gleiche wie "abc".</p></dd>

  <dt>AusgabeVar</dt>
  <dd><p><strong>Modus 1 (Standard):</strong> Geben Sie ein Variable an, in der eine Zeichenfolge von <em>Heuhaufen</em> gespeichert werden soll, die mit dem gesamten Muster übereinstimmt. Wenn das Muster nicht gefunden werden kann (also wenn die Funktion 0 zurückgibt), wird diese Variable sowie alle dazugehörigen Array-Elemente leer gemacht.</p>
      <p id="Array">Sind <a href="../misc/RegEx-QuickRef.htm#subpat">erfassende Teilmuster</a> innerhalb von <em>NadelRegEx</em> vorhanden, werden ihre Übereinstimmungen in ein <a href="../misc/Arrays.htm#pseudo">Pseudo-Array</a> gespeichert, dessen Basisname <em>AusgabeVar</em> ist. Wenn die Variable zum Beispiel <em>Match</em> heißt, würde eine Teilzeichenkette, die mit dem ersten Teilmuster übereinstimmt, in <em>Match1</em> gespeichert werden, die zweite in <em>Match2</em> und so weiter. <a href="#NamedSubPat">Benannte Teilmuster</a> sind eine Ausnahme - sie werden unter ihrem Namen abgespeichert. Zum Beispiel würde eine Teilzeichenkette, die mit dem benannten Teilmuster "(?P&lt;Jahr&gt;\d{4})" übereinstimmt, in <em>MatchJahr</em> gespeichert werden. Wenn ein bestimmtes Teilmuster keine Übereinstimmung findet (oder die Funktion null zurückgibt), wird die entsprechende Variable leer gemacht.</p>
      <p>Um innerhalb einer <a href="../Functions.htm">Funktion</a> ein globales statt lokales Pseudo-Array zu erstellen, muss der Basisname des Pseudo-Arrays (z. B. Match) vor seiner Verwendung als globale Variable <a href="../Functions.htm#Global">deklariert</a> werden. Umgekehrt gilt das gleiche bei <a href="../Functions.htm#AssumeGlobal">Assume-Global</a>-Funktionen. Aufgrund des <a href="../Functions.htm#ArrayConfusion">Häufigen Anlasses zu Verwirrung</a> muss jedes Element einzeln deklariert werden.</p>      
      <p id="PosMode"><strong>Modus 2 (Position und Länge)</strong>: Wenn ein großes P in den RegEx-Optionen vorhanden ist - z. B. "<span class="red">P)</span>abc.*123") - wird die <em>Länge</em> der kompletten Musterübereinstimmung in <em>AusgabeVar</em> gespeichert (oder 0, wenn nichts gefunden wird). Sind <a href="../misc/RegEx-QuickRef.htm#subpat">erfassende Teilmuster</a> vorhanden, werden ihre Positionen und Längen in zwei <a href="../misc/Arrays.htm#pseudo">Pseudo-Arrays</a> gespeichert: <em>AusgabeVarPos</em> und <em>AusgabeVarLen</em>. Wenn der Basisname der Variable zum Beispiel <em>Match</em> ist, würde die einsbasierte <em>Position</em> der ersten Teilmusterübereinstimmung in <em>MatchPos1</em> gespeichert werden, und ihre Länge in <em>MatchLen1</em> (beide sind null, wenn das Teilmuster nicht gefunden wurde oder die Funktion eine 0 zurückgibt). <a href="#NamedSubPat">Benannte Teilausdrücke</a> sind eine Ausnahme - sie werden unter ihrem Namen abgespeichert (z. B. <em>MatchPosJahr</em> und <em>MatchLenJahr</em>).</p>
      <p id="ObjectMode"><strong>Modus 3 (Match-Objekt)</strong> <span class="ver">[v1.1.05+]</span><strong>:</strong> Wenn ein großes O in den RegEx-Optionen vorhanden ist - z. B. "<span class="red">O)</span>abc.*123" - wird ein <a href="#MatchObject">Match-Objekt</a> in <em>AusgabeVar</em> gespeichert. Mit diesem Objekt kann die Position, Länge und der Wert der gesamten Übereinstimmung sowie von jedem <a href="../misc/RegEx-QuickRef.htm#subpat">erfassten Teilmuster</a> abgerufen werden, sofern vorhanden.</p>
    </dd>

  <dt>Startposition</dt>
  <dd><p>Fehlt <em>Startposition</em>, gilt standardmäßig 1 (das erste Zeichen von <em>Heuhaufen</em>). Ansonsten kann eine 2 angegeben werden, um beim zweiten Zeichen zu beginnen, eine 3, um beim dritten Zeichen zu beginnen, und so weiter. Wenn <em>Startposition</em> die Länge von <em>Heuhaufen</em> überschreitet, beginnt die Suche bei einer leeren Zeichenkette am <em>Heuhaufen</em>-Ende (wodurch keine Übereinstimmung gefunden werden kann).</p>
      <p>Wenn <em>Startposition</em> kleiner als 1 ist, gilt sie als Offset vom <em>Heuhaufen</em>-Ende. Zum Beispiel würde 0 beim letzten Zeichen und -1 beim vorletzten Zeichen beginnen. Wenn <em>Startposition</em> das linke <em>Heuhaufen</em>-Ende überschreiten will, wird der gesamte <em>Heuhaufen</em> durchsucht.</p>
      <p>Egal welchen Wert man als <em>Startposition</em> verwendet - der Rückgabewert ist immer relativ zum ersten <em>Heuhaufen</em>-Zeichen. Zum Beispiel wäre die Position von "abc" in "123abc789" immer 4.</p></dd>

</dl>

<h3>Rückgabewert</h3>
<p>Diese Funktion gibt die Position von <em>NadelRegEx</em> zurück, das ganz links in der <em>Heuhaufen</em>-Zeichenkette vorkommt. Position 1 ist das erste Zeichen. Eine 0 wird zurückgegeben, wenn der Ausdruck nicht gefunden wird. Falls ein Fehler auftritt (z. B. ein Syntaxfehler innerhalb von <em>NadelRegEx</em>), wird eine leere Zeichenkette zurückgegeben und ErrorLevel auf einen der <a href="#ErrorLevel">unteren Werte</a> gesetzt, anstatt auf 0.</p>

<h3 id="ErrorLevel">ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span>: Diese Funktion ist in der Lage, bei Misserfolg eine Ausnahme auszulösen (nicht zu verwechseln mit "keine Übereinstimmung gefunden"). Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> kann folgendes enthalten:</p>
<ul>
  <li>Eine 0 - das heißt, dass keine Fehler aufgetreten sind.</li>
  <li>Eine Zeichenkette in folgender Form: <em>Compile error N at offset M: Beschreibung</em>. In dieser Zeichenkette ist <em>N</em> die PCRE-Fehlernummer, <em>M</em> die Position des betroffenen Zeichens innerhalb des regulären Ausdrucks und <em>Beschreibung</em> ein Text, der den Fehler beschreibt.</li>
  <li>Eine negative Zahl - das heißt, dass ein Fehler beim <em>Ausführen</em> des regulären Ausdrucks aufgetreten ist. Zwar kommen solche Fehler selten vor, allerdings sind die am häufigsten auftretenden Fehler "zu viele mögliche Übereinstimmungen mit leeren Zeichenketten" (-22), "Rekursion zu tief" (-21) und "Limit der Übereinstimmung erreicht" (-8). Wenn dies geschieht, sollten Sie versuchen, das Muster restriktiver zu machen - ersetzen Sie zum Beispiel jedes * mit einem ?, + oder einem Limit wie {0,3}, sofern es möglich ist.</li>
</ul>
<h3>Optionen</h3>
<p>Unter den <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> finden Sie Modifikatoren wie z. B. "<span class="red">i)</span>abc", der die Groß-/Kleinschreibung-Sensitivität im Muster "abc" ausschalten würde.</p>
<h3 id="MatchObject">Match-Objekt <span class="ver">[v1.1.05+]</span></h3>
<p>Wenn ein großes O in den RegEx-Optionen vorhanden ist, wird ein Match-Objekt in <em>AusgabeVar</em> gespeichert. Dieses Objekt hat die folgenden Eigenschaften:</p>
<p><strong>Match.Pos(N)</strong>: Gibt die Position der gesamten Übereinstimmung oder eines erfassten Teilmusters zurück.</p>
<p><strong>Match.Len(N)</strong>: Gibt die Länge der gesamten Übereinstimmung oder eines erfassten Teilmusters zurück.</p>
<p><strong>Match.Value(N)</strong>: Gibt die gesamte Übereinstimmung oder ein erfasstes Teilmuster zurück.</p>
<p><strong>Match.Name(N)</strong>: Gibt den Namen eines Teilmusters zurück, sofern es einen hat.</p>
<p><strong>Match.Count()</strong>: Gibt die Anzahl von allen Teilmustern zurück.</p>
<p><strong>Match.Mark()</strong>: Gibt den <em>NAMEN</em> des zuletzt gefundenen <code>(*MARK:NAMEN)</code> zurück, sofern zutreffend.</p>
<p><strong>Match[N]</strong>: Wenn <em>N</em> eine 0 oder Nummer/Name eines gültigen Teilmusters ist, dann ist dies das gleiche wie <code>Match.Value(N)</code>. Ansonsten kann <em>N</em> der Name von einer der oben genannten Eigenschaften sein. Zum Beispiel wären <code>Match["Pos"]</code> und <code>Match.Pos</code> das gleiche wie <code>Match.Pos()</code>; existiert aber ein Teilmuster namens "Pos", wären sie das gleiche wie <code>Match.Value("Pos")</code>.</p>
<p><strong>Match.N</strong>: Das gleiche wie oben, außer dass <em>N</em> ein Name ohne Anführungszeichen oder eine Zahl ist.</p>
<p>Bei allen oben genannten Eigenschaften kann <em>N</em> folgendes sein:</p>
<ul>
  <li>0 für die gesamte Übereinstimmung.</li>
  <li>Die Nummer eines Teilmusters, sowie auch von einem, das einen Namen hat.</li>
  <li>Der Name eines Teilmusters.</li>
</ul>
<p>Eckige Klammern können anstelle von runden Klammern verwendet werden, wenn <em>N</em> angegeben wurde.</p>

<h3>Performance</h3>
<p>Um eine einfache Teilzeichenkette innerhalb einer größeren Zeichenkette zu suchen, nutzt man <a href="InStr.htm">InStr()</a>, weil es schneller als RegExMatch() ist.</p>
<p>Um die Performance zu verbessern, werden die 100 zuletzt verwendeten regulären Ausdrücke zwischengespeichert (in kompilierter Form).</p>
<p>Die <a href="../misc/RegEx-QuickRef.htm#Study">S-Option</a> kann manchmal die Performance eines regulären Ausdrucks verbessern, der häufig verwendet wird (z. B. in einer Schleife).</p>
<h3>Bemerkungen</h3>
<p id="NamedSubPat">Man kann einem Teilmuster einen Namen geben, wie z. B. das Wort <em>Jahr</em> in dem Muster "(?P&lt;Jahr&gt;\d{4})". Solche Namen können maximal aus 32 alphanumerischen Zeichen und Unterstriche bestehen. Die folgende Einschränkung gilt nicht für den O-Modus (Match-Objekt): Zwar sind, während der RegEx-Operation selbst, benannte Teilmuster auch über ihre Nummern verfügbar (z. B. ist \1 ein Rückverweis auf eine Zeichenkette, die eigentlich mit dem ersten erfassenden Teilmuster übereinstimmt), allerdings werden sie <em>nur</em> unter ihrem Namen (nicht unter ihrer Nummer) in das <a href="#Array">Ausgabe-Pseudo-Array</a> abgespeichert. Wenn das erste Teilmuster zum Beispiel "Jahr" heißt, würde <em>AusgabeVarJahr</em> die gefundene Teilzeichenkette enthalten, und <em>AusgabeVar1</em> unverändert bleiben (der vorherige Wert bleibt erhalten, sofern vorhanden). Erfolgt aber ein <a href="../misc/RegEx-QuickRef.htm#subpat">unbenanntes Teilmuster</a> nach "Jahr", würde es in <em>AusgabeVar2</em> gespeichert werden, und nicht in <em>AusgabeVar1</em>.</p>
<p>Die meisten Zeichen wie abc123 können direkt in einem regulären Ausdruck verwendet werden. Bei den Zeichen <strong>\.*?+[{|()^$</strong> muss man allerdings einen umgekehrten Schrägstrich davorsetzen, um sie als direkt geschriebenen Text zu behandeln. Zum Beispiel wäre <strong>\.</strong> ein direkt geschriebener Punkt und <strong>\\</strong> ein direkt geschriebener umgekehrter Schrägstrich. Mithilfe von \Q...\E kann eine komplette Zeichenkette angegeben werden, ohne darin ein Zeichen mit einem umgekehrten Schrägstrich versehen zu müssen. Zum Beispiel: <code>\QDirekt geschriebener Text\E</code>.</p>
<p>Innerhalb eines regulären Ausdrucks kann bei bestimmten Sonderzeichen wie Tab und Newline das verwendete Escapezeichen sowohl ein umgekehrtes Häkchen (`) als auch ein umgekehrter Schrägstrich (\) sein. Zum Beispiel wäre `t das gleiche wie \t, sofern die <b>x</b>-Option nicht verwendet wird.</p>
<p>Um die Grundlagen von regulären Ausdrücken kennenzulernen (oder das Gedächtnis ein wenig aufzufrischen), siehe <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>.</p>
<p>AutoHotkey's reguläre Ausdrücke wurden mittels Perl-kompatible reguläre Ausdrücke (PCRE) von <a href="http://www.pcre.org/">www.pcre.org</a> implementiert.</p>
<p><span class="ver">[AHK_L 31+]:</span> Innerhalb eines <a href="../Variables.htm#Expressions">Ausdrucks</a> kann <code>a <a href="../Variables.htm#regex">~=</a> b</code> als Ersatz für <code>RegExMatch(a, b)</code> genutzt werden.</p>
<h3>Siehe auch</h3>
<p><a href="RegExReplace.htm">RegExReplace()</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>, <a href="../misc/RegExCallout.htm">Callouts in regulären Ausdrücken</a>, <a href="InStr.htm">InStr()</a>, <a href="IfInString.htm">IfInString</a>, <a href="StringGetPos.htm">StringGetPos</a>, <a href="SubStr.htm">SubStr()</a>, <a href="SetTitleMatchMode.htm#RegEx">SetTitleMatchMode RegEx</a>, <a href="http://www.autohotkey.com/forum/topic16164.html">Global matching and Grep (Forum-Link)</a></p>
<p>Häufige Quellen von Textdaten: <a href="FileRead.htm">FileRead</a>, <a href="URLDownloadToFile.htm">UrlDownloadToFile</a>, <a href="../misc/Clipboard.htm">Clipboard</a>, <a href="GuiControls.htm#Edit">GUI-Eingabefelder</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent">Fundposition := RegExMatch("xxxabc123xyz", "abc.*xyz")  <em>; Gibt 4 zurück, weil das die Position ist, auf der die Übereinstimmung gefunden wurde.</em>
Fundposition := RegExMatch("abc123123", "123$")  <em>; Gibt 7 zurück, weil durch $ die Übereinstimmung am Ende vorkommen muss.</em>
Fundposition := RegExMatch("abc123", "i)^ABC")  <em>; Gibt 1 zurück, weil eine Übereinstimmung aufgrund der nicht-Groß-/Kleinschreibung-sensitiven Option möglich gemacht wurde.</em>
Fundposition := RegExMatch("abcXYZ123", "abc(.*)123", Teilmuster)  <em>; Gibt 1 zurück und speichert "XYZ" in Teilmuster1.</em>
Fundposition := RegExMatch("abc123abc456", "abc\d+", "", 2)  <em>; Gibt 7 statt 1 zurück, wegen einer 2 als Startposition.</em>

<em>; Allgemeine RegEx-Beispiele können in der <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a> gefunden werden.</em></pre>

</body>
</html>
