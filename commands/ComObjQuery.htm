<!DOCTYPE HTML>
<html>
<head>
<title>ComObjQuery()</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjQuery() <span class="ver">[v1.0.96.00+]</span></h1>
<p>Fordert ein Interface oder Service eines COM-Objekts an.</p>
<pre class="Syntax">InterfacePointer := <span class="func">ComObjQuery</span>(ComObject, <span class="optional">SID,</span> IID)</pre>

<h3>Parameter</h3>
<dl>

  <dt>ComObject</dt>
  <dd><p>Ein COM-Wrapper-Objekt oder unbearbeiteter Interface-Pointer.</p></dd>

  <dt>IID</dt>
  <dd><p>Ein Interface-Identifikator (GUID) im Format "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}".</p></dd>

  <dt>SID</dt>
  <dd><p>Ein Service-Identifikator im selben Format wie IID. Lässt man diesen Parameter weg, muss auch das Komma weggelassen werden.</p></dd>

</dl>

<h3>Allgemeine Bemerkungen</h3>
<p>Wenn diese Funktion mit zwei Parametern verwendet wird, ist sie das Äquivalent zu <a href="https://msdn.microsoft.com/de-de/library/ms682521.aspx">IUnknown::QueryInterface</a>. Sind sowohl SID als auch IID angegeben, wird diese Funktion das <a href="https://msdn.microsoft.com/de-de/library/cc678965.aspx">IServiceProvider</a>-Interface anfordern und danach <a href="https://msdn.microsoft.com/de-de/library/cc678966.aspx">IServiceProvider::QueryService</a> aufrufen. In jedem Fall ist der Rückgabewert entweder eine 0 oder ein Pointer, der auf das angeforderte Interface verweist. In der Regel muss dieser Pointer <a href="ObjAddRef.htm">freigegeben</a> werden, wenn er vom Skript nicht länger benötigt wird.</p>

<h3>Siehe auch</h3>
<a href="ObjAddRef.htm">ObjRelease</a>, <a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="ComObjError.htm">ComObjError</a>

<h3>Beispiele</h3>

<pre id="ExClassName" class="NoIndent"><em>; Beispiel: Ermittelt den Klassennamen eines Objekts.</em>

obj := ComObjCreate("Scripting.Dictionary")

MsgBox % "Interface-Name: " ComObjType(obj, "name")

IID_IProvideClassInfo := "{B196B283-BAB4-101A-B69C-00AA00341D07}"

<em>; Fordert einen Pointer an, der auf das IProvideClassInfo-Interface des Objekts verweist.</em>
if !(pci := ComObjQuery(obj, IID_IProvideClassInfo))
{
    MsgBox IProvideClassInfo-Interface wird nicht unterstützt.
    return
}

<em>; Ruft GetClassInfo auf, um einen Pointer zu ermitteln, der auf das ITypeInfo-Interface verweist.</em>
DllCall(vtable(pci, 3), "ptr", pci, "ptr*", ti)

<em>; Ruft GetDocumentation auf, um den vollständigen Typennamen des Objekts zu ermitteln.</em>
DllCall(vtable(ti, 12), "ptr", ti, "int", -1, "ptr*", name, "ptr", 0, "ptr", 0, "ptr", 0)

<em>; Wandelt den BSTR-Pointer in eine brauchbare Zeichenkette um.</em>
name := StrGet(name, "UTF-16")

<em>; Gibt unbearbeitete Interface-Pointer frei.</em>
ObjRelease(ti)
ObjRelease(pci)

<em>; Zeigt den Typennamen an!</em>
MsgBox % "Klassenname: " name

vtable(ptr, n) {
    <em>; NumGet(ptr+0) gibt die Adresse der virtuellen Funktionstabelle
    ; des Objekts zurück (kurz: vtable). Der Rest des Ausdrucks ermittelt
    ; die Adresse der n-ten Funktionadresse von der vtable.</em>
    return NumGet(NumGet(ptr+0), n*A_PtrSize)
}
</pre>

<pre id="ExIE" class="NoIndent"><em>; Beispiel: Automatisiert ein vorhandenes Internet-Explorer-Fenster.</em>

sURL := "https://autohotkey.com/boards/"
if WebBrowser := GetWebBrowser()
   WebBrowser.Navigate(sURL)
return

GetWebBrowser()
{
    <em>; Ermittelt einen unbearbeiteten Pointer, der auf das Document-Objekt des obersten IE-Fensters verweist.</em>
    static msg := DllCall("RegisterWindowMessage", "Str", "WM_HTML_GETOBJECT")
    SendMessage msg, 0, 0, Internet Explorer_Server1, ahk_class IEFrame
    if ErrorLevel = FAIL
        return  <em>; IE nicht gefunden.</em>
    lResult := ErrorLevel
    DllCall("oleacc\ObjectFromLresult", "Ptr", lResult
        , "Ptr", GUID(IID_IHTMLDocument2,"{332C4425-26CB-11D0-B483-00C04FD90119}")
        , "Ptr", 0, "Ptr*", pdoc)

    <em>; Fordert den WebBrowserApp-Service an. In diesem bestimmten Fall sind
    ; SID und IID das gleiche, das aber nicht immer so ist.</em>
    static IID_IWebBrowserApp := "{0002DF05-0000-0000-C000-000000000046}"
    static SID_SWebBrowserApp := IID_IWebBrowserApp
    pweb := ComObjQuery(pdoc, SID_SWebBrowserApp, IID_IWebBrowserApp)

    <em>; Gibt den Document-Objekt-Pointer frei.</em>
    ObjRelease(pdoc)

    <em>; Gibt das WebBrowser-Objekt in verwendbarer Form zurück:</em>
    static VT_DISPATCH := 9, F_OWNVALUE := 1
    return ComObject(VT_DISPATCH, pweb, F_OWNVALUE)
}

GUID(ByRef GUID, sGUID) <em>; Wandelt eine Zeichenkette in eine binäre GUID um und gibt deren Adresse zurück.</em>
{
    VarSetCapacity(GUID, 16, 0)
    return DllCall("ole32\CLSIDFromString", "WStr", sGUID, "Ptr", &amp;GUID) &gt;= 0 ? &amp;GUID : ""
}
</pre>

</body>
</html>
