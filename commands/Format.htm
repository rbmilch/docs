<!DOCTYPE HTML>
<html>
<head>
<title>Format</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Format <span class="ver">[v1.1.17+]</span></h1>

<p>Formatiert eine variable Anzahl von Eingabewerten, basierend auf eine Formatzeichenkette.</p>

<pre class="Syntax">Zeichenkette := <span class="func">Format</span>(FormatZeichenk <span class="optional">, Werte...</span>)</pre>
<h3>Parameter</h3>
<dl>

  <dt>FormatZeichenk</dt>
  <dd>
    <p>Eine Formatzeichenkette, bestehend aus direkt geschriebenem Text und Platzhalter, im Format <code>{<i>Index</i>:<i><a href="#FormatSpec">Format</a></i>}</code>.</p>
    <p><em>Index</em> ist ein Integer, der angibt, welcher Eingabewert verwendet werden soll - dabei ist 1 der erste Wert.</p>
    <p><em>Format</em> ist eine optionale Formatspezifikation, wie unten beschrieben.</p>
    <p>Lassen Sie den Index weg, um den nächsten Eingabewert in der Sequenz zu verwenden (selbst wenn er bereits früher in der Zeichenkette benutzt wurde). Zum Beispiel würde <code>"{2:i} {:i}"</code> den zweiten und dritten Eingabewert in einem dezimalen Integer formatieren, getrennt durch einem Leerzeichen. Fehlt <em>Index</em>, muss <em>Format</em> weiterhin ein <code>:</code> davor haben. Geben Sie leere geschweifte Klammern an, um den nächsten Eingabewert mit Standardformatierung zu verwenden: <code>{}</code></p>
    <p>Mit <code>{{}</code> und <code>{}}</code> können direkt geschriebene geschweifte Klammern in die Zeichenkette eingefügt werden. Alle anderen ungültigen Platzhalter werden so wie sie sind in das Ergebnis eingefügt.</p>
    <p>Leerraumzeichen innerhalb der geschweiften Klammern sind nicht erlaubt (nur als Flag).</p>
  </dd>

  <dt>Werte</dt>
  <dd>
    <p>Eingabewerte, die formatiert und in der finalen Zeichenkette eingefügt werden sollen. Jeder Wert ist ein einzelner Parameter. Der erste Wert hat einen Index von 1.</p>
    <p>Um einen Array mit Werten zu übergeben, verwendet man einen <a href="../Functions.htm#VariadicCall">variadischen Funktionsaufruf</a>:</p>
    <pre>arr := [13, 240]
MsgBox % Format("{2:x}{1:02x}", arr*)</pre>
  </dd>

</dl>

<h3 id="FormatSpec">Formatspezifikationen</h3>
<p>Jede Formatspezifikation kann die folgenden Komponenten in dieser Reihenfolge enthalten (ohne den Leerzeichen):</p>
<pre class="Syntax">Flag Breite .Präzision ULT Typ</pre>
<p><a href="#Flags"><strong>Flags</strong></a> dienen zum Ausrichten der Ausgabe und Ändern der Präfixe: <code>-</code> <code>+</code> <code>0</code> space <code>#</code></p>
<p><strong>Breite</strong>: Ein dezimaler Integer, der die Mindestbreite des formatierten Wertes bestimmt (in Zeichen). Standardmäßig werden Werte nach rechts ausgerichtet und Leerzeichen zum Auffüllen verwendet. Diese Standardeinstellungen kann man mit den Flags <code>-</code> (links ausrichten) und <code>0</code> (Null-Präfix) überschreiben.</p>
<p><strong>.Präzision</strong>: Ein dezimaler Integer, der je nach Ausgabetyp die maximale Anzahl von Zeichen, Dezimalstellen oder signifikante Stellen bestimmt. Es muss davor ein Dezimalpunkt sein. Die Angabe einer Präzision könnte dazu führen, dass der Wert gekürzt oder gerundet wird.</p>
<ul>
  <li><code>f</code>, <code>e</code>, <code>E</code>: <em>Präzision</em> bestimmt die Anzahl von Ziffern nach dem Dezimalpunkt. Der Standardwert ist 6.</li>
  <li><code>g</code>, <code>G</code>: <em>Präzision</em> bestimmt die maximale Anzahl von signifikanten Stellen. Der Standardwert ist 6.</li>
  <li><code>s</code>: <em>Präzision</em> bestimmt die maximale Anzahl von Zeichen, die ausgegeben werden sollen. Alle darüberliegenden Zeichen werden nicht ausgegeben.</li>
  <li>Bei den Integer-Typen (<code>d</code>, <code>i</code>, <code>u</code>, <code>x</code>, <code>X</code>, <code>o</code>) verhält sich <em>Präzision</em> wie <em>Breite</em> mit <code>0</code>-Präfix und Standwert von 1.</li>
</ul>
<p id="ULT"><b>ULT</b> <span class="ver">[v1.1.20+]</span>: Ändert die Groß-/Kleinschreibung eines Zeichenkettenwertes -- <b>U</b>pper (groß), <b>L</b>ower (klein) oder <b>T</b>itle (Anfangsbuchstabe groß). Nur mit dem Typ <code>s</code> gültig. Zum Beispiel <code>{:U}</code> oder <code>{:.20Ts}</code>. Kleingeschriebenes <code>l</code> und <code>t</code> werden auch unterstützt, aber <code>u</code> ist für vorzeichenlose Integer reserviert.</p>
<p><a href="#Types"><strong>Typ</strong></a>: Ein Zeichen, das kennzeichnet, wie der Eingabewert interpretiert werden soll. Fehlt diese Angabe, gilt standardmäßig <code>s</code>.</p>

<table class="info" id="Flags">
  <tr><th>Flag</th><th>Bedeutung</th><th>Standardwert</th></tr>
  <tr>
    <td><code>-</code></td>
    <td>Richtet das Ergebnis innerhalb der angegebenen Feldbreite nach links aus (und fügt bei Bedarf Leerzeichen in der rechten Seite ein).</td>
    <td>Rechtsausrichtung</td>
  </tr>
  <tr>
    <td><code>+</code></td>
    <td>Setzt ein Zeichen (+ oder -) vor dem Ausgabewert, sofern er ein vorzeichenbehafteter Typ ist.</td>
    <td>Zeichen erscheinen nur bei negativen vorzeichenbehafteten Werten (-).</td>
  </tr>
  <tr>
    <td><code>0</code></td>
    <td>Wenn <em>Breite</em> eine 0 als Präfix verwendet, werden solange Nullen davor gesetzt, bis die Mindestbreite erreicht wurde. Wenn sowohl <code>0</code> als auch <code>-</code> vorhanden sind, wird die 0 ignoriert. Wenn die 0 als Integer-Format (i, u, x, X, o, d) angegeben ist und eine Präzisionsspezifikation vorhanden ist - zum Beispiel <code>{:04.d}</code> - wird die 0 ignoriert.</td>
    <td>Kein Davorsetzen.</td>
  </tr>
  <tr>
    <td>space</td>
    <td>Setzt ein einzelnes Leerzeichen vor dem Ausgabewert, sofern er vorzeichenbehaftet und positiv ist. Das Leerzeichen wird ignoriert, wenn sowohl space als auch <code>+</code> vorhanden sind.</td>
    <td>Es erscheinen keine Leerzeichen.</td>
  </tr>
  <tr>
    <td><code>#</code></td>
    <td>
      <p>Setzt in Verbindung mit dem o-, x-, oder X-Format jeweils <code>0</code>, <code>0x</code>, oder <code>0X</code> vor einem Ausgabewert ungleich Null.</p>
      <p>In Verbindung mit dem e-, E-, f-, a- oder A-Format wird dieses Flag einen Dezimalpunkt im Ausgabewert erzwingen.</p>
      <p>In Verbindung mit dem g- oder G-Format wird dieses Flag einen Dezimalpunkt im Ausgabewert erzwingen und das Kürzen von nachfolgenden Nullen verhindern.</p>
      <p>In Verbindung mit dem c-, d-, i-, u-, oder s-Format wird es ignoriert.</p>
    </td>
    <td></td>
  </tr>
</table>
<table class="info" id="Types">
  <tr><th>Typzeichen</th><th style="min-width:7em">Argument</th><th>Ausgabeformat</th></tr>
  <tr>
    <td><code>d</code> oder <code>i</code></td>
    <td>Integer</td>
    <td>Vorzeichenbehafter dezimaler Integer.</td>
  </tr>
  <tr>
    <td><code>u</code></td>
    <td>Integer</td>
    <td>Vorzeichenloser dezimaler Integer.</td>
  </tr>
  <tr>
    <td><code>x</code> oder <code>X</code></td>
    <td>Integer</td>
    <td>Vorzeichenloser hexadezimaler Integer; verwendet "abcdef" oder "ABCDEF" je nach Groß- oder Kleinschreibung von <code>x</code>. Das <code>0x</code>-Präfix ist erst enthalten, wenn das <code>#</code>-Flag vorhanden ist, wie z. B. in <code>{:#x}</code>. Um eine hexadezimale Formatierung wie bei <a href="SetFormat.htm">SetFormat</a> durchzuführen, muss man <code>0x{:x}</code> oder ähnliches verwenden.</td>
  </tr>
  <tr>
    <td><code>o</code></td>
    <td>Integer</td>
    <td>Vorzeichenloser oktaler Integer.</td>
  </tr>
  <tr>
    <td><code>f</code></td>
    <td>Gleitkomma</td>
    <td>Vorzeichenbehafteter Wert im Format [ - ]<em>dddd</em>.<em>dddd</em> - dabei sind <em>dddd</em> eine oder mehrere Dezimalstellen. Die Anzahl der Stellen vor dem Dezimalpunkt ist abhängig von der Größe der Nummer; die Anzahl der Stellen nach dem Dezimalpunkt ist abhängig von der angeforderten Präzision.</td>
  </tr>
  <tr>
    <td><code>e</code></td>
    <td>Gleitkomma</td>
    <td>Vorzeichenbehafteter Wert im Format [ - ]<em>d.dddd</em> e [<em>Zeichen</em>]<em>dd[d]</em> - dabei ist <em>d</em> eine Dezimalstelle, <em>dddd</em> eine oder mehrere Dezimalstellen, <em>dd[d]</em> zwei oder drei Dezimalstellen, basierend auf dem Ausgabeformat und Größe des Exponenten, und Zeichen + oder -.</td>
  </tr>
  <tr>
    <td><code>E</code></td>
    <td>Gleitkomma</td>
    <td>Das gleiche wie das <code>e</code>-Format, außer dass ein großes E den Exponenten kennzeichnet.</td>
  </tr>
  <tr>
    <td><code>g</code></td>
    <td>Gleitkomma</td>
    <td>Vorzeichenbehaftete Werte werden im <code>f</code>- oder <code>e</code>-Format angezeigt, abhängig davon, welcher von denen den angegebenen Wert kompakter darstellen können. Das <code>e</code>-Format wird nur verwendet, wenn der Exponent des Wertes kleiner als -4 oder größer gleich <em>Präzision</em>-Argument ist. Nachfolgende Nullen werden gekürzt; der Dezimalpunkt erscheint nur, wenn nach ihm eine oder mehrere Stellen folgen.</td>
  </tr>
  <tr>
    <td><code>G</code></td>
    <td>Gleitkomma</td>
    <td>Das gleiche wie das <code>g</code>-Format, außer dass ein großes E den Exponenten kennzeichnet (wo es notwendig ist).</td>
  </tr>
  <tr>
    <td><code>a</code></td>
    <td>Gleitkomma</td>
    <td>Vorzeichenbehafteter hexadezimaler Gleitkommawert mit doppelter Präzision im Format [?]0x<em>h.hhhh</em> <strong>p</strong>±<em>dd</em> - dabei sind <em>h.hhhh</em> die Hexadezimalstellen (kleingeschrieben) der Mantisse, und <em>dd</em> eine oder mehrere Stellen für den Exponenten. Die Präzision bestimmt die Anzahl der Stellen nach dem Punkt.</td>
  </tr>
  <tr>
    <td><code>A</code></td>
    <td>Gleitkomma</td>
    <td>Das gleiche wie das <code>a</code>-Format, außer dass ein großes P den Exponenten kennzeichnet.</td>
  </tr>
  <tr>
    <td><code>p</code></td>
    <td>Integer</td>
    <td>Zeigt das Argument als Speicheradresse in hexadezimalen Ziffern an.</td>
  </tr>
  <tr>
    <td><code>s</code></td>
    <td>Zeichenkette</td>
    <td>Kennzeichnet eine Zeichenkette. Wenn der Eingabewert numerisch ist, wird er automatisch in eine Zeichenkette umgewandelt, mithilfe des <a href="SetFormat.htm">aktuellen Zahlenformates</a> des Skripts und bevor das <em>Breite</em>- und <em>Präzision</em>-Argument angewendet wird.</td>
  </tr>
  <tr>
    <td><code>c</code></td>
    <td>Zeichencode</td>
    <td>Kennzeichnet ein einzelnes Zeichen als Ordinalwert, ähnlich wie <code><a href="Chr.htm">Chr</a>(n)</code>. Wenn der Eingabewert außerhalb des erwarteten Bereichs liegt, wird er umgekehrt.</td>
  </tr>
</table>

<h3>Bemerkungen</h3>
<p>Im Gegensatz zu <a href="https://docs.microsoft.com/de-de/cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">printf</a> werden Größenspezifikationen nicht unterstützt. Alle Integer- und Gleitkomma-Eingabewerte sind 64-Bit.</p>

<h3>Siehe auch</h3>
<p><a href="SetFormat.htm">SetFormat</a>, <a href="FormatTime.htm">FormatTime</a></p>

<h3>Beispiel</h3>
<pre class="NoIndent">
<em>; Einfache Substitution</em>
s .= Format("{2}, {1}!`r`n", "Welt", "Hallo")
<em>; Auffüllen mit Leerzeichen</em>
s .= Format("|{:-10}|`r`n|{:10}|`r`n", "Links", "Rechts")
<em>; Hexadezimal</em>
s .= Format("{1:#x} {2:X} 0x{3:x}`r`n", 3735928559, 195948557, 0)
<em>; Gleitkomma</em>
s .= Format("{1:0.3f} {1:.10f}", 4*ATan(1))

ListVars  <em>; Benutzt AutoHotkey's Hauptfenster zum Anzeigen von gleichbreiten Zeichen.</em>
WinWaitActive ahk_class AutoHotkey
ControlSetText Edit1, %s%
WinWaitClose
</pre>

</body>
</html>
