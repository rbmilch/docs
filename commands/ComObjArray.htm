<!DOCTYPE HTML>
<html>
<head>
<title>ComObjArray()</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjArray() <span class="ver">[v1.0.91+]</span></h1>

<p>Erstellt einen SafeArray, das für COM genutzt werden kann.</p>

<pre class="Syntax">ArrayObj := <span class="func">ComObjArray</span>(VarTyp, Anzahl1 <span class="optional">, Anzahl2, ... Anzahl8</span>)</pre>

<h3>Parameter</h3>
<dl>

  <dt>VarTyp</dt>
  <dd>Der Basistyp des Arrays (der VARTYPE von jedem Array-Element). Der VARTYPE ist auf eine Teilmenge der Variantentypen beschränkt. Weder das VT_ARRAY- noch VT_BYREF-Flag kann gesetzt werden. VT_EMPTY und VT_NULL sind keine gültigen Basistypen für das Array. Alle anderen Typen sind gültig.
    <p>Siehe <a href="ComObjType.htm">ComObjType</a> für eine Liste von möglichen Werten.</p></dd>

  <dt>Anzahl<i>N</i></dt>
  <dd><p>Die Größe jeder Dimension. Es werden Arrays mit bis zu 8 Dimensionen unterstützt.</p></dd>

  <dt>ArrayObj</dt>
  <dd><p>Ein Wrapper-Objekt mit dem SafeArray.</p></dd>

</dl>

<h3>Methoden</h3>
<p>Array-Wrapper-Objekte unterstützen folgende Methoden:</p>
<p><code class="Syntax">Array.MaxIndex(n)</code>: Gibt die Obergrenze der <i>n</i>-ten Dimension zurück. Ist <i>n</i> nicht vorhanden, gilt standardmäßig 1.</p>
<p><code class="Syntax">Array.MinIndex(n)</code>: Gibt die Untergrenze der <i>n</i>-ten Dimension zurück. Ist <i>n</i> nicht vorhanden, gilt standardmäßig 1.</p>
<p><code class="Syntax">Array.Clone()</code> <span class="ver">[v1.0.96.00+]</span>: Gibt eine Kopie des Arrays zurück.</p>
<p><code class="Syntax">Array._NewEnum()</code> <span class="ver">[v1.0.96.00+]</span>: Wird üblicherweise nicht vom Skript aufgerufen. <a href="For.htm">For-Schleifen</a> können mit SafeArrays verwendet werden.</p>

<h3>Allgemeine Bemerkungen</h3>
<p>Array-Wrapper-Objekte können auch von COM-Methoden und <a href="ComObjActive.htm">ComObjActive</a> zurückgegeben werden. Skripte können wie folgt überprüfen, ob ein Wert ein Array ist:</p>
<pre>if ComObjType(<i>obj</i>) &amp; 0x2000
    MsgBox % "Array-Subtyp: " . ComObjType(obj) &amp; 0xfff
else
    MsgBox Kein Array.</pre>
<p>Es werden Arrays mit bis zu 8 Dimensionen unterstützt.</p>
<p><span class="ver">[v1.0.96.00+]:</span> Da SafeArrays keine Mehrfachverweise unterstützen, wird beim Zuweisen eines SafeArrays an ein Element eines anderen SafeArrays eine separate Kopie erstellt. Das geschieht allerdings nur, wenn das Wrapper-Objekt das F_OWNVALUE-Flag hat, welches verantwortlich dafür ist, das Array zu zerstören. Dieses Flag kann mit <a href="ComObjFlags.htm">ComObjFlags</a> entfernt werden.</p>
<p><span class="ver">[v1.1.17.00+]:</span> Wenn eine Funktion oder Methode, aufgerufen von einem COM-Clienten, einen SafeArray mit dem F_OWNVALUE-Flag zurückgibt, wird eine Kopie erstellt und diese stattdessen zurückgegeben, da das originale SafeArray automatisch zerstört wird.</p>

<h3>Siehe auch</h3>
<p><a href="ComObjType.htm">ComObjType</a>, <a href="ComObjValue.htm">ComObjValue</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="ComObjFlags.htm">ComObjFlags</a>, <a href="https://msdn.microsoft.com/de-de/library/ms221145.aspx">Array Manipulation Functions (MSDN)</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent" id="Ex1"><em>; Beispiel #1: Einfache Verwendung.</em>

arr := ComObjArray(VT_VARIANT:=12, 3)
arr[0] := "Auto"
arr[1] := "Hot"
arr[2] := "key"
Loop % arr.MaxIndex() + 1
   t .= arr[A_Index-1]
MsgBox % t
</pre>

<pre class="NoIndent" id="Ex2"><em>; Beispiel #2: Mehrere Dimensionen.</em>

arr := ComObjArray(VT_VARIANT:=12, 3, 4)

<em>; Ermittelt die Anzahl an Dimensionen:</em>
dim := DllCall("oleaut32\SafeArrayGetDim", "ptr", ComObjValue(arr))

<em>; Ermittelt die Grenzen jeder Dimension:</em>
Loop %dim%
    dims .= arr.MinIndex(A_Index) " .. " arr.MaxIndex(A_Index) "`n"
MsgBox %dims%

<em>; Einfache Verwendung:</em>
Loop 3 {
    x := A_Index-1
    Loop 4 {
        y := A_Index-1
        arr[x, y] := x * y
    }
}
MsgBox % arr[2, 3]
</pre>

</body>
</html>
