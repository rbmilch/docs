<!DOCTYPE HTML>
<html>
<head>
<title>Try</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Try <span class="ver">[v1.1.04+]</span></h1>

<p>Schützt eine oder mehrere Anweisungen (Befehle oder Ausdrücke) vor Laufzeitfehlern und Ausnahmen, die vom <a href="Throw.htm">Throw</a>-Befehl ausgelöst werden.</p>

<pre class="Syntax"><span class="func">Try</span> <i>Anweisung</i></pre>
<pre class="Syntax" style="line-height: 100%">
<span class="func">Try</span>
{
    <i>Anweisungen</i>
}
</pre>
<h3>Bemerkungen</h3>
<p>Nach dem <em>Try</em>-Befehl erfolgt üblicherweise ein <a href="Block.htm">Block</a> - das sind eine oder mehrere Anweisungen (Befehle oder Ausdrücke), umschlossen von geschweiften Klammern. Verwendet man nur eine Anweisung, kann sie direkt neben <em>Try</em> gesetzt werden, oder darunter ohne geschweifte Klammern. Der <a href="Catch.htm">Catch</a>-Befehl kann genutzt werden, um Zeilen auszuführen, wenn <em>Try</em> einen Fehler erfasst.</p>
<p>Eine Ausnahme kann ausgelöst werden, wenn der <a href="Throw.htm">throw</a>-Befehl verwendet wird oder wenn das Programm einen Laufzeitfehler verursachen sollte. Wenn eine Ausnahme vom Inneren eines Try-Blocks ausgelöst oder wenn eine Funktion von so einem aufgerufen wird, passiert folgendes:</p>
<ul>
  <li>Gibt es eine entsprechende <a href="Catch.htm">catch</a>-Anweisung, wird die Ausführung dort fortgesetzt.</li>
  <li>Wenn anstelle der catch-Anweisung nur eine <a href="Finally.htm">finally</a>-Anweisung vorhanden ist, wird sie ausgeführt, bis sie ihr Ende erreicht hat, danach wird die Ausnahme wieder automatisch ausgelöst.</li>
  <li>Gibt es weder eine catch-Anweisung noch eine finally-Anweisung, wird die Ausführung bei der nächsten Zeile außerhalb des try-Blocks fortgesetzt.</li>
</ul>
<p>Laufen beim Auslösen einer Ausnahme gerade keine try-Blocks, wird eine Fehlermeldung angezeigt und der aktuelle Thread beendet.</p>
<p>Bei Bedarf kann der "<a href="Block.htm#otb">One True Brace Style</a>" beim <em>Try</em>-Befehl angewendet werden. Zum Beispiel:</p>
<pre>try <strong>{</strong>
    ...
<strong>}</strong> catch e <strong>{</strong>
    ...
<strong>}</strong></pre>
<h3>Siehe auch</h3>
<p><a href="Catch.htm">Catch</a>, <a href="Throw.htm">Throw</a>, <a href="Finally.htm">Finally</a>, <a href="Block.htm">Blöcke</a></p>
<h3 id="Examples">Beispiele</h3>
<pre class="NoIndent" id="ex_basic"><em>; Beispiel #1: Das Grundkonzept von try/catch/throw.</em>

try  <em>; Versucht, den Code auszuführen.</em>
{
    HelloWorld()
    MakeToast()
}
<a href="Catch.htm">catch</a> e  <em>; Verarbeitet den ersten Fehler/Ausnahme, ausgelöst durch den vorherigen Block.</em>
{
    MsgBox, Eine Ausnahme wurde ausgelöst!`nSpeziell: %e%
    <a href="Exit.htm">Exit</a>
}

HelloWorld()  <em>; Ist immer erfolgreich.</em>
{
    MsgBox, Hello, world!
}

MakeToast()  <em>; Schlägt immer fehl.</em>
{
    <em>; Springt sofort zur Fehlerbehandlung des Try-Blocks:</em>
    <a href="Throw.htm">throw</a> A_ThisFunc " ist nicht implementiert, sorry"
}
</pre>

<pre class="NoIndent" id="ex_el"><em>; Beispiel #2: Verwendet try/catch anstelle von ErrorLevel.</em>

try
{
    <em>; Nachfolgend wird versucht, bestimmte Dateitypen abzusichern:</em>
    FileCopy, %A_MyDocuments%\*.txt, D:\Backup\Textdokumente
    FileCopy, %A_MyDocuments%\*.doc, D:\Backup\Textdokumente
    FileCopy, %A_MyDocuments%\*.jpg, D:\Backup\Fotos
}
catch
{
    MsgBox, 16,, Es trat ein Fehler beim Absichern der Dateien auf!
    ExitApp
}
</pre>

<pre class="NoIndent" id="ex_com"><em>; Beispiel #3: Umgang mit COM-Fehlern.</em>

try
{
    obj := <a href="ComObjCreate.htm">ComObjCreate</a>("<a href="https://msdn.microsoft.com/de-de/library/aa227633">ScriptControl</a>")
    obj.ExecuteStatement("MsgBox ""Das ist ein eingebettetes VBScript""")
    obj.InvalidMethod() <em>; Diese Zeile erzeugt einen Laufzeitfehler.</em>
}
catch e
{
    <em>; Um mehr über das Objekt zu erfahren, das in e enthalten ist, siehe <a href="Throw.htm#Exception">Exception()</a>.</em>
    MsgBox, 16,, % "Ausnahme ausgelöst!`n`nWas: " e.what "`nDatei: " e.file
        . "`nZeile: " e.line "`nNachricht: " e.message "`nZusatz: " e.extra
}
</pre>

<pre class="NoIndent" id="ex_nesting"><em>; Beispiel #4: Verschachtelte Try-Catch-Anweisungen.</em>

try Beispiel1() <em>; Jede Einzelanweisung kann auf derselben Zeile des Try-Befehls stehen.</em>
catch e
    MsgBox, Beispiel1() hat "%e%" ausgelöst.

Beispiel1()
{
    try Beispiel2()
    catch e
    {
        if e = 1
            throw e <em>; Ausnahme wird nochmals ausgelöst, so dass der Aufrufer sie abfangen kann.</em>
        else
            MsgBox, Beispiel2() hat "%e%" ausgelöst.
    }
}

Beispiel2()
{
    Random, o, 1, 2
    throw o
}</pre>

</body>
</html>
