<!DOCTYPE HTML>
<html>
<head>
<title>FileRead</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>FileRead</h1>

<p>Liest den Inhalt einer Datei in eine <a href="../Variables.htm">Variable</a>.</p>

<pre class="Syntax"><span class="func">FileRead</span>, AusgabeVar, Dateiname</pre>
<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der <a href="../Variables.htm">Variable</a>, in der die ermittelten Daten gespeichert werden sollen. Bei einem Problem wird <em>AusgabeVar</em> leer gemacht, z. B. wenn die Datei "in Benutzung" oder nicht vorhanden ist (in diesem Fall wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt). Sie wird auch leer gemacht, wenn <em>Dateiname</em> eine leere Datei ist (in diesem Fall wird ErrorLevel auf 0 gesetzt).</p></dd>

  <dt>Dateiname</dt>
  <dd><p>Name der zu lesenden Datei, die im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet wird, wenn kein absoluter Pfad angegeben ist.</p>
      <p><strong>Optionen</strong>: Null oder mehrere der folgenden Zeichenketten, die vor dem Dateinamen angegeben werden können. Die Optionen müssen jeweils mit einem Leer- oder Tabulatorzeichen getrennt werden. Zum Beispiel: <code>*t *m5000 C:\Log-Dateien\200601.txt</code>.</p>
    <p><strong>*c</strong>: Lädt eine Datei aus <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> oder anderen binären Daten. Alle anderen Optionen werden ignoriert, wenn <strong>*c</strong> vorhanden ist.</p>
    <p><strong>*m1024</strong>: Fehlt diese Option, wird die gesamte Datei geladen, sofern genügend Arbeitsspeicher verfügbar ist. Ist dies nicht der Fall, wird eine Fehlermeldung angezeigt und der Thread beendet (aber mit <a href="Try.htm">Try</a> kann das verhindert werden). Ansonsten kann 1024 mit einer dezimalen oder hexadezimalen Anzahl an Bytes ersetzt werden. Wenn die Datei die angegebene Größe überschreitet, wird nur der führende Teil geladen.</p>
    <p class="note"><strong>Hinweis</strong>: Dieses Verhalten kann dazu führen, dass die letzte Zeile nur mit einem einzelnen CR-Zeichen (`r) endet, statt mit dem CR-LF-Paar (`r`n).</p>    
    <p><strong>*t</strong>: Ersetzt alle CR-LF-Paare (`r`n) mit einem LF-Zeichen (`n). Allerdings verschlechtert sich dadurch die Performance und wird normalerweise nicht benötigt. Zum Beispiel wäre ein Text, der `r`n enthält, bereits im richtigen Format, um in ein <a href="GuiControls.htm#Edit">Gui-Edit-Steuerelement</a> eingefügt werden zu können. Ebenso würde <a href="FileAppend.htm">FileAppend</a> beim Öffnen einer neuen Datei erkennen, wenn `r`n vorhanden ist; der Befehl weiß, jedes `r`n so zu lassen wie es ist, anstatt es in `r`r`n umzuwandeln. Die folgende <a href="LoopParse.htm">Parsende Schleife</a> wird immer korrekt funktionieren, egal ob eine Zeile mit `r`n oder `n endet: <code>Loop, Parse, MeineDateiinhalte, `n, `r</code>.</p>
    <p><strong>*Pnnn</strong>: <span class="ver">[AHK_L 42+]:</span> Überschreibt die gesetzte Standardcodierung von <a href="FileEncoding.htm">FileEncoding</a>, wobei <em>nnn</em> ein <a href="https://msdn.microsoft.com/de-de/library/dd317756.aspx">Zeichensatzidentifikator</a> sein muss.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span>: Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf 0 gesetzt, wenn die Datei erfolgreich geladen wurde, und auf 1, falls eines der folgenden Probleme auftrat: 1) Datei nicht vorhanden; 2) Datei ist gesperrt oder nicht zugreifbar; 3) Das System hat nicht genügend Arbeitsspeicher, um die Datei zu laden.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h3 id="Binary">Lesen von Binärdaten</h3>
<p>Je nachdem, welche Datei, Parameter und Standardeinstellungen angegeben sind, interpretiert FileRead die Dateidaten als Text und wandelt sie in die <a href="../Compat.htm#Format">ursprüngliche Codierung</a> des Skripts um. Das führt wahrscheinlich zu Problemen, wenn die Datei binäre Daten enthält, außer in folgenden Fällen:</p>
<ul>
  <li>Wenn die Option <span class="Syntax">*C</span> vorhanden ist, werden Zeilenende- und Zeichensatzumwandlungen bedingungslos umgangen.</li>
  <li>Wenn die Option <span class="Syntax">*P<i>nnn</i></span> vorhanden ist und <i>nnn</i> der ursprünglichen Zeichenkettencodierung entspricht, erfolgt keine Zeichensatzumwandlung.</li>
  <li>Wenn die aktuelle <a href="FileEncoding.htm">Dateicodierung</a> mit der ursprünglichen Zeichenkettencodierung übereinstimmt, erfolgt keine Zeichensatzumwandlung.</li>
</ul>
<p>Beachten Sie, dass nur der Text vor der ersten binären Null von den meisten AutoHotkey-Befehlen und -Funktionen "gesehen" wird, sobald die Daten in <em>AusgabeVar</em> gelesen werden. Der komplette Inhalt allerdings ist weiterhin vorhanden und kann durch erweiterte Methoden wie <a href="NumGet.htm">NumGet()</a> abgerufen werden.</p>
<p>Schließlich kann <a href="FileOpen.htm">FileOpen()</a> mit <a href="../objects/File.htm#RawRead">File.RawRead()</a> oder <a href="../objects/File.htm#ReadNum">File.Read<i>Num</i>()</a> dazu verwendet werden, binäre Daten einzulesen, ohne dabei erst die komplette Datei in den Speicher einlesen zu müssen.</p>

<h3>Bemerkungen</h3>
<p>Besteht das Ziel darin, einen großen Dateibereich in den Speicher zu laden, ist FileRead besser geeignet als eine <a href="LoopReadFile.htm">Datei-lesende Schleife</a>.</p>
<p>Eine Datei größer als 1 GB bewirkt, dass <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt und <em>AusgabeVar</em> leer gemacht wird. Wenn aber die <strong>*m-Option</strong> vorhanden ist, wird nur der führende Teil der Datei geladen.</p>
<p>FileRead ignoriert <a href="_MaxMem.htm">#MaxMem</a>. Gibt es Bedenken, ob die Datei zu viel Speicher verwendet, kann die Dateigröße vorher mit <a href="FileGetSize.htm">FileGetSize</a> überprüft werden.</p>
<p><a href="FileOpen.htm">FileOpen()</a> unterstützt mehr Funktionen als FileRead, wie z. B. das Lesen oder Schreiben von Daten innerhalb der Datei, ohne dabei die gesamte Datei in den Speicher laden zu müssen. Siehe <a href="../objects/File.htm">File-Objekt</a> für eine Liste von Funktionen.</p>

<h3>Siehe auch</h3>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File-Objekt</a>, <a href="LoopReadFile.htm">Datei-lesende Schleife</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="FileGetSize.htm">FileGetSize</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="IniRead.htm">IniRead</a>, <a href="Sort.htm">Sort</a>, <a href="URLDownloadToFile.htm">UrlDownloadToFile</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent" id="ex1"><em>; Beispiel #1: Liest die Textdatei in AusgabeVar.</em>
FileRead, AusgabeVar, C:\Meine Dokumente\Meine Datei.txt</pre>
<pre class="NoIndent" id="ex2"><em>; Beispiel #2: Sortiert schnell den Inhalt einer Datei.</em>
FileRead, Inhalt, C:\Adressenliste.txt
if not ErrorLevel  <em>; Erfolgreich geladen.</em>
{
    <a href="Sort.htm">Sort</a>, Inhalt
    FileDelete, C:\Adressenliste (alphabetisch).txt
    FileAppend, %Inhalt%, C:\Adressenliste (alphabetisch).txt
    Inhalt =  <em>; Gibt den Speicher frei.</em>
}</pre>

</body>
</html>
