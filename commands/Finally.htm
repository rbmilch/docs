<!DOCTYPE HTML>
<html>
<head>
<title>Finally</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Finally <span class="ver">[v1.1.14+]</span></h1>

<p>Stellt sicher, dass immer, wenn eine <a href="Try.htm">Try</a>-Anweisung erfolgt, eine oder mehrere Anweisungen (Befehle oder Ausdrücke) ausgeführt werden.</p>

<pre class="Syntax"><span class="func">Finally</span> <i>Anweisung</i></pre>
<pre class="Syntax" style="line-height: 100%">
<span class="func">Finally</span>
{
    <i>Anweisungen</i>
}
</pre>
<h3>Bemerkungen</h3>
<p>Jedes <em>Finally</em> muss mit einer darüberliegenden <a href="Try.htm">Try</a>- oder <a href="Catch.htm">Catch</a>-Anweisung verbunden werden. Ein <em>Finally</em> bezieht sich immer auf nächst darüberliegende noch nicht beanspruchte <em>Try</em>-Anweisung, sofern dieses Verhalten nicht mit einem <a href="Block.htm">Block</a> geändert wurde.</p>
<p>Das Verhalten einer <em>Try</em>-Anweisung ist abhängig davon, ob <em>catch</em> oder <em>finally</em> vorhanden ist. Weitere Informationen finden Sie unter <a href="Try.htm">Try</a>.</p>
<p><em>Goto</em>, <em>Break</em>, <em>Continue</em> und <em>Return</em> können nicht verwendet werden, um einen <em>Finally</em>-Block zu verlassen, weil es sonst notwendig wäre, jegliche Ablaufsteuerung innerhalb eines <em>Try</em>-Blocks zu unterdrücken. Wenn <em>Try</em> beispielsweise <code>return 42</code> verwendet, würde der Wert 42 erst zurückgegeben werden, nachdem der Finally-Block ausgeführt wurde. Der Versuch, mittels einem dieser Befehle aus einem <em>Finally</em>-Block zu springen, wird beim Laden des Skripts als Fehler erkannt, sofern möglich, oder ansonsten während das Skript ausgeführt wird.</p>
<p>Vor <span class="ver">[v1.1.19.02]</span> existierte ein Bug, der Ablaufsteuerungen daran hinderte, innerhalb von <em>Try</em> zu funktionieren, während <em>Finally</em> vorhanden war. <em>Return</em> wurde fälschlicherweise in <em>Finally</em> zugelassen, aber ignoriert, wenn eine Ausnahme ausgelöst wurde.</p>
<p>Der <a href="Block.htm#otb">One True Brace Style</a> (OTB) kann je nach Bedarf bei der <em>Try</em>-Anweisung angewendet werden. Zum Beispiel:</p>
<pre>try <strong>{</strong>
    ...
<strong>}</strong> finally <strong>{</strong>
    ...
<strong>}</strong>

try <strong>{</strong>
    ...
<strong>}</strong> catch e <strong>{</strong>
    ...
<strong>}</strong> finally <strong>{</strong>
    ...
<strong>}</strong></pre>
<h3>Siehe auch</h3>
<p><a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Throw.htm">Throw</a>, <a href="Block.htm">Blöcke</a></p>
<h3 id="Examples">Beispiele</h3>
<pre class="NoIndent">try
{
    ToolTip, Bearbeite ...
    Beispiel1()
}
catch e
{
    <em>; Um mehr über das Objekt zu erfahren, das in e enthalten ist, siehe <a href="Catch.htm">Catch</a>.</em>
    MsgBox, 16,, % "Ausnahme ausgelöst!`n`nWas: " e.what "`nDatei: " e.file
        . "`nZeile: " e.line "`nNachricht: " e.message "`nZusatz: " e.extra
}
finally
{
    ToolTip <em>; Versteckt das ToolTip</em>
}

MsgBox, Fertig!

<em>; Diese Funktion hat einen Finally-Block, der als Aufräumcode fungiert.</em>
Beispiel1()
{
    try
        Beispiel2()
    finally
        MsgBox, Dies wird immer ausgeführt, unabhängig von Ausnahmen
}

<em>; Diese Funktion wird fehlschlagen, wenn die Minuten ungerade sind.</em>
Beispiel2()
{
    if Mod(A_Min, 2)
        throw Exception("Test-Ausnahme")
    MsgBox, Beispiel2 ist nicht fehlgeschlagen
}</pre>

</body>
</html>
