<!DOCTYPE HTML>
<html>
<head>
<title>Input</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Input</h1>

<p>Wartet darauf, dass der Benutzer eine Zeichenkette eingibt.</p>

<pre class="Syntax"><span class="func">Input</span> <span class="optional">, AusgabeVar, Optionen, Endtasten, Vergleichsliste</span></pre>
<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der Variable, in der die Benutzereingabe gespeichert werden soll (standardmäßig werden künstliche Eingaben auch erfasst).</p>
      <p>Fehlt dieser und die anderen Parameter, werden alle laufenden Inputs in den anderen <a href="../misc/Threads.htm">Threads</a> beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort NewInput gesetzt. Das <a href="../misc/ErrorLevel.htm">ErrorLevel</a> des aktuellen Befehls wird dagegen auf 0 gesetzt, wenn er einen vorherigen Input beenden konnte, oder auf 1, wenn es keinen vorherigen Input gab, den er beenden konnte.</p>
      <p><em>AusgabeVar</em> wird an sich keine Tastatureingaben enthalten. Stattdessen enthält es Zeichen, die von Tastatureingaben erzeugt werden, abhängig von der Tastaturbelegung/Sprache des aktiven Fensters. Tastatureingaben, die keine Zeichen erzeugen (wie z. B. BILD-NACH-OBEN und POS1), werden dementsprechend nicht gespeichert (allerdings können sie via <em>Endtasten</em>-Parameter erkannt werden).</p>
      <p class="warning"><strong>Hinweis:</strong> Die ESC-Taste wird in das ASCII-ESC-Zeichen <code>Chr(27)</code> umgewandelt. Um das zu verhindern, fügt man <code>{Esc}</code> in <em>Endtasten</em> ein, damit Input durch Drücken von ESC beendet wird.</p>
      <p>Leerraumzeichen wie z. B. TAB (`t) werden direkt geschriebener Text gespeichert. ENTER als LF-Zeichen (`n).</p></dd>

  <dt>Optionen</dt>
  <dd><p><u>Eine Zeichenkette mit null oder mehreren der folgenden Buchstaben (in beliebiger Reihenfolge, optional mit Leerzeichen getrennt):</u></p>
      <p><strong>B</strong>: Rücktaste (Backspace) wird ignoriert. Normalerweise wird, wenn man während eines Inputs die Rücktaste drückt, das zuletzt gedrückte Zeichen am Ende der Zeichenkette entfernt. Hinweis: Ist der Eingabetext sichtbar (wie z. B. in einem Texteditor) und werden die Pfeiltasten oder andere Mittel zum Navigieren innerhalb des Textes verwendet, wird die Rücktaste weiterhin das letzte Zeichen entfernen, anstatt das Zeichen nach der Einfügemarke.</p>
      <p><strong>C</strong>: Groß-/Kleinschreibung-sensitiv. Normalerweise unterscheidet <em>Vergleichsliste</em> nicht zwischen Groß- und Kleinschreibung (in den Versionen vor 1.0.43.03 wurden nur die Groß- und Kleinbuchstaben von A bis Z erkannt, aber nicht Buchstaben wie ü/Ü).</p>
      <p><strong>I</strong>: Ignoriert Eingaben, die vom AutoHotkey-Skript erzeugt werden, wie z. B. durch den <a href="Send.htm#SendEvent">SendEvent</a>-Befehl. Allerdings werden <a href="Send.htm#SendInput">SendInput</a> und <a href="Send.htm#SendPlay">SendPlay</a> immer ignoriert, egal ob diese Einstellung aktiv ist oder nicht.</p>      
      <p><strong>L</strong>: Längenbegrenzung (z. B. <code>L5</code>). Die maximal erlaubte Länge der Eingabe. Erreicht der Text diese Länge, wird der Input beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Max gesetzt. Wenn der Text stattdessen mit einem Element aus der <em>Vergleichsliste</em> übereinstimmt, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Match gesetzt. Fehlt die Zahl, wird die Länge auf 16.383 Zeichen begrenzt (der höchste zulässige Wert).</p>
      <p><strong>M</strong>: Tastenkombinationen wie STRG+A bis STRG+Z werden erkannt und in echte ASCII-Zeichen umgewandelt, falls möglich. Das folgende Beispiel zeigt, wie STRG+C erkannt werden kann:</p>
      <pre>Transform, StrgC, Chr, 3 <em>; Speichert das Zeichen für STRG+C in die Variable StrgC.</em>
Input, AusgabeVar, L1 M
if AusgabeVar = %StrgC%
    MsgBox, Sie haben STRG+C gedrückt.
ExitApp</pre>
      <p class="note"><strong>Hinweis</strong>: STRG+A bis STRG+Z sind die Zeichen von <a href="Chr.htm">Chr(1)</a> bis <a href="Chr.htm">Chr(26)</a>. Außerdem ist es möglich, dass die <strong>M</strong>-Option einige Tastenkürzel wie STRG+NACH-LINKS dazu bringen kann, sich während eines Inputs falsch zu verhalten.</p>
      <p><strong>T</strong>: Zeitlimit (z. B. <code>T3</code>). Die Anzahl an Sekunden, die gewartet werden sollen, bevor der Input beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Timeout gesetzt wird. Hat der Input die Zeit überschritten, wird <em>AusgabeVar</em> auf das gesetzt, was auch immer der Benutzer gerade eingegeben hat. Dieser Wert kann eine Gleitkommazahl wie z. B. <code>2.5</code> sein.</p>
      <p id="vis"><strong>V</strong>: Sichtbar. Normalerweise wird die Eingabe des Benutzers blockiert (unsichtbar für das Betriebssystem). Verwenden Sie diese Option, um die Tastatureingaben des Benutzers direkt an das aktive Fenster senden zu lassen.</p>
      <p id="asterisk"><strong>*</strong>: Platzhalter (überall finden). Normalerweise muss alles, was der Benutzer eingibt, exakt mit einem Element aus der <em>Vergleichsliste</em> übereinstimmen, damit der Input fortfahren kann. Verwenden Sie diese Option, um im gesamten Eingabetext eine Übereinstimmung häufiger finden zu können.</p>
      <p id="E"><strong>E</strong> <span class="ver">[v1.1.20+]</span>: Behandelt Einzelzeichen-Endungstasten als Zeichencode anstatt als Tastencode. Diese Änderung ermöglicht konsistentere Ergebnisse, wenn das Tastaturlayout des aktiven Fensters sich vom Tastaturlayout des Skripts unterscheidet. Es verhindert auch Tastenkombinationen, die die angegebenen Endungszeichen bei der Eingabe eigentlich nicht erzeugen können; wenn <code>@</code> beispielsweise eine Endungstaste wäre, würde sie auf einem US-Layout via UMSCHALT+2 ausgelöst werden, aber nicht via STRG+UMSCHALT+2 (wenn die E-Option verwendet wird). Wenn zusätzlich noch die <strong>C</strong>-Option angegeben ist, unterscheidet das Endungszeichen zwischen Groß- und Kleinschreibung.</p>
      </dd>

  <dt>Endtasten</dt>
  <dd><p>Eine Liste mit null oder mehreren Tasten, die den Input beenden können, sobald eine von denen gedrückt wird (die <em>Endtaste</em> selbst wird nicht in <em>AusgabeVar</em> geschrieben). Ein auf diese Weise beendeter Input setzt <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort EndKey, gefolgt von einem Doppelpunkt und den Namen der <em>Endtaste</em>. Beispiele: <code>EndKey:.</code>, <code>EndKey:Escape</code>.</p>
      <p>Die <em>Endtasten</em>-Liste verwendet ein Format, das Ähnlichkeit zum verwendeten Format im <a href="Send.htm">Send</a>-Befehl hat. Zum Beispiel würde <code>{Enter}.{Esc}</code> bewirken, dass ENTER, PUNKT oder ESC den Input beenden können. Damit die geschweiften Klammern selbst Endtasten sein können, gibt man <code>{{}</code> und/oder <code>{}}</code> an.</p>
      <p>Um STRG, ALT oder UMSCHALT als Endtasten zu verwenden, gibt man die linke und/oder rechte Version der Taste an, nicht die neutrale Version. Zum Beispiel müsste <code>{LControl}{RControl}</code> anstelle von <code>{Control}</code> angegeben werden.</p>
      <p><span class="ver">[v1.0.14+]</span>: Zwar werden Tastenkombinationen wie ALT+C (!c) nicht unterstützt, allerdings können bestimmte Zeichen, die eine gedrückte UMSCHALT-Taste erfordern - also Satzzeichen wie z. B. <code>?!:@&amp;{}</code> - verwendet werden. <span class="ver">[v1.1.20+]</span>: Andere Zeichen in Verbindung mit der oben beschriebenen <strong>E</strong>-Option werden unterstützt. Wenn sowohl die <strong>E</strong>- als auch <strong>M</strong>-Option vorhanden sind, werden Tastenkombinationen von STRG+A bis STRG+Z unterstützt, indem man die entsprechenden ASCII-Steuerzeichen in <em>Endtasten</em> einfügt.</p>
      <p>Ein eindeutiger virtueller Tastencode wie <code>{vkFF}</code> könnte man auch angeben. Diese Angabe ist in Ausnahmefällen nützlich, wo eine Taste keinen Namen hat und keine sichtbaren Zeichen beim Drücken erzeugt. Der virtuelle Tastencode einer solchen Taste kann durch Befolgen der Schritte am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> ermittelt werden.</p>
    </dd>

  <dt>Vergleichsliste</dt>
  <dd><p>Eine kommagetrennte Liste mit Stichwörtern, die den Input beenden können (in diesem Fall wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Match gesetzt). Alles, was der Benutzer eingibt, muss exakt mit einem Element aus der Liste übereinstimmen, damit der Input fortfahren kann (sofern die <a href="#asterisk">*-Option</a> nicht vorhanden ist). <strong>Alle Leer- und Tabulatorzeichen an den angrenzenden Kommas sind von Bedeutung</strong> - das heißt, dass sie ein Teil der Übereinstimmungszeichenkette sind. Wenn <em>Vergleichsliste</em> beispielsweise <code>ABC , XYZ</code> wäre, kann eine Übereinstimmung nur erfolgen, wenn der Benutzer ein Leerzeichen nach ABC oder vor XYZ eingibt.</p>
      <p>Zwei aufeinanderfolgende Kommas ergeben ein direkt geschriebenes Komma. Zum Beispiel würde die folgende Zeile ein direkt geschriebenes Komma nach dem Wort Zeichenkette1 erzeugen: <code>Zeichenkette1,,,Zeichenkette2</code>. Im Vergleich dazu würde die folgende Liste nur ein einzelnes Element mit einem direkt geschriebenen Komma dazwischen enthalten: <code>einzelnes,,Element</code>.</p>
    <p>Da die Elemente in <em>Vergleichsliste</em> nicht als einzelne Parameter behandelt werden, kann die Liste komplett in einer Variable enthalten sein. Diese Methode ist sowieso notwendig, wenn die Liste eine Länge von 16.383 Zeichen überschreitet (die maximale Länge einer Skript-Zeile). Zum Beispiel könnte <em>Vergleichsliste</em> aus <code>%Liste1%,%Liste2%,%Liste3%</code> bestehen, von der jede Unterliste eine lange Liste mit Elementen enthält.</p>
    </dd>

</dl>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span>: Dieser Befehl ist in der Lage, eine Ausnahme auszulösen, wenn er ohne Parameter aufgerufen wird, oder wenn kein Input am Laufen ist. Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<table class="info">
  <tr>
    <td style="width:15%"><p>1 oder 0</p></td>
    <td><p>Immer wenn der Befehl ohne Parameter erfolgt, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 0 gesetzt, wenn er erfolgreich einen vorherigen Input beenden konnte, oder auf 1, wenn es keinen vorherigen Input gab, den er beenden konnte.</p></td>
  </tr>
  <tr>
    <td>NewInput</td>
    <td>Der Input wurde durch einen anderen <a href="../misc/Threads.htm">Thread</a> unterbrochen, der den Input-Befehl benutzte.</td>
  </tr>
  <tr>
    <td>Max</td>
    <td>Der Input hat die maximal erlaubte Länge erreicht und stimmt mit keinem Element aus der <em>Vergleichsliste</em> überein.</td>
  </tr>
  <tr>
    <td>Timeout</td>
    <td>Der Input hat die Zeit überschritten.</td>
  </tr>
  <tr>
    <td>Match</td>
    <td>Der Input stimmt mit einem Element aus der <em>Vergleichsliste</em> überein.</td>
  </tr>
  <tr>
    <td>EndKey:<em>Name</em></td>
    <td>
      <p>Eine der <em>Endtasten</em> wurde zum Beenden des Inputs gedrückt. In diesem Fall wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort EndKey gesetzt, gefolgt von einem Doppelpunkt und den Namen der Endtaste ohne geschweifte Klammern, z. B. <code>EndKey:Enter</code>, <code>EndKey:Escape</code>, etc.</p>
      <p>Beachten Sie, dass <em>Name</em> der "normalisierte" Name der Taste ist, egal wie sie in <em>Endtasten</em> geschrieben wurde. Zum Beispiel würde sowohl <code>{Esc}</code> als auch <code>{vk1B}</code> <code>EndKey:Escape</code> erzeugen. Mit <a href="GetKey.htm">GetKeyName()</a> kann der normalisierte Name abgerufen werden.</p>
      <p>Wenn die <a href="#E">E-Option</a> verwendet wurde, wird <em>Name</em> das aktuell eingegebene Zeichen sein (falls zutreffend). Ansonsten wird der Name auf Basis des aktiven Tastaturlayouts vom Skript bestimmt.</p>
      <p>Vor <span class="ver">[v1.1.20]</span>, wenn der VK-Code der Endungstaste im Bereich von 0x41 (A) bis 0x5A (Z) war, enthielt ErrorLevel üblicherweise das entsprechende ASCII-Zeichen, selbst wenn es nicht für das aktuelle Tastaturlayout korrekt war. In <span class="ver">[v1.1.20]</span> und höher wird das korrekte Zeichen verwendet. Verwendet man ein Zeichen im Bereich von A bis Z, wird es aus Gründen der Rückwärtskompatibilität großgeschrieben sein; ansonsten in der Regel kleingeschrieben.</p>
    </td>
  </tr>
</table>
<h3>Bemerkungen</h3>
<p>Verwendet man diesen Befehl, während ein Input in einem anderen <a href="../misc/Threads.htm">Thread</a> bereits am Laufen ist, wird dieser Input beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort NewInput gesetzt. Danach wird ein neuer Input eingeleitet (sofern Parameter angegeben sind).</p>
<p>Während ein Input am Laufen ist, können neue <a href="../misc/Threads.htm">Threads</a> wie <a href="Menu.htm">benutzerdefinierte Menüelemente</a> oder <a href="SetTimer.htm">zeitgesteuerte Subroutinen</a> erstellt werden. Zudem sind Tastatur-<a href="../Hotkeys.htm">Hotkeys</a> auch dann noch aktiv, wenn der Input <a href="#vis">sichtbar</a> ist. Wenn der Input nicht sichtbar ist, können nur <a href="_UseHook.htm">Hook-Hotkeys</a> ausgelöst werden.</p>
<p>Wenn ein Skript diesen Befehl zum ersten Mal verwendet, wird der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> installiert (falls noch nicht geschehen). Darüber hinaus wird das Skript <a href="_Persistent.htm">persistent</a>; das heißt, dass das Skript nur noch mit <a href="ExitApp.htm">ExitApp</a> beendet werden kann. Jedes Mal, wenn das Skript einen <a href="Suspend.htm">Suspend</a>- oder <a href="Hotkey.htm">Hotkey</a>-Befehl erreicht, wird überprüft, ob der Tastatur-Hook noch von Hotkeys oder Hotstrings beansprucht wird. Ist dies nicht der Fall, wird der Hook wieder deinstalliert.</p>
<p>Verwenden Sie mehrere Sprachen oder Tastaturbelegungen, greift der Input auf die Tastaturbelegung des aktiven Fensters zurück, anstatt auf die des Skripts (egal ob die Eingabe <a href="#vis">sichtbar</a> ist oder nicht). In den Versionen vor 1.0.44.03 wurde die Belegung des Skripts verwendet.</p>
<p>Zwar sind <a href="../Hotstrings.htm">Hotstrings</a> nicht so flexibel wie ein Input-Befehl, allerdings sind sie leichter zu handhaben.</p>
<h3>Siehe auch</h3>
<p><a href="KeyWait.htm">KeyWait</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="InputBox.htm">InputBox</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="IfIn.htm">if Var in/contains Vergleichsliste</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Wartet darauf, dass der Benutzer eine Taste drückt.  Tasten, die keine sichtbaren Zeichen erzeugen (z. B.
; Modifikatortasten, Funktionstasten, Pfeiltasten), sind als Endtasten aufgelistet, so dass auch
; sie erkannt werden können.</em>
Input, Einzeltaste, L1, {LControl}{RControl}{LAlt}{RAlt}{LShift}{RShift}{LWin}{RWin}{AppsKey}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Del}{Ins}{BS}{CapsLock}{NumLock}{PrintScreen}{Pause}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Dies ist ein funktionierendes Hotkey-Beispiel.  Da der Hotkey den Tilde-Präfix (~) hat,
; wird seine Tastatureingabe selbst an das aktive Fenster übergeben.
; Schreibt man daher [btw (oder einen anderen
; Begriff) in ein Texteditor, wird das Skript automatisch eine Aktion
; Ihrer Wahl durchführen (z. B. den Eingabetext ersetzen):</em>

~[::
Input, Benutzereingabe, V T5 L4 C, {enter}.{esc}{tab}, btw,otoh,fl,ahk,ca
if (ErrorLevel = "Max")
{
    MsgBox, Ihre Eingabe "%Benutzereingabe%" hat die maximale Textlänge erreicht.
    return
}
if (ErrorLevel = "Timeout")
{
    MsgBox, Sie haben "%Benutzereingabe%" innerhalb der verfügbaren Zeit eingegeben.
    return
}
if (ErrorLevel = "NewInput")
    return
If InStr(ErrorLevel, "EndKey:")
{
    MsgBox, Sie haben "%Benutzereingabe%" eingegeben und Eingabe mit %ErrorLevel% beendet.
    return
}
<em>; Ansonsten wurde eine Übereinstimmung gefunden.</em>
if (Benutzereingabe = "btw")
    Send, {backspace 4}by the way
else if (Benutzereingabe = "otoh")
    Send, {backspace 5}on the other hand
else if (Benutzereingabe = "fl")
    Send, {backspace 3}Florida
else if (Benutzereingabe = "ca")
    Send, {backspace 3}California
else if (Benutzereingabe = "ahk")
    Run, https://autohotkey.com
return</pre>

</body>
</html>
