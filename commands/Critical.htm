<!DOCTYPE HTML>
<html>
<head>
<title>Critical</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Critical</h1>

<p>Verhindert, dass der <a href="../misc/Threads.htm">aktuelle Thread</a> von anderen Threads unterbrochen werden kann, oder macht ihn unterbrechbar.</p>

<pre class="Syntax">
<span class="func">Critical</span> <span class="optional">, Off</span>
<span class="func">Critical</span> 50 <em>; Siehe <a href="#Interval">Bemerkungen</a>.</em>
</pre>
<p>Wenn der erste Parameter fehlt (oder das Wort On ist), wird der <a href="../misc/Threads.htm">aktuelle Thread</a> als kritisch eingestuft; das heißt, dass dieser Thread nicht von anderen Threads unterbrochen werden kann. Wenn der erste Parameter das Wort Off oder <span class="ver">[in v1.0.48+]</span> eine 0 ist, wird der aktuelle Thread sofort unterbrechbar gemacht, unabhängig von den Einstellungen von <a href="Thread.htm">Thread Interrupt</a>.</p>

<h3 id="Behave">Verhalten von kritischen Threads</h3>
<p>Im Gegensatz zu Threads mit <a href="../misc/Threads.htm">hoher Priorität</a> werden Ereignisse, die während eines kritischen Threads auftreten, nicht verworfen. Drückt der Benutzer beispielsweise einen <a href="../Hotkeys.htm">Hotkey</a>, während der aktuelle Thread kritisch ist, wird dieser Hotkey auf unbestimmte Zeit zwischengespeichert. Sobald der aktuelle Thread endet oder unkritisch gemacht wird, wird der Hotkey als neuer Thread gestartet.</p>
<p>Ein kritischer Thread wird im Notfall unterbrochen. Notfälle sind: 1) die <a href="OnExit.htm">OnExit</a>-Subroutine; 2) eine <a href="OnMessage.htm">OnMessage()</a>-Funktion, die eine Meldungsnummer kleiner als 0x312 überwacht (oder ein durch so eine Meldung ausgelöster <a href="RegisterCallback.htm">Callback</a>); und 3) ein <a href="RegisterCallback.htm">Callback</a>, der indirekt durch den kritischen Thread selbst ausgelöst wird (z. B. via <a href="PostMessage.htm">SendMessage</a> oder <a href="DllCall.htm">DllCall</a>). Um diese Unterbrechungen zu vermeiden, deaktiviert man solche Funktionen vorübergehend.</p>
<p>Ein kritischer Thread wird unterbrechbar, wenn eine <a href="MsgBox.htm">MsgBox</a> oder ein anderes Dialogfenster angezeigt wird. Im Gegensatz zu <a href="Thread.htm">Thread Interrupt</a> wird der Thread allerdings wieder kritisch, wenn der Benutzer das Dialogfenster schließt.</p>

<h3 id="Off">Critical Off</h3>
<p>Während zwischengespeicherte Ereignisse darauf warten, neue Threads zu starten, kann <code>Critical Off</code> nicht genutzt werden, um eine sofortige Unterbrechung des aktuellen Threads herbeizuführen. Stattdessen werden durchschnittlich 5 Millisekunden vergehen, bevor es zu einer Unterbrechung kommt. Dadurch wird zu 99,999 % sichergestellt, dass mindestens eine Zeile nach <code>Critical Off</code> ausgeführt wird, bevor eine Unterbrechung erfolgt. Mit Mitteln wie <code><a href="Sleep.htm">Sleep</a> -1</code> oder <a href="WinWait.htm">WinWait</a> in Verbindung mit einem noch nicht existierendem Fenster können sofortige Unterbrechungen erzwungen werden.</p>
<p><code>Critical Off</code> bewirkt, dass der aktuelle Thread wieder unterbrochen werden kann, selbst wenn der Thread nicht via Critical als kritisch eingestuft wurde, wodurch Ereignisse wie <a href="Gui.htm#GuiSize">GuiSize</a> schneller oder vorhersehbarer verarbeitet werden können.</p>

<h3 id="Settings">Thread-Einstellungen</h3>
<p>Siehe <a href="../Variables.htm#IsCritical">A_IsCritical</a>, wie man die aktuelle Einstellung von Critical speichert und wiederherstellt. Da Critical jedoch eine Thread-spezifische Einstellung ist, wird der darunterliegende/fortgesetzte Thread (sofern vorhanden) automatisch als unkritisch eingestuft, wenn ein kritischer Thread endet. Somit ist es nicht notwendig, <code>Critical Off</code> direkt vor dem Beenden eines Threads auszuführen.</p>
<p>Wenn Critical nicht im automatischen Ausführungsbereich (oberster Bereich des Skripts) angegeben ist, sind alle Threads zu Beginn unkritisch (obwohl die Einstellungen von <a href="Thread.htm">Thread Interrupt</a> weiterhin gültig sind). Wenn der automatische Ausführungsbereich hingegen Critical ein- aber nie ausschaltet, werden alle neu gestarteten <a href="../misc/Threads.htm">Threads</a> (z. B. <a href="../Hotkeys.htm">Hotkey</a>, <a href="Menu.htm">benutzerdefinierter Menüpunkt</a> oder <a href="SetTimer.htm">zeitgesteuerte</a> Subroutine) zu Beginn kritisch sein.</p>
<p>Der Befehl <a href="Thread.htm">Thread NoTimers</a> ist quasi dasselbe wie Critical, aber er verhindert nur, dass <a href="SetTimer.htm">Timer</a> unterbrochen werden können.</p>
<p><span class="ver">[v1.0.47+]</span>: Das Einschalten von Critical bewirkt auch <code><a href="SetBatchLines.htm">SetBatchLines</a> -1</code> für den <a href="../misc/Threads.htm">aktuellen Thread</a>.</p>

<h3 id="Interval">Meldungsüberprüfungsintervall</h3>
<p><span class="ver">[v1.0.47+]</span>: Wenn man eine positive Nummer im ersten Parameter angibt (z. B. <code>Critical 30</code>), wird Critical eingeschaltet und die Dauer geändert, nach wie vielen Millisekunden die interne Meldungswarteschlange jedes Mal überprüft werden soll. Wenn keine Nummer angegeben ist, werden die Meldungen alle 16 ms überprüft, während Critical eingeschaltet ist, und alle 5 ms, während Critical ausgeschaltet ist. Die Erhöhung des Intervalls verzögert das Eintreffen von Meldungen/Ereignissen, was dem <a href="../misc/Threads.htm">aktuellen Thread</a> mehr Zeit zum Beenden gibt. Dies verringert die Chance, dass bestimmte <a href="OnMessage.htm">OnMessage</a>-Funktionen und <a href="Gui.htm#DefaultWin">GUI-Ereignisse</a> aufgrund von "Thread wird bereits ausgeführt" verloren gehen. Wartende Befehle wie <a href="Sleep.htm">Sleep</a> und <a href="WinWait.htm">WinWait</a> werden Meldungen unabhängig dieser Einstellung überprüfen (um das umgehen, können Sie z. B. <code>DllCall("Sleep", UInt, 500)</code> nutzen).</p>
  <p class="note"><strong>Hinweis</strong>: Eine zu starke Erhöhung des Meldungsüberprüfungsintervalls kann die Reaktionsfähigkeit verschiedener Ereignisse (z. B. <a href="Gui.htm">GUI</a>-Fenster neu zeichnen) beeinträchtigen.</p>

<h3>Siehe auch</h3>
<p><a href="Thread.htm">Thread (Befehl)</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>, <a href="OnMessage.htm">OnMessage()</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="Hotkey.htm">Hotkey</a>, <a href="Menu.htm">Menu</a>, <a href="SetTimer.htm">SetTimer</a></p>

<h3>Beispiel</h3>
<pre class="NoIndent">#space::  <em>; WIN+LEERTASTE</em>
Critical
ToolTip Neue Threads werden erst gestartet`, wenn dieses ToolTip verschwindet.
Sleep 3000
ToolTip  <em>; Schaltet das ToolTip aus.</em>
return  <em>; Wenn man eine Hotkey-Subroutine auf diese Weise verlässt, wird der Thread beendet. Jeder darunterliegende Thread, der wiederaufgenommen werden soll, ist per Definition unkritisch.</em></pre>

</body>
</html>
