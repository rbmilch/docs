<!DOCTYPE HTML>
<html>
<head>
<title>Änderungen und neue Features</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>

<body>
<h1>Änderungen und neue Features</h1>
<p>Änderungen und neue Features, eingeführt durch den aktuellen Entwicklungszweig von AutoHotkey (auch bekannt als AutoHotkey_L), sind nachfolgend aufgelistet.</p>
<p>Ältere Änderungen können in <a href="ChangeLogHelp.htm">Archivierte Änderungen</a> gefunden werden.</p><!--new revisions go here-->


<h2 id="v1.1.28.00">1.1.28.00 - 11. Februar 2018</h2>
<h4>Änderungen:</h4>
<ul>
<li>Geändert: __Delete wird bei Aufruf absofort Ausnahmen abfangen und melden, während ein Objekt-Cleanup durchgeführt wird. Zuvor hatte es den (fehlerhaften) Effekt, die Ausnahme solange "hinauszuzögern", bis die nächste Funktion aufgerufen wird oder das Ende des Try-Blocks/Threads erreicht ist.</li>
<li>Geändert: Der Hotstring-Erkenner wird nun zurückgesetzt, wenn sich der Fokus ändert, und nicht nur, wenn sich das aktive Fenster ändert.</li>
<li>Geändert: WinMenuSelectItem behandelt <code>0&amp;</code> nun als Systemmenü des Fensters.</li>
</ul>

<h4>Neue Features:</h4>
<ul>
<li>Hinzugefügt: Alle internen Variablen können nun im Pfad enthalten sein, den man an #Include übergeben kann.</li>
<li>Hinzugefügt: <a href="Variables.htm#TimeIdleKeyboard">A_TimeIdleKeyboard</a> und <a href="Variables.htm#TimeIdleMouse">A_TimeIdleMouse</a>.</li>
<li>Hinzugefügt: <a href="Variables.htm#ListLines">A_ListLines</a>.</li>
<li>Hinzugefügt: <a href="Variables.htm#ComSpec">A_ComSpec</a> (als Alternative für ComSpec).</li>
<li>Hinzugefügt: <a href="commands/LoopFile.htm#LoopFileFullPath">A_LoopFilePath</a> (als Alternative für A_LoopFileFullPath, das eine Fehlbenennung ist).</li>
<li>Hinzugefügt: <a href="Hotstrings.htm#X">X-Option</a> für Hotstrings, um eine Aktion in der gleichen Zeile auszuführen, anstatt den Hotstring automatisch zu ersetzen.</li>
<li>Hinzugefügt: <a href="commands/Hotstring.htm">Hotstring()</a>.</li>
<li>Hinzugefügt: <a href="Hotstrings.htm#Function">Funktions-Hotstrings</a>.</li>
<li>Hinzugefügt: MaxParts-Parameter für <a href="commands/StringSplit.htm#function">StrSplit</a>.</li>
<li>Verbessert: <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a> erlaubt die Angabe von VK und SC, oder vk00sc000.</li>
</ul>

<h4>Fehlerbehebungen:</h4>
<ul>
<li>Behoben: #MenuMaskKey behandelte einige gültige Tasten (z. B. Del) als ungültig.</li>
<li>Optimiert: Die Erkennung von AltGr in Unicode-Versionen. Diese Optimierung verhindert, dass eine Verzögerung auftritt, wenn das Skript gestartet wird (seit v1.1.27.00) oder wenn Send das erste Mal für jedes Ziel-Tastaturlayout (vor v1.1.27.00) aufgerufen wird.</li>
<li>Behoben: Irreführende naheliegende Zeilen bei einem <code>x up::y</code>-Neubelegungsfehler.</li>
<li>Behoben: <code>Menu Tray, Icon, HICON:%hicon%</code> nutzt nun das <em>hicon</em>, ohne es größer/kleiner zu machen.</li>
</ul>

<h2 id="v1.1.27.07">1.1.27.07 - 21. Januar 2018</h2>
<p>Behoben: Die Standardgröße von Gui in Verbindung mit +Parent ist nicht mehr durch das übergeordnete Fenster eingeschränkt [fehlerhaft seit v1.1.27.05].</p>
<p>Behoben: Steuerelemente wurden nicht neu gezeichnet, wenn ein separates Tab-Steuerelement sichtbar/unsichtbar gemacht wurde, nachdem das Tab-Steuerelement für ungültig erklärt worden ist (z. B. wenn man mehrere Steuerelemente gleichzeitig sichtbar/unsichtbar macht).</p>

<h2 id="v1.1.27.06">1.1.27.06 - 16. Januar 2018</h2>
<p>Behoben: Hotstrings/Input bewirkten, dass tote Tasten hängen blieben (fehlerhaft seit v1.1.27.05).</p>

<h2 id="v1.1.27.05">1.1.27.05 - 16. Januar 2018</h2>
<p>Behoben: Sichtbare Input-Endungstasten bewirkten, dass eine bevorstehende tote Taste zweimal losgelassen wurde.</p>
<p>Behoben: Die Auswirkung von Hotstrings/Input darüber, wie Tab/Esc in einer toten Tastenfolge agieren sollen.</p>
<p>Behoben: A_IconFile gab einen falschen Pfad zurück, wenn eine DLL genutzt wurde.</p>
<p>Behoben: Gui in Verbindung mit +Parent wird nun  innerhalb der übergeordneten GUI in Bezug auf dem Bildschirm korrekt zentriert.</p>
<p>Behoben: Input/Hotstring-Erkennung von toten Tastenfolgen in UWP-Anwendungen (Universal Windows Platform).</p>
<p>Behoben: <code>&lt; &amp; v</code> und <code>&gt; &amp; v</code> wurden als Duplikate angesehen, und andere ähnliche Fälle. Dies betrifft benutzerdefinierte Kombinationen, wo die Präfixtaste auch ein Modifikatorsymbol ist. Zudem werden Hotkeys, die nur aus Modifikatorsymbolen und einem einzigen abschließenden Leerzeichen bestehen, wie z. B. <code>+ ::</code>, absofort als Fehler behandelt, anstatt das Leerzeichen zu ignorieren (Hotkeys erlauben kein abschließendes Leerzeichen).</p>

<h2 id="v1.1.27.04">1.1.27.04 - 10. Januar 2018</h2>
<p>Behoben: #Warn ClassOverwrite gab fehlerhafte Warnungen aus.</p>

<h2 id="v1.1.27.03">1.1.27.03 - 6. Januar 2018</h2>
<p>Verbessert: <code>Menu x, NoStandard</code> und <code>Menu x, DeleteAll</code> funktionieren nun, ohne dass der Versuch unternommen wird, das darunterliegende Win32-Menü zu zerstören. Dies macht sie funktionsfähig, sobald x eine Menüleiste oder ein Untermenü einer Menüleiste ist.</p>
<p>Der Umgang mit <code>vkXXscYYY</code> wurde überarbeitet:</p>
<ul>
  <li>GetKeyVK und GetKeyName behandeln vkXXscYYY nun als vk00scYYY.</li>
  <li>Send ist nun strenger mit {vk...} und ungültigen Suffixen, um konsistent mit den ähnlichen Änderungen von <span class="ver">[v1.1.27.00]</span> zu sein (aber sc wird weiterhin unterstützt).</li>
  <li>Codegröße reduziert.</li>
</ul>
<p>Behoben: Numerische Keys außerhalb des 32-Bit-Bereichs (aber innerhalb des 64-Bit-Bereichs) bei einigen selten auftretenden Fällen in 64-Bit-Versionen werden nun korrekt behandelt. Dies betrifft nur Klassen, die solche Nummern als Namen verwenden (aus mehreren Gründen nicht empfohlen), und einem Array-Zugriff via IDispatch mit solchen Nummern als Keys/Objektelementnamen.</p>

<h2 id="v1.1.27.02">1.1.27.02 - 1. Januar 2018</h2>
<p>Behoben: Das Laden von .bmp-Dateien als Symbole in Originalgröße.</p>
<p>Behoben: Verbundzuweisungen wie <code>Test.Eigenschaft[1] += 1</code> (fehlerhaft seit v1.1.27.01).</p>

<h2 id="v1.1.27.01">1.1.27.01 - 31. Dezember 2017</h2>
<p>Behoben: <code>++X</code> oder <code>--X</code> verursachten in Skripten ohne #NoEnv einen Programmabsturz (fehlerhaft seit v1.1.27.00).</p>
<p>Behoben: #Warn ClassOverwrite gab fälschlicherweise eine Warnung für <code>++MeineKlasse.X</code> aus.</p>
<p>Behoben: Neubelegung erlaubt nun benutzerdefinierte Tastenkombinationen wie <code>a &amp; b::c</code>.</p>
<p>Behoben: Send/Hotstrings/Input passen sich nun an das Tastaturlayout des fokussierten Steuerelements an und nicht nur an das aktive Fenster. Dies betrifft insbesondere UWP-Anwendungen wie Microsoft Edge.</p>
<p>Behoben: Hook-Hotkeys unterdrücken nun die Aktivierung des Startmenüs, die auftritt, wenn ein isoliertes "Ctrl/Shift Up" erfolgt. "Ctrl Up" kann erzeugt werden, wenn eine Umschaltung von einem Tastaturlayout mit AltGr zu einem Tastaturlayout ohne AltGr erfolgt (z. B. von UK zu US) und Ctrl währenddessen nicht gedrückt gehalten wird. Dies behebt Hotkeys wie z. B. <code>$#z::WinActivate x</code>, wenn die entsprechende Änderung solche Bedingungen verursacht.</p>
<p>Behoben: Input sammelte keine Zeichen, wenn beide UMSCHALT-Tasten unten sind.</p>
<p>Behoben: Input nutzt nun "sc" und "vk" statt "Sc" and "Vk"für Endungstasten in ErrorLevel (verursacht durch v1.1.20).</p>
<p>Behoben: <code>GetKeyName/VK/SC("vkXXscYYY")</code>, wobei YYY mit A-F beginnt (fehlerhaft seit v1.1.26).</p>

<h2 id="v1.1.27.00">1.1.27.00 - 25. Dezember 2017</h2>
<h4>Änderungen:</h4>
<p>AU3_Spy.exe wurde durch WindowSpy.ahk ersetzt.</p>
<ul>
  <li>AU3_Spy.exe wird immer noch gestartet, wenn WindowSpy.ahk nicht gefunden wird.</li>
  <li>Es folgt nun standardmäßig dem fokussierten Steuerelement und verfügt über eine Checkbox, um Fenster und Steuerelement zu veranlassen, der Maus zu folgen.</li>
  <li>Es nimmt nicht länger einen globalen Hotkey (WIN+A) in Anspruch. Halten Sie stattdessen STRG oder UMSCHALT gedrückt, um Aktualisierungen zu pausieren (lassen Sie sie nach dem Fokussieren von Window Spy wieder los).</li>
  <li>Es ist nun in Windows 10 möglich, mit ALT+TAB zu Window Spy zu wechseln, ohne dass sich die Inhalte der GUI ändern.</li>
</ul>
<p>Geändert: <a href="commands/Send.htm#AZ">a-z bedeutet nun vk41-vk5A</a>, wenn sie im Tastaturlayout fehlen, außer im Raw-Modus oder beim Senden einzelner unveränderter Zeichen. Dadurch können Hotkeys und gesendete Tastenkürzel intuitiver mit bestimmten nicht-englischen Tastaturlayouts umgehen.</p>
<p>Geändert: Send nutzt in den ANSI-Versionen nun <a href="http://msdn.microsoft.com/de-de/library/ms646310">SendInput()</a> anstelle von Alt+nnnnn, um <a href="commands/Send.htm#characters">spezielle Zeichen</a> zu senden.</p>
<p>Geändert: Es gelten nun andere Regeln zum <a href="commands/_MenuMaskKey.htm">Maskieren von ALT/WIN</a> nach dem Drücken eines Hook-Hotkeys:</p>
<ul>
  <li>Explizit gesendetes "Alt/Win Up" kann maskiert werden. Dies behebt Neubelegungen wie <code>AppsKey::RWin</code>, allerdings ist es möglich, dass Hotkeys, die zum Aktivieren des Startmenüs gedacht sind, neue Übergangslösungen erfordern.</li>
  <li>Wenn ALT/WIN logisch, aber nicht physisch unten ist, verursachen nur Hotkeys, die ALT/WIN erfordern (z. B. <code>#a::</code>, nicht <code>*a::</code>), eine Maskierung. Auf diese Weise kann eine Neubelegung oder ein Platzhalter-Hotkey das KeyUp-Ereignis senden, ohne dass es maskiert werden muss.</li>
  <li>Nicht unterdrückte Hotkeys wie z. B. <code>~#a::</code> verursachen keine Maskierung mehr, da das nicht unterdrückte KeyDown/KeyUp-Ereignis ausreicht, um ein Menü zu verhindern. Maus-Hotkeys wie <code>~*MButton::</code> unterdrücken das Startmenü nicht mehr, wenn sie mit der WIN-Taste kombiniert werden. Es kann manuell mit <code>Send {Blind}{vk07}</code> oder ähnlichem unterdrückt werden.</li>
  <li>Der Tastatur-Hook verfolgt nun Ereignisse in Bezug auf ALT/WIN, so dass die Maskierungstaste nicht mehr gesendet werden muss, wenn ALT/WIN bereits durch ein anderes Ereignis (physisch oder gesendet) maskiert wurde.</li>
</ul>
<p class="warning">Die Hotkeys <code>~LWin::</code> und <code>~RWin::</code> unterdrücken das Startmenü nicht mehr. Siehe <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a> für Details und eine Übergangslösung.</p>
<p>Hinzugefügt: VK- oder SC-Tastennamen werden nun korrekt validiert, damit Namen wie "sc01ungültig" nicht mehr als Tasten erkannt werden.</p>
<p class="warning">Skripte, die Hotkeys im Format <code>VKnnSCnnn::</code> enthalten, müssen korrigiert werden, indem man <code>SCnnn</code> entfernt, das zuvor ignoriert wurde.</p>
<p>Hilfedatei: Die Seitenleiste des HTML Help Viewer wurde durch die neue HTML5-Seitenleiste ersetzt, die von Ragnar-F entwickelt wurde.</p>

<h4>Neue Features:</h4>
<ul>
<li>Hinzugefügt: Neue interne Funktionen <a href="commands/Math.htm#Min">Min</a>/<a href="commands/Math.htm#Max">Max</a>. [PR #84 von Ragnar-F]</li>
<li>Hinzugefügt: <a href="Variables.htm#Args">A_Args</a> als Alternative zu den nummerierten Variablen.</li>
<li>Hinzugefügt: <a href="Functions.htm#ForceLocal">Force-Local-Modus</a> für Funktionen.</li>
<li>Hinzugefügt: <a href="commands/_Warn.htm#ClassOverwrite">#Warn ClassOverwrite</a>.</li>
<li>Hinzugefügt: <a href="commands/Send.htm#SendText">{Text}-Modus</a> für Send und <a href="Hotstrings.htm#T">T-Option</a> für Hotstrings. Dieser Modus ist so ähnlich wie der Raw-Modus, nur zuverlässiger.</li>
<li>Hinzugefügt: <a href="commands/Send.htm#DownR">{<em>Taste</em> <strong>DownR</strong>}</a>, das nun von der Neubelegung genutzt wird, um Probleme mit <code>AppsKey::RWin</code> und ähnlichem zu beheben.</li>
</ul>

<h4>Fehlerbehebungen:</h4>
<ul>
<li>Behoben: Beim Laden von Symbolen wird nicht mehr standardmäßig ID 0 verwendet, wenn der Index ungültig ist.</li>
<li>Behoben: VK↔SC-Umbelegung von PrintScreen. SC→VK war bereits unter Vista und höher korrekt.</li>
<li>Behoben: Das Hotkey-Steuerelement gab in einigen Fällen nicht den Namen, sondern scXXX zurück.</li>
<li>Behoben: ListVars verursachte einen Absturz, wenn ein ByRef-Parameter auf eine Variable verweist, die ein Objekt enthält. [PR #86 von HotKeyIt]</li>
<li>Behoben: Einige (sehr unwahrscheinliche) Speicherlecks.</li>
<li>Behoben: Menü-Handles wurden nicht freigegeben, wenn nur die voreingestellten Menüpunkte genutzt werden.</li>
<li>Behoben: Der Standard-Menüpunkt wurde nicht in fetter Schrift dargestellt, wenn er ein Untermenü und einen Win32-Menü-Handle hat.</li>
<li>Behoben: Send verwendet nun den korrekten Modifikatorstatus bei Unicode-Zeichen.</li>
<li>Behoben: <code>ControlSend {u n}</code>, wobei u Unicode ist, das n-mal gesendet werden soll, nicht nur 1-mal.</li>
<li>Behoben: Kein inkonsistentes Verhalten mehr von ALTGR zwischen verschiedenen Betriebssystemversionen. Bezogen auf <code>RAlt::</code>, das wiedereinmal das System unter Windows 10 dazu veranlasste, die linke STRG-Taste  "loszulassen", wie es vor v1.1.26.01 der Fall war (aber im Gegensatz zu den alten Versionen verhindert es, dass das KeyUp-Ereignis der rechten ALT-Taste das aktive Fenster erreicht). Diese Änderung sollte sich nicht auf Layouts ohne ALTGR auswirken.</li>
<li>Behoben: <code>Menu Tray, Icon</code>, SB_SetIcon und LoadPicture mit einer Symbol-Option ungleich 0 erlauben nun Bitmaps (aber wandeln um, falls nötig).</li>
<li>Behoben: Menüpunkte verschwinden nicht mehr, wenn ein Cursor als Menüpunktsymbol gesetzt ist.</li>
<li>Verbessert: Das Starten von Window Spy und der Hilfedatei:
<ul>
  <li>Wenn AutoHotkey installiert ist, aber die aktuelle ausführbare Datei sich in einem anderen Verzeichnis befindet (z. B. portabel), wird die installierte Datei nicht mehr bevorzugt, da es sich um die falsche Version handeln kann. Es kann immer noch als Fallback verwendet werden.</li>
  <li>Wenn die Datei nicht gestartet werden kann, wird die Fehlermeldung im Dialogfenster angezeigt, nicht in der Titelleiste.</li>
</ul></li>
<li>Behoben: Einzeilige Hotkeys mit Ausdrücken, die mit <code>sc</code> oder <code>vk</code> beginnen.</li>
<li>Behoben: Die Hotkey-Modifikatoren <code>&gt;</code>/<code>&lt;</code> erlaubten, dass beide Tasten gedrückt werden konnten. Zum Beispiel konnte <code>&lt;^A</code> fälschlicherweise durch LCtrl+RCtrl+A ausgelöst werden, wodurch der Hotkey <code>&lt;&gt;^A</code> nicht funktionieren konnte.</li>
<li>Behoben: Automatisch-ersetzende Hotstrings fügten den direkt geschriebenen Text "{Raw}" in einigen Fällen ein (insbesondere, wenn der Ersatztext <code>{Raw}</code> enthält und die Optionen O, R und * nicht verwendet wurden).</li>
<li>Behoben: Einige Hotkeys nutzten den Hook nicht, wenn sie mit einem Platzhalter-Hotkey übereinstimmen, abhängig von der Reihenfolge der Definition.</li>
<li>Behoben: KeyDown-Hotkeys werden nun auf "reg" zurückgesetzt, wenn sie nur "k-hook" waren, weil ein entsprechender KeyUp-Hotkey deaktiviert wurde. (Vor v1.1.07.03 geschah dies bereits, aber der KeyDown-Hotkey wurde nie auf "k-hook" gesetzt, wenn er nach dem KeyUp definiert wurde.)</li>
<li>Behoben: Hook-Hotkeys ignorieren nun Modifikatoränderungen, die mit <code>Send !^+#{key}</code> oder beim Senden von Unicode-Zeichen vorgenommen wurden. Dies stellt Send wieder her, wie es vor v1.1.06 bei SendLevel 0 war, behält aber das v1.1.06+ Verhalten bei SendLevel &gt;= 1 bei, so dass Send die richtigen Hotkeys auslösen kann.</li>
<li>Verbessert: Die Chancen wurden erhöht, dass Send von einem "reg"-Hotkey wie <code>^m::Send x</code> den Status des Modifikators wiederherstellt, wenn Send zum ersten Mal aufgerufen wird. Dadurch ist es unwahrscheinlicher, dass beim erstmaligen Drücken ein anderes (und unerwartetes) Ergebnis erzeugt wird, wie z. B. xmmm statt xxxx.</li>
</ul>

<h2 id="v1.1.26.01">1.1.26.01 - 16. Juli 2017</h2>
<p>Behoben: RegDelete (ohne Parameter) schlug fehl, wenn A_LoopRegSubKey leer ist, z. B. beim Enumerieren von Keys direkt unter dem Root-Key.</p>
<p>Behoben: <code>RAlt/LAlt::</code> konnte manchmal die Aktivierung des Menüs nicht verhindern, nachdem der Benutzer mit Alt-Tab das Fenster verließ und es reaktivierte.</p>
<p>Behoben: Die SC-zu-VK-Konvertierung für Multimediatasten, PrintScreen, Pause, LWin und RWin funktioniert nun korrekt, mit der Ausnahme, dass Multimediatasten, PrintScreen und CtrlBreak unter Windows 2000 und XP immer noch fehlerhaft konvertiert werden.</p>
<p>Behoben: Die VK-zu-SC-Konvertierung für Multimediatasten, CtrlBreak und Pause funktioniert nun korrekt.</p>
<p>Behoben: Wartende Befehle wie RunWait protokollieren nur noch Zeilen für ListLines, wenn gezeigt werden muss, dass sie immer noch warten; also wenn sie nach einer Unterbrechung fortgesetzt werden, die andere Zeilen protokolliert hat.</p>

<h2 id="v1.1.26.00">1.1.26.00 - 10. Juni 2017</h2>
<p>Geändert: ListVars zeigt Variablen, die Objekte enthalten, absofort in einem anderen Format an. Der Klassenname des Objekts wird nicht angezeigt.</p>
<p>Hinzugefügt: "Class" und "CLSID" Modi für ComObjType().</p>
<p>Überarbeitet: Deutlich reduzierte Codegröße im Prozess durch Überarbeitung der vom Debugger angezeigten Klassennamen.</p>
<p>Überarbeitet: Reduzierte Codegröße durch Überarbeitung von FileSetAttrib, FileSetTime und FileDelete. Deren Funktionsweise sollte sich nicht geändert haben.</p>
<p>Andere kleinere Optimierungen an der Codegröße gemacht.</p>
<p>Behoben: GetKeySC() funktioniert nun korrekt mit den Tastennamen Esc, Escape, ScrollLock und PrintScreen.</p>
<p>Behoben: Die Hotstring-Worterkennung funktioniert nun korrekt mit Wörtern, die Zeichen enthalten, die keinen Platz verbrauchen, wie z. B. arabische diakritische Zeichen.</p>

<h2 id="v1.1.25.02">1.1.25.02 - 13. Mai 2017</h2>
<p>Behoben: GUI-Optionszeichenketten waren nach einer Fehlermeldung permanent gekürzt.</p>
<p>Behoben: Namen von Eigenschaften und Klassenuntervariablen können nun ASCII-fremde Zeichen enthalten.</p>
<p>Behoben: Der Operator <code>new</code> wurde überarbeitet, so dass __New via Throw oder Exit beendet werden kann.</p>

<h2 id="v1.1.25.01">1.1.25.01 - 5. März 2017</h2>
<p>Behoben: Absofort erlaubt Send andere Skripte, auf Zustandsänderungen von Modifikatoren zu reagieren, die direkt danach ein Sonderzeichen haben, wie z. B. beim Loslassen von UMSCHALT in <code>Send Mört</code>.</p>

<h2 id="v1.1.25.00">1.1.25.00 - 4. März 2017</h2>
<p>Hinzugefügt: <a href="commands/Hotkey.htm#IfFn">Hotkey, If, % Funktionsobjekt</a>.</p>
<p>Behoben: Website-Adresse im Help-Menü.</p>

<h2 id="v1.1.24.05">1.1.24.05 - 3. Februar 2017</h2>
<p>Behoben: WinSet AlwaysOnTop/Trans/TransColor funktioniert nun bei Fenstern mit 0 ExStyle.</p>

<h2 id="v1.1.24.04">1.1.24.04 - 17. Dezember 2016</h2>
<p>Behoben: <code>File.Read<i>Num</i>()</code> griff wiederholt auf alte Daten zu, wenn ein vorheriges <code>File.Read()</code> sein Leseprozess am Ende des Puffers gestoppt hat.</p>
<p>Verbessert: Puffer wird besser genutzt, wenn <code>File.Read()</code> das Ende der gepufferten Daten erreicht hat.</p>
<p>Behoben: <code>GuiControl +Password</code> benutzt in Windows XP und höher nun standardmäßig den schwarzen Punkt als Maskierungszeichen.</p>
<p>Behoben: <code>GuiControl +/-Password</code> bewirkt nun, dass das Steuerelement sofort neu gezeichnet wird.</p>

<h2 id="v1.1.24.03">1.1.24.03 - 19. November 2016</h2>
<p>Behoben: COM-Ausnahmefehlermeldungen enden nicht mehr mit <code>`r</code>.</p>
<p>Behoben: <code>{U+x}</code> unterstützt nun Ergänzungszeichen (x &gt; 0xFFFF).</p>
<p>Behoben: Klasseneigenschaften ohne get{} geben nicht mehr das interne Property-Objekt, sondern  einen leeren Wert zurück, wenn die Klasse ein base hat, das keinen Wert für die Eigenschaft definiert. Eigenschaften in Klassen ohne base verhielten sich bereits korrekt.</p>
<p>Behoben: Die Hintergrundfarbe von Steuerelementen innerhalb eines Tab3-Steuerelements waren falsch, wenn die visuellen Styles im System deaktiviert sind (z. B. Windows Classic).</p>
<p>Behoben: Das Beenden eines Threads in Funktionen, die direkt von einem Ereignis aufgerufen werden, wurde korrigiert (z. B. OnExit-Funktionen). Dieser Bug hatte keine nennenswerte Auswirkung, außer im Entwicklungszweig v2-alpha.</p>
<p>Behoben: Der Debugger erkennt eine Trennung nun sofort (also wenn ein Klient zum Beispiel ohne Aufrufen von Stopp/Abtrennen terminiert).</p>
<p>Behoben: Der Debugger behandelt <code>property_get -m 0</code> absofort als "unlimitiert", gemäß der DBGp-Spezifikation.</p>
<p>Behoben: Der Debugger erwartet nun base64 bei <code>property_set -t integer/float</code>, gemäß der DBGp-Spezifikation.</p>

<h2 id="v1.1.24.02">1.1.24.02 - 13. Oktober 2016</h2>
<p>Hinzugefügt: Option <a href="Program.htm#Installer_uiAccess">Run with UI Access</a> (mit UI-Access ausführen) für den Installer.</p>
<p>Hinzugefügt: Dokumentation für <a href="commands/GuiControls.htm#Tab_Autosize">Automatische Größenanpassung</a> von Tab3.</p>
<p>Folgende Tab3-Bugs wurden behoben:</p>
<ul>
<li>Automatische Größenanpassung wurde nicht beim ersten Aufruf von <a href="commands/Gui.htm#Show">Gui Show</a> ausgelöst, wenn die <code>AutoSize</code>-Option oder <code>w</code>- und <code>h</code>-Option benutzt wurden.</li>
<li>Wenn ein Tab3-Steuerelement bei der automatischen Größenanpassung leer ist, wird es nun seine Standardgröße beibehalten, anstatt unbrauchbar zu werden.</li>
<li>Absofort erfolgt eine automatische Größenanpassung vor dem Erstellen eines anderen Tab-Steuerelements, als hätte man <a href="commands/GuiControls.htm#TabCmd">Gui Tab</a> aufgerufen.</li>
<li>Automatische Größenanpassung schlug fehl, wenn das Tab-Steuerelement negative Bildschirmkoordinaten hat.</li>
<li>Das Verstecken eines Tab3-Steuerelements via GuiControl wird nun auch sein Dialog/Hintergrund verstecken.</li>
</ul>
<p>Behoben: OnMessage wird lParam bei 32-Bit nun als vorzeichenlos übergeben.</p>
<p>Behoben: <code>Gui Name :</code> erlaubt nun Leerzeichen vor dem Doppelpunkt.</p>
<p>Behoben: Gui- oder GuiControl-Identifizierung via HWND kann nun mit einem negativen Wert erfolgen.</p>
<p>Behoben: ComObject unterdrückt nun Fehler, die durch <a href="commands/ComObjConnect.htm">Trennung von Ereignissen</a> ausgelöst werden, nachdem das Skript das Objekt freigegeben hat.</p>
<p>Behoben: Gui Show verursachte eine Verkleinerung des Fensters, wenn es eine mehrzeilige Menüleiste hat.</p>
<p>Behoben: <code>LV_InsertCol(n, Breite)</code> bewirkte, dass sich der ListView-Scrollbalken auf einigen OS-Versionen nicht aktualisieren konnte.</p>
<p>Optimiert: Codegröße von FileRecycleEmpty.</p>

<h2 id="v1.1.24.01">1.1.24.01 - 2. August 2016</h2>
<p>Geändert: <code>Hotkey, If, Ausdruck</code> löst nun einen Fehler aus, wenn der nicht-dokumentierte dritte Parameter benutzt wird.</p>
<p>Behoben: <code>&amp;&amp;</code>, <code>||</code> und der ternäre Operator geben nun jedes Objekt frei, das als Bedingung benutzt wurde, wie bei <code>if (a.Unterobjekt &amp;&amp; b)</code>.</p>
<p>Behoben: Gui/GuiControl konnte Radio-Buttons innerhalb eines Tab3-Steuerelements nicht markieren.</p>
<p>Behoben: FileCreateShortcut's Verknüpfung-Parameter kann in Windows 10 absofort einen relativen Pfad enthalten.</p>
<p>Behoben: Ein Tab3-Steuerelement mit aktivierter Theme-Option wird die benutzerdefinierte Farbe seiner Steuerelemente nicht länger überschreiben.</p>
<p>Behoben: Der Debugger behandelte Ablaufsteuerungsbefehle in einigen bestimmten Fällen nicht korrekt.</p>

<h2 id="v1.1.24.00">1.1.24.00 - 22. Mai 2016</h2>
<h4>Gravierende Änderungen:</h4>
<p>Der Versuch, eine leere Variable oder einen Ausdruck, der zu einem leeren Wert führt, an SetTimer's <a href="commands/SetTimer.htm#Label"><em>Label</em></a>-Parameter zu übergeben, wird absofort als Fehler eingestuft. Dieser Parameter darf weder leer sein noch <a href="commands/SetTimer.htm#OmitLabel">fehlen</a>.</p>
<p><a href="commands/SetTimer.htm#once">Einmalig-laufende Timer</a> werden nach ihrem Durchlauf automatisch gelöscht, wenn sie mit einem via Skript erstellten Objekt verbunden sind. Dadurch kann das Objekt freigegeben werden, wenn es vom Skript nicht länger benötigt wird, aber das bedeutet auch, dass die <em>Periode</em> und <em>Priorität</em> des Timers verworfen werden.</p>
<p>SetTimer, Hotkey, GuiControl und Menu überprüfen nun die minimale Parameteranzahl von Funktionen, die via Verweis übergeben wurden (nicht nur via Namen, wie in früheren Versionen). Wenn die Funktion zu viele Parameter benötigt, wird ein Fehler ausgelöst oder ErrorLevel gesetzt (je nach Bedarf).</p>
<h4>Abwärtskompatible Änderungen:</h4>
<p>Wenn SetTimer's <a href="commands/SetTimer.htm#Label"><em>Label</em></a>-Parameter <a href="commands/SetTimer.htm#OmitLabel">fehlt</a> und <a href="Variables.htm#ThisLabel">A_ThisLabel</a> leer ist, wird der aktuelle Timer (sofern vorhanden) verwendet.</p>
<h4>Neue Features:</h4>
<p>Hinzugefügt: Neue Tab-Steuerelementart <a href="commands/GuiControls.htm#Tab">Tab3</a>, das viele Probleme löst, die bei den anderen Tab-Steuerelementarten vorkommen.</p>
<h4>Fehlerbehebungen:</h4>
<p>Behoben: GuiControl aktualisiert nun Steuerelemente beim Hinzufügen/Löschen von Tabs. Im Einzelnen:</p>
<ul>
  <li>Die Auswahl eines neuen Tabs mit <code>||</code> funktioniert nun korrekt.</li>
  <li>Das Löschen von allen Tabs führt nun dazu, dass die Steuerelemente des früheren Tabs unsichtbar gemacht werden.</li>
</ul>
<p>Behoben: <code>+Disabled</code>/<code>+Hidden</code> verloren ihren Effekt bei Steuerelementen in einem Tab.</p>
<p>Behoben: Deaktivierte Tab-Steuerelemente ignorieren absofort STRG+TAB.</p>
<p>Behoben: <code>Gui Tab</code> ohne Parameter beginnt nun eine neue Radiogruppe, falls zutreffend. <code>Gui Tab</code> mit Parametern hatte bereits diesen Effekt.</p>
<h2 id="v1.1.23.07">1.1.23.07 - 20. Mai 2016</h2>
<p>Behoben: <code>Menu x, Insert, y, z, % Objekt</code> verwendet nun das Objekt, anstatt es zu ignorieren.</p>
<p>Behoben: <code>Menu x, Add, :item text, % Objekt</code> verwendet nun das Objekt, anstatt nach einem Untermenü zu suchen.</p>

<h2 id="v1.1.23.06">1.1.23.06 - 15. Mai 2016</h2>
<p>Behoben: <code>break label</code> ließ das Programm abstürzen, wenn diese Anweisung direkt in ihrer Zielschleife verschachtelt wurde.</p>

<h2 id="v1.1.23.05">1.1.23.05 - 27. März 2016</h2>
<p>Behoben: InputBox, MsgBox, FileSelectFile und FileSelectFolder sendeten ein ungewolltes ALT-UP, wenn ALT unten war. Der Grund war ein Fehler mit dem STRG/UMSCHALT-Workaround in v1.1.22.01.</p>
<p>Verbessert: Der STRG/UMSCHALT-Workaround "maskiert" nicht länger unnötigerweise die WIN-Taste, wenn STRG, UMSCHALT oder ALT unten ist.</p>

<h2 id="v1.1.23.04">1.1.23.04 - 26. März 2016</h2>
<p>Behoben: LV_Modify unterstützt nun das Weglassen der Optionen, wie bei <code>LV_Modify(r,, Spalte1)</code>.</p>

<h2 id="v1.1.23.03">1.1.23.03 - 12. März 2016</h2>
<p>Behoben: __Delete-Meta-Funktionen hatten Ausnahmen fälschlicherweise unterdrückt oder vorzeitig ausgelöst, wenn sie während der Ausnahmeweitergabe aufgerufen worden sind.</p>
<p>Behoben: Ladezeiterkennung von Funktionsaufrufen, wo ein Pflichtparameter leer ist, wie bei <code>fn(x,,y)</code>.</p>

<h2 id="v1.1.23.02">1.1.23.02 - 12. März 2016</h2>
<p>Behoben: RegDelete löschte den kompletten Key, anstatt den Standardwert.</p>
<p>Codepflege; kleine Verbesserung der Code-Größe.</p>

<h2 id="v1.1.23.01">1.1.23.01 - 24. Januar 2016</h2>
<p>Behoben: Theoretisches Problem beim Laden von Skripten mit merkwürdigen/sehr langen Pfaden.</p>
<p>Ahk2Exe: Unicode in kompilierten Skripten behoben (fehlerhaft seit v1.1.23.00).</p>

<h2 id="v1.1.23.00">1.1.23.00 - 16. January 2016</h2>
<p>Hinzugefügt: Unterbefehl <a href="commands/Menu.htm#Insert">Menu Insert</a>.</p>
<p>Hinzugefügt: <a href="commands/MenuGetHandle.htm">MenuGetHandle()</a>.</p>
<p>Hinzugefügt: <a href="commands/MenuGetName.htm">MenuGetName()</a>.</p>
<p>Hinzugefügt: Menüpunktoptionen: Radio, Right, Break und BarBreak.</p>
<p>Verbessert: Der Menu-Befehl erlaubt das Identifizieren von Menüpunkten anhand ihrer Position: <code>1&amp;</code></p>
<p>Hinzugefügt: <a href="commands/LoadPicture.htm">LoadPicture()</a>.</p>
<p>Hinzugefügt: <a href="misc/ImageHandles.htm">hicon/hbitmap: Syntax</a>, um Handles an Befehlen zu übergeben, die normalerweise Bilder aus einer Datei laden.</p>
<p>Hinzugefügt: Neue interne Variablen: A_CoordModeToolTip/Pixel/Mouse/Caret/Menu, A_DefaultGui, A_DefaultListView, A_DefaultTreeView, A_KeyDelayPlay, A_KeyDuration/Play, A_MouseDelayPlay, A_SendLevel, A_SendMode und A_StoreCapsLockMode.</p>
<p>Hinzugefügt: Die Hotkey-Option <code>Ix</code>, um die Eingabestufe der Hotkey-Variante auf x zu setzen.</p>
<p>Verbessert: Picture-Steuerelement unterstützt nun BackgroundTrans in Verbindung mit Symbolen.</p>
<p>Verbessert: Das Picture-Steuerelement flackert weniger, wenn große Bilder geladen werden.</p>
<p>Kleine Optimierungen am Menu-Code und beim Nachschlagen von internen Vars.</p>
<p>Behoben: Umwandlungen von Menüpunkten zu Trennlinien, und umgekehrt.</p>
<p>Behoben: A_ThisMenuItemPos unterstützt nun doppelte Menüpunktnamen.</p>
<p>Behoben: Untermenüs wurden manchmal nicht neu erstellt, nachdem ein Menü gelöscht wurde.</p>
<p>Behoben: AutoHotkeyXXX.exe öffnet nun AutoHotkey.chm, und nicht AutoHotkeyXXX.chm.</p>

<h2 id="v1.1.22.09">1.1.22.09 - 11. November 2015</h2>
<p>Behoben: Einige Probleme mit SetTimer Delete.</p>
<ul>
  <li>KeyHistory's Zeitzähler enthielt fälschlicherweise gelöschte Timer.</li>
  <li>Das Aufrufen von KeyHistory innerhalb eines Threads, gestartet über einen Timer, ließ das Skript abstürzen, wenn der Timer gelöscht, aber nicht ausgeschaltet worden ist.</li>
  <li>Das Löschen des aktuell erstellten Timers ließ danach erstellte Timer nicht funktionieren, es sei denn, ALLE Timer wurden gelöscht.</li>
</ul>

<h2 id="v1.1.22.08">1.1.22.08 - 11. November 2015</h2>
<p>Behoben: For-Loop übergibt die Kontrolle nun korrekt, wenn _NewEnum/Next eine Ausnahme auslöst.</p>
<p>Behoben: Finally löst die ausstehende Ausnahme erst aus, wenn all seine Anweisungen ausgewertet wurden, und nicht schon beim ersten Aufruf einer internen Funktion.</p>
<p>Behoben: Erkennung von ungültigen Sprüngen aus Finally-Blöcken während der Ladezeit (fehlerhaft seit v1.1.20).</p>

<h2 id="v1.1.22.07">1.1.22.07 - 27. September 2015</h2>
<p>Behoben: Gui-Steuerelement-Optionen <code>w-1</code> und <code>h-1</code> schlugen fehl, wenn DPI größer als 150 % war und das Gui kein <code>-DPIScale</code> hatte.</p>
<p>Behoben: <code>~<i>Taste</i> up</code>-Hotkeys werden absofort kein automatisches <code>Send {<i>Taste</i> down}</code> mehr durchführen. Diese Problematik trat nur auf, wenn der Hotkey eingeschaltet wurde, nachdem die Taste nach unten gedrückt wurde.</p>
<h2 id="v1.1.22.06">1.1.22.06 - 13. September 2015</h2>
<p>Behoben: Input und Hotstrings erkennen nun Unicode/Nicht-Tasten-Zeichen-Ereignisse.</p>
<p>Behoben: Die Auto-Größenanpassung von Edit-Steuerelementen schließt die letzte Zeile nun mit ein, wenn sie leer ist.</p>
<p>Behoben: Out-of-Memory-Handhabung in ComObj-Funktionen.</p>
<p>Behoben: ComObjArray ignoriert absofort überschüssige Parameter, anstatt ein Absturz zu verursachen (gilt nur für dynamische Aufrufe).</p>
<p>Behoben: GuiControl fügt Tabs nun an (anstatt sie davor zu setzen), so wie es auch dokumentiert ist.</p>
<p>Behoben: XP64-Unterstützung.</p>

<h2 id="v1.1.22.05">1.1.22.05 - 10. September 2015</h2>
<p>Behoben: Symbole mit nicht-numerischen IDs werden nicht länger in sub-optimaler Qualität geladen.</p>
<p>Behoben: Gui Destroy gab Funktionsobjekte nicht frei, die mit der Option +g gesetzt worden sind.</p>
<p>Behoben: Gui Show wird nicht länger versuchen, ein untergeordnetes GUI gewaltsam zu aktivieren.</p>
<p>Behoben: Feststell-/Num-/Rollen-Status wird nun gesetzt, während die Taste unten ist.</p>
<p>Behoben: Gui Color verursachte falsche Textfarbe (üblicherweise schwarz).</p>
<p>Geändert: Gui Show wurde geändert, um Widrigkeiten beim sofortigen Ausführen von GuiSize zu verbessern.</p>
<p><em>Für Entwickler:</em></p>
<ul>
	<li>Projekt-Config wurde modifiziert, um mehr VC++-Versionen zu unterstützen.</li>
	<li>Einige Kompilierungs-Warnungen von VC++ 2015 behoben.</li>
	<li>64-Bit-Binaries werden nun mit VC++ 2015 kompiliert. 32-Bit-Binaries verwenden weiterhin VC++ 2010.</li>
</ul>
<h2 id="v1.1.22.04">1.1.22.04 - 19. August 2015</h2>
<p>Behoben: ObjRawSet() kann absofort nichts zurückgeben.</p>
<p>Hinzugefügt: supportedOS-Tag für Windows 10 im EXE-Manifest (verhindert einige Probleme mit dem Programmkompatibilitätsassistenten und Ähnliches).</p>
<p>Hinzugefügt: Erkennung von Syntaxfehlern nach ")" in einer Funktionsdeklaration.</p>

<h2 id="v1.1.22.03">1.1.22.03 - 12. Juli 2015</h2>
<p>Behoben: A_EndChar gab einen gekürzten Wert für Unicode-Endungszeichen zurück.</p>
<p>Kleine Implementationsänderungen:</p>
<ul>
	<li>Geändert: A_Language verwendet nun GetSystemDefaultUILanguage().</li>
	<li>Überarbeitet: Das Starten von Window Spy/der Hilfe-Datei über das Tray-Menü wurde überarbeitet, um die Wiederverwendung von Code zu verbessern.</li>
	<li>Optimiert: Handhabung von Gui/Menu/Hotkey/Hotstring/OnClipboard-Meldungen (geringfügig).</li>
</ul>

<h2 id="v1.1.22.02">1.1.22.02 - 27. Mai 2015</h2>
<p>Behoben: TreeView löst nicht länger <code>*</code>-Ereignisse für unbekannte Benachrichtigungen aus.</p>
<p>Behoben: Kein Absturz/schlechtes Verhalten mehr, wenn ein Timer sich selbst löscht.</p>
<p>Behoben: RWin-up war <a href="commands/_MenuMaskKey.htm">maskiert</a> in einigen seltenen Fällen, wo LWin-up es nicht gewesen wäre.</p>
<h2 id="v1.1.22.01">1.1.22.01 - 24. Mai 2015</h2>
<p>Behoben: Text/Edit/Button-Steuerelemente kompensieren nun bei ihrer Größenanpassung eventuell hinausragende Zeichen.</p>
<p>Behoben: Registry-Befehle erlauben nun ein <code>:</code> in ihrem Subkey, wenn er mit dem Rootkey kombiniert wird.</p>
<p>Behoben: Hotkey-Priorisierung berücksichtigt absofort Modifikatoren.</p>
<p>Überarbeitet: Else/Try/Catch/Finally unterstützen nun so etwas wie <code>Hotkey::Try Befehl</code>.</p>
<p>Hinzugefügt: Eine Übergangslösung für Skript-Dialogfenster, die so taten, als wurde STRG oder UMSCHALT gedrückt, nachdem sie vom Tastatur-Hook blockiert wurden.</p>

<h2 id="v1.1.22.00">1.1.22.00 - 1. Mai 2015</h2>
<p>Hinzugefügt: Absofort erfolgt SetErrorMode(SEM_FAILCRITICALERRORS) beim Starten des Programms, um System-Fehlermeldungen wie "Es befindet sich kein Datenträger im Laufwerk" zu unterdrücken. Das Aufrufen von Drive oder DriveGet hat nicht länger Einfluss auf den Fehlermodus des Prozesses.</p>
<p>Geändert: MonthCal-Steuerelemente haben standardmäßig nun Tabstopp in Windows Vista oder höher.</p>
<p>Verbessert: ComObjConnect verwendet nun IProvideClassInfo, sofern verfügbar.</p>
<p>Behoben: Definitionen von Methoden/Eigenschaften, die auf derselben Zeile nach einer geschweiften Endklammer erfolgen, funktionieren nun korrekt.</p>
<p>Behoben: Die automatische Größenanpassungen von Text/Link-Steuerelementen kompensieren nun den +Border-Style (WS_BORDER).</p>
<p>Behoben: <code>Break <i>N</i></code> bei einem Loop, das unterhalb von If/Else/Try/Catch verwendet wird.</p>

<h2 id="v1.1.21.03">1.1.21.03 - 12. April 2015</h2>
<p>Behoben: Erkennung von Namenskonflikten zwischen Eigenschaften und Methoden.</p>

<h2 id="v1.1.21.02">1.1.21.02 - 4. April 2015</h2>
<p>Behoben: <code>OnMessage(meld, fnobj, 0)</code> wird nichts mehr tun, wenn <em>fnobj</em> noch nicht registriert ist.</p>

<h2 id="v1.1.21.01">1.1.21.01 - 3. April 2015</h2>
<p>Behoben: Bei StrReplace() kann der Ersatztext-Parameter nun weggelassen werden.</p>
<p>Behoben: Klassenvariablen können nun ASCII-fremde Namen haben.</p>

<h2 id="v1.1.21.00">1.1.21.00 - 28. März 2015</h2>
<p>Hinzugefügt: <a href="commands/LoopReg.htm">Loop, Reg, Rootkey[\Key, Modus]</a>.</p>
<p>Hinzugefügt: <a href="commands/LoopFile.htm">Loop, Files, Dateimuster [, Modus]</a>.</p>
<p>Geändert: <em>EingabeVar</em>-Parameter können absofort <a href="Variables.htm#percent-space">% Ausdruck</a> enthalten (außer bei If-Befehlen).</p>
<p><a href="objects/Object.htm">Object-Methoden</a> überarbeitet:</p>
<ul>
  <li>Hinzugefügt: Object.InsertAt(), Object.Push() und ObjRawSet().</li>
  <li>Hinzugefügt: Object.Delete(), Object.RemoveAt() und Object.Pop().</li>
  <li>Hinzugefügt: Object.Length().</li>
</ul>
<p>Hinzugefügt: <a href="commands/Ord.htm">Ord()</a> und Unterstützung von Ergänzungszeichen (&gt;0xFFFF) für Chr().</p>
<p>Hinzugefügt: <a href="commands/StringReplace.htm">StrReplace()</a>.</p>
<p>Entfernt: Der veraltete und undokumentierte 5-Parameter-Modus von RegRead, der ausschließlich für die AutoIt-v2-Kompatibilität galt (der zusätzliche Parameter war unbenutzt).</p>
<p>Geändert: Die Rootkey- und Subkey-Parameter von <a href="commands/RegRead.htm">RegRead</a>, <a href="commands/RegWrite.htm">RegWrite</a> und <a href="commands/RegDelete.htm">RegDelete</a> können nun kombiniert werden.</p>

<h2 id="v1.1.20.03">1.1.20.03 - 21. März 2015</h2>
<p>Behoben: MouseGetPos (AusgabeSteuerelement), GuiContextMenu und GuiDropFiles (A_GuiControl) ignorieren nicht länger deaktivierte Steuerelemente [fehlerhaft seit v1.1.20.00].</p>

<h2 id="v1.1.20.02">1.1.20.02 - 11. März 2015</h2>
<p>Behoben: Add-First-Modus von OnMessage.</p>
<p>Behoben: A_OSVersion bei unbekannten Betriebssystemen in x64-Builds.</p>
<p>Behoben: ExitApp hebt die Pause des Skripts auf, bevor Objekte freigegeben werden, falls eine __Delete-Meta-Funktion aufgerufen wird.</p>
<p>Triviale Optimierungen und Codeanpassung.</p>

<h2 id="v1.1.20.01">1.1.20.01 - 10. März 2015</h2>
<p>Die Änderungen in v1.1.20.00 bzgl. des Speicherns und Wiederherstellens von ErrorLevel bei Thread-Unterbrechung wurden rückgängig gemacht, um unbeabsichtigte Folgen entgegenzuwirken.</p>
<ul>
  <li>ErrorLevel wird nicht zurückgesetzt oder gelöscht, wenn ein neuer Thread startet. Stattdessen behält es den Wert bei, den es im unterbrochenen Thread hatte, wie in v1.1.19 und älter.</li>
  <li>Wenn ErrorLevel ein Objekt enthält, und der Thread unterbrochen wird, wird das Objekt beim Fortsetzen des Threads mit einer leeren Zeichenkette ersetzt, wie in v1.1.19 und älter.</li>
  <li>Wenn ErrorLevel eine Zeichenkette länger als 127 Zeichen enthält, wird sie beim Fortsetzen des Threads gekürzt, wie in v1.1.19 und älter.</li>
</ul>
<p>Erneut behoben: Timer verursachten manchmal, dass ErrorLevel in hexadezimal formatiert wurde.</p>
<p>Behoben: Klassenmethoden behalten einen gezählten Verweis auf die Klasse.</p>

<h2 id="v1.1.20.00">1.1.20.00 - 8. März 2015</h2>
<h4>Neue Features:</h4>
<p>Erweitert: Hotkey-, Menu-, SetTimer-, Gui- und Gui-Steuerelement-Ereignisse akzeptieren nun <a href="misc/Labels.htm#Functions">eine Funktion anstelle eines Labels</a>, wenn kein Label gefunden wird.</p>
<p>Erweitert: Hotkey-, Menu-, SetTimer-, Gui- und Gui-Steuerelement-Ereignisse akzeptieren nun ein <a href="objects/Functor.htm">Funktionsobjekt</a>. Hinzugefügt: Delete-Unterbefehl für SetTimer zum Freigeben des Objekts.</p>
<p>Erweitert: Bei <a href="commands/OnMessage.htm">OnMessage()</a> ist es nun möglich, dass eine beliebige Anzahl von Funktionen oder Funktionsobjekten eine einzelne Meldung überwachen können.</p>
<p>Hinzugefügt: <a href="commands/OnExit.htm">OnExit()</a> und <a href="commands/OnClipboardChange.htm">OnClipboardChange()</a>, die ein Funktionsname oder -objekt akzeptieren.</p>
<p>Hinzugefügt: Hotkey-Label können nun <a href="Hotkeys.htm#Function">auf eine Funktionsdefinition verweisen</a>.</p>
<p>Hinzugefügt: <a href="commands/Format.htm#ULT">U/L/T-Modifikatoren</a> zum Umwandeln in Groß-/Kleinschreibung mit Format().</p>
<p>Hinzugefügt: <a href="commands/Input.htm#E">E-Option</a> für den Input-Befehl, um Endungszeichen als Zeichen statt als Tastencode zu behandeln.</p>
<p>Hinzugefügt: Unterstützung von ** (stderr) in FileAppend.</p>
<p>Hinzugefügt: <a href="commands/ObjBindMethod.htm">ObjBindMethod(obj, method, args*)</a> und <a href="objects/Func.htm#Bind">Func.Bind(args*)</a>. </p>

<h4>Änderungen:</h4>
<p>Geändert: AHK verhält sich nun anders, wenn das Hauptskript nicht gefunden wird:</p>
<ul>
  <li>Wenn kein Skript angegeben wurde und keine Standard-Skript-Dateien gefunden wurden, wird die neue <a href="Welcome.htm">Willkommensseite</a> in der Hilfe-Datei angezeigt.</li>
  <li>Wenn ein Skript angegeben wurde oder wenn die Hilfe-Datei fehlt (oder einen anderen Namen hat als die EXE-Datei), wird nur eine Fehlermeldung angezeigt.</li>
</ul>
<p>Geändert: WinActivate wird das Fenster nun wiederherstellen, wenn es bereits aktiv, aber minimiert ist.</p>
<p>Geändert: WinActivate sucht nun nach einem sichtbaren Fenster, um es zu aktivieren, wenn DetectHiddenWindows ausgeschaltet und das aktive Fenster versteckt ist, anstatt nichts zu tun.</p>
<p>Geändert: A_CaretX/A_CaretY verwenden nun eine andere Methode zum Abrufen der Position der Texteinfügemarke.</p>
<ul>
  <li>Sie geben häufiger einen leeren Wert zurück, wenn die echte Position der Texteinfügemarke nicht ermittelt werden kann, anstatt die obere linke Position des aktiven Fensters zurückzugeben.</li>
  <li>Um so Nebeneffekte zu reduzieren.</li>
  <li>Funktioniert auch in Konsolenfenstern.</li>  
</ul>
<p>Geändert: A_OSVersion verwendet nun <a href="https://msdn.microsoft.com/de-de/library/ff561910">RtlGetVersion()</a>, um Windows 10 und hoffentlich auch zukünftige Versionen erkennen zu können.</p>
<p>Geändert: A_OSVersion gibt nun eine Versionsnummer im Format "Haupt.Neben.Build" zurück, wenn es keinen Namen für das Betriebssystem hat.</p>
<p>Geändert: Objekte unterstützen nun <code>x[,y]</code>, <code>x.y[,z]</code> und <code>x[](y)</code>.</p>
<ul>
  <li>Benutzerdefinierte Objekte können das nutzen, indem man Standardwerte für Parameter von Eigenschaften und Meta-Funktionen angibt. Bei __Call wird der erste Parameter weggelassen, wie in <code>x.__Call(,y)</code>.</li>
  <li>COM-Objekte rufen DISPID_VALUE auf, wenn der Elementname weggelassen wird. Zum Beispiel würde <code>x[]</code> die Standardeigenschaft von x abrufen, und mit <code>fn[]()</code> könnte man JScript-Funktionen aufrufen.</li>
</ul>
<p>Einige interne Änderungen, um Fehler zu beheben, Codegröße zu reduzieren oder Performance zu verbessern, sowie:</p>
<ul>
  <li>Änderungen, wie #if und statische Variableninitialisierungen beim Laden geparst werden.</li>
  <li>Änderungen, wie { Blöcke } beim Laden geparst werden.</li>
</ul>

<h4>Fehlerbehebungen:</h4>
<p>Behoben: VK-zu-Tastenname-Umwandlungen für die Tasten von 'A' bis 'Z' berücksichtigen nun das Tastaturlayout.</p>
<ul>
  <li>Betrifft: GetKeyName, Hotkey-Steuerelement, A_PriorKey, KeyHistory und Input EndKey ErrorLevel (außer wo UMSCHALT-Taste benötigt wird).</li>
  <li>Alle anderen Tasten, einschließlich solche, die ASCII-fremde Buchstaben erzeugen, wurden bereits auf Basis von AutoHotkey's aktuellem Tastaturlayout umgewandelt.</li>
</ul>
<p>Behoben: FileAppend's * (stdout) berücksichtigt nun den Codierung-Parameter, anstatt immer ANSI-Text auszugeben.</p>
<p>Behoben: Auto-Skalierung von GUIs mit nur einem Scrollbalken.</p>
<p>Behoben: <code>Exception(m, n)</code> verursachte einen Absturz, wenn n sehr weit die Grenzen überschritten hat.</p>
<p>Behoben: GuiContextMenu setzt A_GuiEvent nun korrekt in x64.</p>
<p>Behoben: FileGetSize übergab manchmal ein unbestimmtes Ergebnis, wenn die Datei nicht existiert oder nicht geöffnet werden kann.</p>
<p>Behoben: Thread-Unterbrechungen speichern und stellen ErrorLevel besser wieder her [in v1.1.20.01 aufgrund von unbeabsichtigten Folgen rückgängig gemacht].</p>
<p>Behoben: ControlClick-Pos-Modus ignoriert nun deaktivierte Steuerelemente.</p>
<p>Behoben: Merkwürdiges Verhalten, wenn Gui +MaxSize kleiner als +MinSize ist.</p>
<p>Behoben: GuiControl/Get benötigte einen Gui-Namen, wenn ein Steuerelement-HWND angegeben wurde.</p>
<p>Behoben: Meta-Funktionen beeinträchtigten Zeilennummern, die von Exception() gemeldet werden.</p>

<h2 id="v1.1.19.03">1.1.19.03 - 11. Februar 2015</h2>
<p>Verbessert: Neubelegung erlaubt nun <code>scXXX::Y</code>, wenn das aktuelle Tastaturlayout das <code>ScXXX</code> nicht einem VK-Code zugeordnet hat. Allerdings muss <code>Y</code> noch auf dem aktuellen Tastaturlayout vorhanden sein.</p>
<p>Behoben: <code>break n</code> funktioniert nun korrekt, wenn <code>until</code> vorhanden ist, anstatt den Thread zu beenden.</p>
<p>Behoben: ControlGetFocus unterbrach einen Doppelklick des Benutzers (Danke an HotKeyIt).</p>
<p>Behoben: ListView wird sein g-Label nicht mehr aufrufen, wenn nicht unterstützte (und bisher unbekannte) Benachrichtigungen wie z. B. LVN_GETEMPTYMARKUP erfolgen.</p>
<p>Behoben: <code>#Include *i &lt;X&gt;</code> beendet das Programm nun wie vorgesehen, wenn X einen Syntaxfehler enthält.</p>
<p>Behoben: <code>for Var in <i>Ausdruck</i></code> verursachte manchmal einen Absturz des Programms, wenn <i>Ausdruck</i> eine Skript-Funktion aufruft.</p>

<h2 id="v1.1.19.02">1.1.19.02 - 25. Januar 2015</h2>
<p>Entfernt: Die 16-farbigen Symbole, die in Win9x/Win2k verwendet wurden.</p>
<p>Entfernt: Die separaten Tray-Symbol-Ressourcen.</p>
<p>Verbessert: Die Auswahl der Symbolgröße, wenn Symbole aus DLL/EXE-Dateien geladen werden.</p>
<ul><li>Kurz gesagt wird die Herunter- statt Hochskalierung bevorzugt. Diese Änderung ist besonders bei Systemen mit einer DPI von 125% oder 150% hilfreich, wo die Größen der Systemsymbole 20/40 oder 24/48 statt 16/32 sind. Sind all diese Größen in der Symbolressource vorhanden, macht diese Änderung keinen Unterschied.</li></ul>
<p>Behoben: Einige Probleme bei der Gültigkeitsprüfung von Hotkeys, während das Skript geladen wird.</p>
<ul>
	<li>Ungültige Hotkeys wie foo:: werden absofort immer als Fehler behandelt, anstatt eine irreführende Warnung zum Tastaturlayout anzuzeigen.</li>
	<li>Hotkeys wie ^!ä::, die aufgrund des aktuellen Tastaturlayouts inaktiv sind, dürfen absofort eine Aktion auf gleicher Zeile haben, außerdem wird das Label nun korrekt registriert (also als "^!ä" und nicht als "^!ä:"). Bei der Befehlszeilenoption /iLib wird die Warnung unterdrückt.</li>
	<li>Neubelegungen, die aufgrund des aktuellen Tastaturlayouts inaktiv sind, zeigen nun zwei Warnungen anstatt einen nicht-behebbaren Fehler an.</li>
	<li>Wenn man einen Mausrad-Hotkey als Präfixtaste verwendet, erscheint nur eine statt zwei Fehlermeldungen, zudem respektiert er /ErrorStdOut.</li>
</ul>
<p>Behoben: /iLib schreibt die Datei nun auch, wenn sie Syntax-Fehler enthält.</p>
<p>Behoben: Return/Break/Continue/Goto innerhalb von Try..<a href="commands/Finally.htm">Finally</a>.</p>

<h2 id="v1.1.19.01">1.1.19.01 - 5. Januar 2015</h2>
<p>Behoben: Der Hotkey-Befehl verursachte einen Absturz bei dem Versuch, neuen Varianten von vorhandenen Hotkeys zu erstellen (fehlerhaft seit v1.1.19.00).</p>
<p>Kleine Optimierungen an den Hotkey-Befehl und A_TimeIdle durchgeführt, bezogen auf das Entfernen der Win9x-Unterstützung.</p>

<h2 id="v1.1.19.00">1.1.19.00 - 4. Januar 2015</h2>
<p>Hinzugefügt: Ein Name für <code>Func.Call()</code>. Die veraltete Methode <code>Func.()</code> kann weiter verwendet werden.</p>
<p>Behoben: Einige Probleme mit <code>X.Y</code> und <code>X.Y(Z)</code> in VBScript/JScript/C#:</p>
<ul>
  <li>Enthielt <code>X.__Call</code> den <em>Namen</em> einer Funktion, wurde sie zurückgegeben anstatt aufgerufen.</li>
  <li>Gab <code>X.Y(Z)</code> einen Wert zurück, wurde Z ignoriert. Nun verhält es sich wie <code>X.Y[Z]</code>, sofern X.Y keine Funktion ist.</li>
</ul>
<p>Behoben: Der Hotkey-Befehl ignorierte das Präfix ~ (ursprüngliche Tastenfunktion nicht blockieren), wenn <em>Label</em> weggelassen wurde.</p>
<p>Behoben: Der Hotkey-Befehl ignorierte das Präfix $ (Hook verwenden), wenn die Hotkey-Variante bereits ohne $ erstellt wurde.</p>
<p>Behoben: Die Syntax <code>%Fn%()</code> funktioniert absofort auch bei JavaScript-Funktion-Objekten.</p>
<p>Behoben: EXE-Manifest erzeugt nicht länger UAC-Installer-Erkennungsheuristiken (fehlerhaft seit v1.1.17).</p>
<p>Verbessert: Threads werden in der Aufrufliste des Debuggers besser dargestellt.</p>
<ul>
  <li>Es wird der Typ des Threads statt der Labelname angezeigt - den Labelnamen gibt es weiterhin im nächsten Listeneintrag. Bei Hotkeys wird stattdessen der Hotkey angezeigt.</li>
  <li>Es wird die vom Thread aufgerufene Zeilennummer der Subroutine oder Funktion angezeigt, anstatt die Zeile, auf der das Skript war, bevor der Thread gestartet wurde.</li>
</ul>

<h2 id="v1.1.18.00">1.1.18.00 - 30. Dezember 2014</h2>
<p>Verbesserte IDispatch-Implementierung für AutoHotkey-Objekte:</p>
<ul>
  <li><code>X.Y</code> in VBScript und C# gibt nun X.Y zurück, wenn es KEIN Func-Objekt ist; früher versuchte es den Aufruf von X.Y(), unabhängig vom Typ.</li>
  <li><code>X(Y)</code> in VBScript, JScript und C# gibt nun X[Y] zurück, sofern es kein Func-Objekt ist - in diesem Fall wird es genauso wie früher aufgerufen.</li>
  <li><code>X[Y]</code> in C# gibt nun X[Y] zurück, wenn X KEIN Func-Objekt ist; früher versuchte es den Aufruf von X[Y](), unabhängig vom Typ.</li>
  <li><code>X.Y()</code> in C# gibt nun X.Y zurück, wenn es KEIN Func-Objekt ist, aufgrund der Mehrdeutigkeit in der C#-Dispatch-Implementierung.</li>
  <li>Unbehandelte Ausnahmen werden nun in IDispatch-Ausnahmen umgewandelt.</li>
</ul>
<p>Hinzugefügt: Unterstützung für das Erstellen neuer Eigenschaften in IE DOM/JavaScript-Objekten.</p>
<p>Behoben: <code>FileAppend, %VarMitClipboardAll%, Datei</code> verursachte Abstürze.</p>

<h2 id="v1.1.17.01">1.1.17.01 - 28. Dezember 2014</h2>
<p>Behoben: COM-Event-Handler erhielten nicht den letzten Objekt-Parameter.</p>

<h2 id="v1.1.17.00">1.1.17.00 - 27. Dezember 2014</h2>
<h4>Neue Features:</h4>
<p>Hinzugefügt: <a href="commands/Format.htm">Format()</a>.</p>
<p>Hinzugefügt: <a href="commands/FileOpen.htm">FileOpen()</a> kann nun verwendet werden, um Daten aus stdin zu lesen oder Daten in stdout oder stderr zu schreiben, indem man <code>"*"</code> oder <code>"**"</code> als Dateiname übergibt. Mit <code>AutoHotkey.exe *</code> kann Skript-Text ausgeführt werden, der nicht aus einer Datei gelesen, sondern von einem anderen Prozess weitergeleitet wurde. Siehe als Beispiel <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p>Hinzugefügt: Unterstützung zum Übergeben von AutoHotkey-Objekten an COM-APIs als IDispatch.</p>
<p>Hinzugefügt: Unterstützung für VT_BYREF in ComObject-Wrappers. Mit <code>obj[]</code> kann auf den verwiesenen Wert zugegriffen werden.</p>
<h4>Fehlerbehebungen:</h4>
<p>Behoben: BSOD in Win XP SP2.</p>
<p>Behoben: Im Besitz befindliche ComObjArrays werden nun per Wert zurückgegeben, anstatt per Pointer. Das heißt, dass eine Kopie des Arrays zurückgegeben wird, anstatt ein Pointer, der auf ein bald gelöschtes Array verweist.</p>
<p>Behoben: Die URL im Beispiel-Skript wurde geändert - das ist das Skript, das automatisch erstellt wird, sobald Sie AutoHotkey das erste Mal starten.</p>
<p>Behoben: <code>sc15D</code> entspricht nun <code>vk5D</code>/AppsKey (Send, GetKeyName, etc.).</p>
<p>Behoben: Edit-Steuerelemente behandeln ALTGR+A nicht länger als STRG+A.</p>
<p>Behoben: Statische Klassenvariablen agieren nicht länger als Ziele für Label, die unmittelbar vor der Klasse stehen.</p>

<h2 id="v1.1.16.05">1.1.16.05 - 28. September 2014</h2>
<p>Behoben: x.y/[]/{} wurde manchmal fälschlicherweise als variadisch gekennzeichnet.</p>

<h2 id="v1.1.16.04">1.1.16.04 - 16. September 2014</h2>
<p>Behoben: Das Programm stürzte ab, wenn eine nicht-schreibbare Eigenschaft überschrieben wurde.</p>
<p>Behoben: Das Programm stürzte ab, wenn ein RegExMatch-Objekt mit nicht-erfassten Teilausdrücken während eines RegEx-Callouts erstellt wurde.</p>

<h2 id="v1.1.16.03">1.1.16.03 - 11. September 2014</h2>
<p>Behoben: Schlechtes Verhalten in Abs() und Mod(), das durch einen fehlerhaften Bug-Fix in v1.1.16.01 verursacht wurde.</p>

<h2 id="v1.1.16.02">1.1.16.02 - 11. September 2014</h2>
<p>Behoben: #Include kann nun innerhalb einer Klasse verwendet werden (fehlerhaft seit a6ea27f).</p>
<p>Behoben: Clipboard gab binärische CF_HDROP-Daten in einigen Instanzen zurück.</p>
<p>Verbessert: Genauigkeit von FileGetSize bei Dateien erhöht, die noch offen sind.</p>
<p>Verbessert: For-Loop-Kompatibilität mit COM-Objekten.</p>

<h2 id="v1.1.16.01">1.1.16.01 - 10. September 2014</h2>
<p>Hinzugefügt: Syntax zum Definieren von dynamischen <a href="Objects.htm#Custom_Classes_property">Eigenschaften</a> innerhalb von Klassen.</p>
<p>Hinzugefügt: Die Optionen x+m und y+m zum Positionieren von GUI-Steuerelementen.</p>
<p>Hinzugefügt: Der #InputLevel von jedem Hotkey wird nun bei ListHotkeys angezeigt (wenn ungleich Null).</p>
<p>Optimiert: RegExMatch mit der O-Option (Objekt); das Erfassen von Bereichen einer langen Zeichenkette erfolgt nun viel schneller als zuvor in einigen Fällen.</p>
<p>Behoben: Objekte überprüfen nun, ob nach Abschließen von __Call neue Methoden verfügbar sind (wie bei __Set and __Get auch).</p>
<p>Behoben: In einigen Fällen erfolgt kein undefiniertes Verhalten mehr, wenn VarSetCapacity fehlschlägt.</p>
<p>Behoben: FileRead meldet bei Dateien über 4 GB nun einen Fehler, anstatt die gelesenen Daten einfach zu kürzen, selbst wenn es nicht gefordert war.</p>
<p>Behoben: FileRead *c wird nun korrekt null-terminieren, wenn die Byte-Länge ungerade ist.</p>
<p>Einige ClipboardAll-Probleme behoben und Verhalten geändert:</p>
<ul>
  <li><a href="commands/_ClipboardTimeout.htm">#ClipboardTimeout</a> wird bei GetClipboardData() ignoriert, da es nie wirklich funktionierte und Probleme verursachte. Diese Änderung behebt Timeouts und verlorene Daten, wenn eine Datei in der Zwischenablage ist (jede Datei in Windows 8, oder jede Datei in einer ZIP-Datei oder ähnliches).</li>
  <li>Zwischenablage-Elemente mit einer Länge von Null bekommen 1 Byte zugewiesen, wenn sie in der Zwischenablage wiederhergestellt werden, weil das Setzen eines Elements mit einer Länge von Null scheinbar immer fehlschlägt.</li>
  <li>Die Präsenz von MSDEVColumnSelect/MSDEVLineSelect wird nun beibehalten, wenn es von Scintilla gesetzt wird, obwohl jeder Datensatz von VS verworfen wird.</li>
  <li>Schreibt man den Inhalt von ClipboardAll direkt in eine Datei, erfolgt es nun über Unicode (andere Verwendungen von ClipboardAll hatten dieses Verhalten bereits seit v1.1.08).</li>
  <li>ClipboardAll und FileRead *c in Unicode-Builds werden die Länge nun aufrunden, wenn sie ungerade ist. Diese Änderung erhöht die gemeldete StrLen (Länge einer Zeichenkette) um 1, um das mögliche Abschneiden des letzten Bytes zu verhindern.</li>
</ul>
<p>Behoben: A_EventInfo bei TreeView-Elementen mit negativen Bildschirm-Koordinaten.</p>
<p>Behoben: Ein mögliches ListView/TreeView-Meldungsfilterungsproblem.</p>
<p>Behoben: A_LineFile/A_LineNumber in #If-Ausdrücken.</p>
<p>Behoben: #If wird sich nun selbst in ListLines einfügen (aber als "If").</p>
<p>Behoben: <code>Abs(["-"]*)</code> und ähnliches ließen das Programm abstürzen.</p>
<p>Behoben: <code>} funcdef(){</code> global und <code>}}</code> enden nun eine Methode/Eigenschaft/Klasse.</p>
<h2 id="v1.1.15.04">1.1.15.04 - 12. August 2014</h2>
<p>Behoben: Performance-Problem bei <code>&amp;var_mit_langer_zeichenkette_aus_zahlen</code>.</p>
<p>Behoben: Interne Variablen werden den Speicher beim Zuweisen eines Objekts nicht mehr beschädigen.</p>
<p>Behoben: Absofort kann der Parser <code>continue</code> je nach Bedarf verbieten, selbst wenn die aktuelle Funktion innerhalb einer Schleife definiert ist.</p>
<p>Behoben: <code>File.Encoding := x "-RAW"</code> kann die Codierung/Decodierung von ASCII-fremden Zeichen nicht mehr brechen. Der Suffix <code>-RAW</code> wird absofort ignoriert.</p>

<h2 id="v1.1.15.03">1.1.15.03 - 2. August 2014</h2>
<p>Behoben: Meta-Funktionen verlassen den Thread nun korrekt, wenn Exit oder Throw verwendet wird.</p>
<p>Behoben: FileInstall verwendet nun A_WorkingDir, wenn Ziel in einem nicht-kompilierten Skript relativ ist.</p>

<h2 id="v1.1.15.02">1.1.15.02 - 7. Juli 2014</h2>
<p>Behoben: Debuggen von negativen Integer-Keys in Objekten.</p>

<h2 id="v1.1.15.01">1.1.15.01 - 30. Juni 2014</h2>
<p>Geändert: Interne Fehler- und Warnungsdialogfenster sind nun immer im Vordergrund.</p>
<p>Behoben: <code>Until</code> kann nicht mehr aus einer rekursiven Datei-/Registry-Schleife ausbrechen.</p>

<h2 id="v1.1.15.00">1.1.15.00 - 4. Mai 2014</h2>
<p>Hinzugefügt: A_OSVersion-Wert <code>WIN_8.1</code>.</p>
<p>Geändert: Der Hotkey-Befehl wird das Übergabeverhalten bei vorhandenen Hotkey-Varianten nun anfügen / entfernen, abhängig davon, ob das <a href="Hotkeys.htm#Tilde">Tilde-Präfix (~)</a> vorhanden ist oder nicht.</p>
<p>Geändert: EXE-Manifest wurde geändert, so dass <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/ms724439">GetVersion</a>/<a href="https://msdn.microsoft.com/de-de/library/windows/desktop/ms724451">GetVersionEx</a> Windows 8.1 erkennen können.</p>

<h2 id="v1.1.14.04">1.1.14.04 - 25. April 2014</h2>
<p>Behoben: DllCall() lässt das Skript nicht mehr abstürzen, wenn <em>Funktion</em> ein reiner Integer-Wert von 0 ist.</p>
<p>Behoben: <code>IsFunc("ComObj(")</code> wird nun als falsch gewertet, anstatt eine Ausnahme auszulösen.</p>
<p>Behoben: ControlClick sendet nun korrekt XButton1/XButton2.</p>

<h2 id="v1.1.14.03">1.1.14.03 - 14. Februar 2014</h2>
<p>Behoben: <code>new X</code> erzeugt nicht länger ein Speicherleck, wenn <code>X.__Init</code> den Thread vorzeitig beendet.</p>
<p>Behoben: Haltepunkte werden nicht länger auf Klassenvariablen-Initialisierer verschoben, wenn sie Methodendefinitionen enthalten.</p>

<h2 id="v1.1.14.02">1.1.14.02 - 30. Januar 2014</h2>
<p>Behoben: <code>x::</code> und <code>x up::</code> werden beim KeyUp-Ereignis ausgelöst, wenn die Zustände der Modifikatortasten verhindern sollten, dass x beim KeyDown-Ereignis ausgelöst wird. Seit v1.1.14 ist es beabsichtigt, dass beide Hotkeys beim KeyUp-Ereignis ausgelöst werden, wenn x auch in einer benutzerdefinierten Tastenkombination wie <code>x &amp; y::</code> verwendet wird.</p>

<h2 id="v1.1.14.01">1.1.14.01 - 15. Januar 2014</h2>
<p>Behoben: Try verursachte ohne Catch/Finally einen Absturz, wenn keine Ausnahme ausgelöst wurde.</p>

<h2 id="v1.1.14.00">1.1.14.00 - 15. Januar 2014</h2>
<p>Hinzugefügt: <a href="commands/Finally.htm">Finally</a>-Anweisung zum Durchführen von Säuberungsaktionen nach Try/Catch. [fincs]</p>
<p><b>Geändert</b>: Das <a href="Hotkeys.htm#Tilde">Tilde-Präfix</a> (~) verhält sich bei benutzerdefinierten Tastenkombinationen nun intuitiver.</p>
<p>Behoben: <code>x &amp; y::</code> wird sowohl <code>x::</code> als auch <code>x up::</code> auslösen, wenn x im losgelassenen Zustand ist.</p>
<p>Behoben: ImageSearch setzt ErrorLevel nun auf 2, anstatt auf 0, wenn ein GDI-Aufruf fehlschlägt.</p>
<p>Behoben: EnvGet lässt das Programm nicht länger abstürzen, wenn Var 32767 Zeichen überschreitet.</p>
<p>Behoben: StatusBarWait setzt ErrorLevel nun korrekt.</p>
<p>Behoben: FileRead *c in ANSI-Builds verursachen nicht länger eine Heap-Beschädigung.</p>
<p>Behoben: Lokale Variablen werden bei rekursiven Aufrufen nun korrekt an variadischen Funktionen übergeben.</p>
<p>Behoben: Das Skript wird nun korrekt geladen, wenn die erste Zeile ein Ausdruck in runden Klammern ist.</p>
<p>Behoben: Der Fast-Modus von PixelSearch setzte AusgabeX/Y nur bei Erfolg.</p>

<h2 id="v1.1.13.01">1.1.13.01 - 11. Oktober 2013</h2>
<p>Behoben: Variadische Funktionsaufrufe mit benannten Werten bei Pflichtparametern.</p>

<h2 id="v1.1.13.00">1.1.13.00 - 27. August 2013</h2>
<p>Hinzugefügt: <a href="commands/StringSplit.htm">StrSplit()</a> von v2 alpha.</p>

<h2 id="v1.1.12.00">1.1.12.00 - 14. August 2013</h2>
<p>Hinzugefügt: Optionale Parameter können durch die Angabe von zwei fortlaufenden Kommas weggelassen werden, wie z. B. in <code>InStr(a, b,, 2)</code>. Im Gegensatz zu den vorherigen Versionen funktioniert diese Methode nun auch für Objekte (einschließlich COM-Objekte) und interne Funktionen. <code>[a,,b]</code> kann verwendet werden, um ein lückenhaftes Array zu erzeugen.</p>
<p>Hinzugefügt: Objekteigenschaften können nun mit der variadischen Syntax gesetzt werden, wie z. B. <code>x[y*]:=z</code>, dessen Y-Variable einen Array mit Keys/Indexen oder Parametern enthält.</p>

<h2 id="v1.1.11.02">1.1.11.02 - 28. Juli 2013</h2>
<p>Behoben: GuiControl/Get akzeptiert nun das ClassNN vom untergeordneten Eingabefeld einer ComboBox. Zur Identifizierung der ComboBox konnte man bereits das HWND des untergeordneten Eingabefeldes einer ComboBox angeben.</p>

<h2 id="v1.1.11.01">1.1.11.01 - 25. Juni 2013</h2>
<p>Behoben: Standardbreite und - höhe der InputBox wiederhergestellt (fehlerhaft seit v1.1.11.00 - Commit <a href="https://github.com/Lexikos/AutoHotkey_L/commit/7373cc6443">7373cc6443</a>).</p>
<p>Behoben: Die Gültigkeitsprüfung von DllCall-Argumenttypen behandelt SYM_OBJECT nun zuverlässig, und berücksichtigt #Warn UseUnset (wenn ein Variablenname ein ungültiger Typ ist).</p>
<p>Geändert: VarSetCapacity(var) wird nicht mehr vor uninitialisierten Variablen warnen.</p>

<h2 id="v1.1.11.00">1.1.11.00 - 21. Juni 2013</h2>
<p>Hinzugefügt: Unterstützung für <code>%A_LineFile%</code> in <a href="commands/_Include.htm">#Include</a>.</p>
<p>Geändert: Reduzierung der Größe von AutoHotkeySC.bin durch Verringerung der Auflösung vom (selten verwendeten) Dateitypsymbol.</p>
<p>Behoben: Bei <code>class X extends Y</code> ist es nun möglich, Y nach X zu definieren.</p>
<p>Entwickelt von fincs: AutoHotkey richtet sich nun nach der DPI. Die Gui-Befehle passen sich automatisch an, falls die DPI ungleich 96 ist. Siehe <a href="commands/Gui.htm#DPIScale">Gui -DPIScale</a>.</p>
<h2 id="v1.1.10.01">1.1.10.01 - 17. Mai 2013</h2>
<p>Verbessert: RegRead unterstützt nun REG_BINARY-Werte größer als 64 KB.</p>
<p>Verbessert: RegWrite unterstützt nun REG_BINARY/REG_MULTI_SZ-Werte größer als 64 KB.</p>
<p>Behoben: Process Close (und möglicherweise andere Dinge) in Windows XP.</p>

<h2 id="v1.1.10.00">1.1.10.00 - 11. Mai 2013</h2>
<p>Hinzugefügt: Einfache Unterstützung für <a href="commands/GuiControls.htm#Custom">benutzerdefinierte GUI-Steuerelementarten</a>.</p>
<p>Überarbeitet: <a href="commands/SoundSet.htm">SoundSet</a>/-WaveVolume und <a href="commands/SoundGet.htm">SoundGet</a>/-WaveVolume unterstützen nun Windows Vista und höher.</p>
<p>Behoben: <code>Run "&lt;Datei&gt;" &lt;Parameter&gt;</code> übergibt das Leerzeichen nicht länger als Teil des Parameters.</p>
<p>Behoben: Einige Probleme beim Lesen der Konsoleneingabe (CONIN$).</p>

<h2 id="v1.1.09.04">1.1.09.04 - 14. März 2013</h2>
<p>Behoben: Gui-Menu-Zugriffstasten funktionierten nicht, wenn das Gui selbst (nicht ein Steuerelement) den Fokus hatte.</p>

<h2 id="v1.1.09.03">1.1.09.03 - 9. Februar 2013</h2>
<p><a href="http://www.autohotkey.com/board/index.php?showtopic=89624">Zwei Bugs</a> behoben, die bestimmte Zuweisungen beeinflussten, bei denen die Zielvariable eine ungeleerte Binärzahl enthält und null Kapazität hat.</p>
<p>Behoben: GuiControl und GuiControlGet agierten mit dem falschen Steuerelement, falls denen ein HWND gegeben wurde, das nicht zum aktuellen Gui gehört. Stattdessen wird der Zustand als Fehler behandelt.</p>
<p>Behoben: OnMessage-Funktionen setzen A_Gui und A_GuiControl nun korrekt, wenn das Ziel-Gui ein untergeordnetes Fenster ist.</p>

<h2 id="v1.1.09.02">1.1.09.02 - 24. Dezember 2012</h2>
<p>Behoben: MsgBox zeigt bei ungültigen Optionen nun eine Fehlermeldung an, anstatt den Thread automatisch zu verlassen.</p>
<p>Behoben: Syntaxfehler in Klassenvariablen-Initialisierer bewirken nicht länger, dass das Programm ohne ordnungsgemäße Fehlermeldung abstürzt.</p>

<h2 id="v1.1.09.01">1.1.09.01 - 15. Dezember 2012</h2>
<p>Behoben: AND/OR nach einer Mehrfachanweisung wie <code>((x, y) and z)</code>.</p>
<p>Behoben: RegExReplace unterstützt nun korrekt doppelt vorhandene Teilausdrucksnamen.</p>
<p>Behoben: Object.Remove() wird Keys in Form einer Zeichenkette nun freigeben.</p>
<p>Behoben: base.Invoke() ist nicht mehr von der dynamischen Variablenauflösung abhängig.</p>

<h2 id="v1.1.09.00">1.1.09.00 - 7. November 2012</h2>

<h4>Gravierende Änderungen:</h4>
<p>Entfernt: <a href="misc/AutoIt2Compat.htm">.aut-Datei-Kompatibilität</a> und #AllowSameLineComments.</p>
<p>Entfernt: undokumentierte AutoIt-v2-Befehle.</p>

<h4>Abwärtskompatible Änderungen:</h4>
<p>Erlaubt: Um Widersprüche bei Variablendeklarationen und Ausdrücke zu vermeiden, können optionale Parameter nun auch mit <code>:=</code> deklariert werden, nicht nur mit <code>=</code>.</p>
<p>Erlaubt: ASCII-fremde Zeichen in Keys ohne Anführungszeichen (<code>{<b>key</b>: x}</code> und <code>obj.<b>key</b></code>).</p>
<p>Geändert: Name in der Versionsinfo von "AutoHotkey_L" zu "AutoHotkey".</p>

<h4>Fehlerbehebungen:</h4>
<p>Behoben: Instabilität, hervorgerufen durch Warnungsmeldungen, die mitten bei der Auswertung von Argumenten eines Befehls erschienen.</p>
<p>Behoben: Der Fast-Modus von PixelSearch behandelt "nicht gefunden" nicht mehr als Fehler.</p>
<p>Behoben: ahk_exe akzeptiert danach nun weitere ahk_-Kriterien.</p>
<p>Behoben: <code>else continue 2</code> und ähnliches benötigen nicht länger geschweifte Klammern um die Schleife.</p>
<p>Behoben: RegRead meldet nun nicht länger Misserfolg nach erfolgreichem Einlesen von Binärdaten.</p>
<p>Behoben: <code>File.Length</code> kompensiert oder leert nun alle gepufferten Daten.</p>
<p>Behoben: Gui-Skalierung berücksichtigt nun Scrollbalken, falls vorhanden.</p>

<h4>Debugger:</h4>
<p>Hinzugefügt: Unterstützung für asynchrone Befehle.</p>
<p>Verbessert: Behandlung von Haltepunkten bei Zeilen wie <code>else foo()</code> oder <code>{ bar()</code>, so dass der Debugger gegebenenfalls tatsächlich stoppen wird.</p>
<p>Codegröße optimiert, einige Bugs behoben und den Debugger generell robuster gemacht.</p>


<h2 id="v1.1.08.01">1.1.08.01 - 3. August 2012</h2>
<p>Debugger: Fehler behoben, dass max_depth entweder nur die Hälfte vom vorgesehenen Limit oder unlimitiert war.</p>

<h2 id="v1.1.08.00">1.1.08.00 - 14. Juli 2012</h2>

<h4>Gravierende Änderungen:</h4>
<p>Geändert: Standardzeichensatz des Skripts ist nun ANSI, da das vorherige Verhalten für die meisten irreführend war. UTF-8-Dateien müssen nun eine Byte-Order-Markierung (BOM) haben, um richtig erkannt werden zu können. Zum Beispiel fügt der Windows-Editor in jede Datei eine BOM ein, sobald diese im UTF-8-Format gespeichert wird.</p>
<p>Geändert: <code>return x</code> ermöglicht nun das Formatieren numerischer Zeichenketten; es ist das gleiche wie <code>return (x)</code>.</p>
<p>Geändert: <code>Gui, Name: New</code> setzt das neue GUI nun als Standard.</p>

<h4>Sonstige Änderungen:</h4>
<p>Geändert: ClipboardAll wird CF_UNICODETEXT nun den anderen Textformaten vorziehen.</p>
<p>Geändert: Gui Show erlaubt nun Gleitkommazahlen.</p>
<p>Geändert: A_OSVersion wird bei Windows 8 nun WIN_8 zurückgeben.</p>
<p>Geändert: Die Dateibeschreibung von AutoHotkey.exe enthält nun "ANSI/Unicode 32/64-bit".</p>
<p>Geändert: Der Parser erlaubt nun Zeilen wie <code>new MeinObjekt()</code> ohne Zuweisung.</p>
<p>Geändert: PCRE auf 8.30 aktualisiert.</p>
<p>Die Formulierungen einiger <a href="commands/_Warn.htm">Warnungen</a> wurden verbessert, außerdem befindet sich in jedem Warnfenster nun ein Verweis auf die Dokumentation.</p>
<p>Verbesserungen beim Debugger:</p>
<ul>
  <li>Hinzugefügt: Einfache Unterstützung für das Untersuchen von Func-, ComObject- und RegExMatchObject-Objekten.</li>
  <li>Behoben: Die Meldung zum Hinzufügen des Debuggers wurde in einigen Situationen ignoriert. Siehe Commit <a href="https://github.com/Lexikos/AutoHotkey_L/commit/83f0a0e39a0f69fc8861f8c4234690557c4ab347">83f0a0e</a>.</li>
</ul>

<h4>Neue Features:</h4>
<p>Hinzugefügt: Unterstützung für das PCRE-Konstrukt <code>(*MARK:NAME)</code> mithilfe von <code>RegExMatchObject.Mark</code>.</p>
<p>Hinzugefügt: Unterstützung von Zuweisungen wie <code>classvar.x := y</code> in Klassendefinitionen (nach dem Deklarieren von <em>classvar</em>).</p>
<p>Hinzugefügt: <a href="Variables.htm#Is64bitOS">A_Is64bitOS</a>.</p>
<p>Hinzugefügt: <a href="commands/SetRegView.htm">SetRegView</a> und <a href="Variables.htm#RegView">A_RegView</a>.</p>

<h4>Fehlerbehebungen:</h4>
<p>Behoben: <code>Func.()</code> wird den Funktionsaufruf nun einfach überspringen, falls Pflichtparameter weggelassen werden, anstatt den Thread dazu zu bringen, sich selbst automatisch zu beenden.</p>
<p>Behoben: <code>Object.Remove()</code> kann nun Objekt-Keys freigeben.</p>
<p>Behoben: Hotkey-Paare im gedrückten/losgelassenen Zustand unterdrücken die Eingabe nun korrekt, falls nur ein Hotkey des Paares aktiviert ist.</p>
<p>Behoben: <code>#Include &lt;Lib&gt;</code> beeinflusst nun nicht länger das Arbeitsverzeichnis nachfolgender #Include-Direktiven.</p>
<p>Behoben: <code>objaddref()</code> verhielt sich wie <code>ObjRelease()</code>, wenn es mit einem kleingeschriebenen 'a' aufgerufen wurde.</p>
<p>Behoben: A_AhkPath in 32-Bit-kompilierten Skripts erkennt nun 64-Bit-AutoHotkey-Installationen und umgekehrt.</p>
<p>Behoben: TreeView-Steuerelemente mit der <code>-Background</code>-Option wurden in älteren Betriebssystemen falsch gerendert.</p>
<p>Behoben: Bei der Ausführung von While/Until wurden Fehlermeldungen bzgl. der Identifizierung der geeigneten Zeile angezeigt.</p>

<h2 id="v1.1.07.03">1.1.07.03 - 25. März 2012</h2>
<p>Behoben: STRG/ALT/UMSCHALT-Hotkeys im gedrückten Status machten entsprechende Hotkeys im losgelassenen Status unwirksam, welche zuvor definiert wurden.</p>
<p>Behoben: Hotkeys im gedrückten Status verwenden nun immer den Hook, wenn sie nach einem Hotkey im losgelassen Status mit der gleichen Taste definiert werden. Falls der Hotkey im gedrückten Status die Methode "reg" verwendet, wird der Hook das Drückereignis blockieren und nur den Hotkey im losgelassenen Status auslösen.</p>
<p>Behoben: Ladezeitüberprüfungen interpretierten Ausdrücke ohne Derefenzierungen als unbearbeiteten Text. Zum Beispiel wurde <code>Gosub % "foo"</code> bei der Ladezeit in <code>"foo":</code> aufgelöst. Ebenso wurde <code>% ""</code> in verschiedenen Fällen als ungültig angesehen, auch dann, wenn eine leere Zeichenkette erlaubt war.</p>

<h2 id="v1.1.07.02">1.1.07.02 - 22. März 2012</h2>
<p>Behoben: Ein selten auftretender Absturz, sobald GetClipboardData() fehlschlug.</p>
<p>Behoben: ComObjArray() wird nun bei Misserfolg eine leere Zeichenkette zurückgeben, anstatt einen beliebigen Integer.</p>
<p>Behoben: <code>Object.Remove(i, "")</code> hatte Auswirkung auf Integer-Keys, sobald <code>!Object.HasKey(i)</code>.</p>

<h2 id="v1.1.07.01">1.1.07.01 - 2. März 2012</h2>
<p>Behoben: FileRead ignoriert nun #MaxMem beim Lesen von UTF-16 in Unicode-Builds.</p>
<p>Behoben: Dynamische Funktionsaufrufe mit internen Variablen wie z. B. <code>%A_ThisLabel%()</code>.</p>

<h2 id="v1.1.07.00">1.1.07.00 - 27. Februar 2012</h2>
<p>Verbessert: <code><a href="Functions.htm#DynCall">%var%()</a></code> unterstützt nun <a href="objects/Functor.htm">Funktionsobjekte</a> und die <a href="Objects.htm#Default_Base_Object">__Call-Meta-Standardfunktion</a>.</p>
<p>Behoben: <a href="commands/ControlGet.htm#List">ControlGet List</a> funktioniert nun bei ListViews, wenn das Skript und der Zielprozess nicht im 32-Bit-Format sind, oder alle beide im 64-Bit-Format sind.</p>
<p>Behoben: <a href="commands/Send.htm#SendEvent">SendEvent</a> mit einer Tastenverzögerung von 0; eine Änderung, die in v1.1.05.04 eigenführt wurde, bewirkte, dass SendEvent langsamer war, als gedacht.</p>
<p>Behoben: <a href="objects/Object.htm#Remove">Object.Remove(i)</a> passte die Keys nicht an, wenn Object[i] nicht existierte.</p>
<p>Behoben: <a href="commands/ComObjType.htm">ComObjType()</a> verhielt sich manchmal unvorhersehbar, wenn diese Funktion über einen <a href="commands/ComObjActive.htm#Remarks">Alternativnamen</a> aufgerufen wurde.</p>
<p>Behoben: <a href="commands/ExitApp.htm">ExitApp</a> beendet nun den Thread, wenn das Beenden des Skripts von einer <a href="commands/OnExit.htm">OnExit</a>-Subroutine verhindert wird, anstatt die Ausführung nach dem <a href="commands/Block.htm">Block</a> fortzusetzen, der ExitApp enthält.</p>
<p>Ein Funktionsaufruf über ein Objekt verhindert nicht länger, dass der Thread beendet wird. Wenn daher <a href="commands/Exit.htm">Exit</a> verwendet wird oder ein Laufzeitfehler innerhalb einer <a href="Objects.htm#Custom_Classes_method">Klassenmethode</a> auftaucht, wird der ganze Thread beendet, anstatt nur die Funktion.</p>
<p>Der Aufruf einer base-Klassenmethode über <a href="Objects.htm#Custom_Classes_base">base.Method()</a> oder ähnlichem innerhalb einer Klassendefinition verursacht nicht länger eine <a href="commands/_Warn.htm">UseUnset</a>-Warnung, falls die Methode nicht existiert. Folglich verursacht die Instanziierung eines Objekts, das <a href="Objects.htm#Custom_Classes_var">Instanzvariablen</a> hat, nicht länger eine Warnung bezüglich der internen Methode <code>base.__Init</code>, falls die base-Klasse keine Instanzvariablen hat.</p>

<h2 id="v1.1.06.02">1.1.06.02 - 13. Februar 2012</h2>
<p>Behoben: IniRead führte zum Absturz, sobald die Sektion weggelassen wurde, aber nicht der Key.</p>
<p>Behoben: Genauigkeit von FileGetSize mit Dateien, die 4GB oder höher groß sind.</p>

<h2 id="v1.1.06.01">1.1.06.01 - 12. Februar 2012</h2>
<p>Behoben: Die intelligente Kommahandhabung der MsgBox benötigt numerische Optionen, nicht Titel.</p>

<h2 id="v1.1.06.00">1.1.06.00 - 12. Februar 2012</h2>
<h4>Neue Features:</h4>
<p>Hinzugefügt: <a href="commands/_InputLevel.htm">#InputLevel</a>-Direktive und <a href="commands/SendLevel.htm">SendLevel</a>-Befehl von <a href="https://github.com/Lexikos/AutoHotkey_L/pull/7">Russell Davis</a>.</p>
<p>Hinzugefügt: <a href="commands/GuiControls.htm#Link">Link</a>-Steuerelemente von <a href="https://github.com/Lexikos/AutoHotkey_L/pull/9">ChrisS85</a>.</p>
<h4>Gravierende Änderungen:</h4>
<p>Geändert: Befehlsparser verhindert nun, dass Escapezeichen-versehene Zeichen wie <code>`t</code> oder <code>` </code> am Anfang oder am Ende eines Parameters entfernt werden.</p>
<p>Geändert: Intelligentere Kommahandhabung bei der <a href="commands/MsgBox.htm">MsgBox</a>, um die Flexibilität zu verbessern und Widersprüche zu verringern.</p>
<ul>
  <li><code>%</code> kann nun verwendet werden, um in "Optionen" und "Zeitlimit" einen Ausdruck zu erzwingen.</li>
  <li>Falls der erste Parameter ein Ausdruck ist, bewirkt jedes Komma ohne versehenem Escapezeichen, das nicht in Anführungszeichen oder geschweiften/eckigen/runden Klammern gesetzt wurde, dass der Mehrfachparametermodus verwendet wird. Früher wurden solche Kommas beim Einzelparametermodus im ersten Parameter (Text) als Mehrfachanweisungsoperator interpretiert.</li>
  <li>Sobald "Titel" ein Ausdruck ist, werden Kommas ohne versehenem Escapezeichen die intelligente Kommahandhabung innerhalb des Ausdrucks nicht länger stören.</li>
  <li>Wenn exakt zwei Parameter vorhanden sind und der erste Parameter leer oder ein Integer ist, wird der Mehrfachparametermodus verwendet. Früher wurden beide zu einem einzelnen Parameter (Text) zusammengeführt.</li>
  <li>Zeitlimit kann eine direkt geschriebene Zahl oder eine einzelne Derefenzierung sein (und optional ein Teil einer Zahl; zum Beispiel <code>%Zeitlimit%.500</code>). Im Gegensatz zur Dokumentation interpretierte das frühere Verhalten solche Fälle, die mit <code>%</code> begannen, als Ausdrücke (die eine Doppeldereferenzierung enthalten).</li>
  <li>"Titel" kann ein Ausdruck sein, auch dann, wenn "Text" und "Optionen" weggelassen werden.</li>
</ul>
<p>Geändert: A_IsUnicode/A_IsCompiled enthalten in ANSI-Versionen/unkompilierten Skripts eine leere Zeichenkette, anstatt undefiniert zu bleiben. Auf diese Weise können diese überprüft werden, ohne dabei <a href="commands/_Warn.htm">#Warn</a>-Warnungen auszulösen. Nebeneffekte sind:</p>
<ul>
  <li>Der Versuch, direkt auf A_IsCompiled oder A_IsUnicode zu verweisen, erzeugt immer einen Ladezeitfehler. Dynamische Zuweisungen schlagen immer fehl, je nach Bedarf entweder unauffällig oder mit einer Fehlermeldung. Davor waren Zuweisungen in unkompilierten/Unicode-inkompatiblen Skripts erlaubt.</li>
  <li>Der Versuch, die Adresse von A_IsCompiled oder A_IsUnicode zu verwenden, wird immer fehlschlagen.</li>
  <li>A_IsCompiled und A_IsUnicode erscheinen nicht länger in ListVars, wenn sie von einem Skript verwiesen werden, das nicht kompiliert/Unicode ist.</li>
</ul>
<p>Geändert: <a href="commands/Send.htm">Send</a> und verwandte Befehle beachten nun <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a>, wenn sie Zustände von Modifikatortasten ändern.</p>
<h4>Sonstige Änderungen:</h4>
<p>Geändert: <a href="commands/GuiControl.htm#Choose">GuiControl Choose</a> wird nun alle ListBox-Einträge abwählen, wenn N=0.</p>
<p>Geändert: <a href="commands/RegisterCallback.htm">RegisterCallback</a> kann nun anstelle eines Namens ein <a href="objects/Func.htm">Func-Objekt</a> verwenden.</p>
<p>Geändert: <a href="commands/ListLines.htm">ListLines</a> zeigt nun Dateinamen an (solange das Skript nicht kompiliert ist).</p>
<p>Verbessert: <a href="commands/Run.htm">Run</a> wird beim Verwenden von ShellExecuteEx nun eine Prozess-ID ausgeben, wenn möglich.</p>
<h4>Fehlerbehebungen:</h4>
<p>Behoben: Handle-Leaks in RegRead.</p>
<p>Behoben: <code>x.y++</code> und Ähnliches wird eine leere Zeichenkette zuweisen, wenn x.y nicht numerisch ist.</p>
<p>Behoben: WIN+L-Übergangslösung von SendInput bewirkte, dass die WIN-Taste "hängen blieb".</p>
<p>Behoben: Ahk2Exe fügte automatisch die falsche Datei ein, wenn <a href="commands/_Include.htm">#Include &lt;Lib&gt;</a> verwendet wurde.</p>

<h2 id="v1.1.05.06">1.1.05.06 - 31. Dezember 2011</h2>
<p>Behoben: Inkrement (++) und Dekrement (--) haben keine Wirkung, wenn sie auf ein Objektfeld mit einer Zeichenkette angewendet werden.</p>
<p>Behoben: Inkrement (++) und Dekrement (--) verursachen nun eine Warnmeldung, wenn sie bei einer uninitialisierten Variable verwendet werden.</p>

<h2 id="v1.1.05.05">1.1.05.05 - 17. Dezember 2011</h2>
<p>Behoben: <code>continue <i>n</i></code> verhielt sich falsch, wenn eine innere Schleife keine geschweiften Klammern hatte.</p>
<p>Behoben: <code>RegExMatchObject[Name]</code> funktioniert nun richtig bei doppelt vorkommenden Namen.</p>

<h2 id="v1.1.05.04">1.1.05.04 - 5. Dezember 2011</h2>
<p>Behoben: Der Unterbefehl "Selected" von ControlGet erwies sich in der x64-Version als unzuverlässig.</p>
<p>Behoben: CPU wurde voll ausgelastet, sobald darauf gewartet wurde, dass ein darunterliegender Thread ein Dialogfenster anzeigt (und wahrscheinlich auch in anderen Fällen).</p>

<h2 id="v1.1.05.03">1.1.05.03 - 30. November 2011</h2>
<p>Behoben: <code>Loop ... Until VariableMitObjekt</code>.</p>

<h2 id="v1.1.05.02">1.1.05.02 - 20. November 2011</h2>
<p>Behoben: Beim Laden eines kompilierten Skripts wurde das EOF (End of File) in einigen Fällen falsch erkannt.</p>
<p>Behoben: SendInput wird Modifikatortasten automatisch loslassen, sobald Sonderzeichen oder {U+xxxx} gesendet werden (fehlerhaft seit v1.1.00.01).</p>
<p>Behoben: ComObjConnect wird Non-Dispatch-Schnittstellen herausfiltern, anstatt das Skript abstürzen zu lassen.</p>
<p>Behoben: <code>new %VariableMitKlassenname%()</code>.</p>

<h2 id="v1.1.05.01">1.1.05.01 - 16. Oktober 2011</h2>
<p>Behoben: Klassendeklarationen erlauben nun Direktive wie z. B. #Include.</p>

<h2 id="v1.1.05.00">1.1.05.00 - 8. Oktober 2011</h2>
<p>Hinzugefügt: <a href="commands/CoordMode.htm">Client-Koordinationsmodus</a>.</p>
<p>Hinzugefügt: <a href="commands/RegExMatch.htm#ObjectMode">Objekt-Ausgabemodus</a> für RegExMatch und RegEx-Callouts.</p>
<p>Hinzugefügt: <a href="Functions.htm#SuperGlobal">Superglobale</a> Deklarationen, um wiederholende globale Deklarationen zu verhindern.</p>
<p><strong>Gravierende Änderung</strong>: Klassendeklarationen wie <code>Class c</code> erzeugen eine superglobale Variable, anstatt eine gewöhnliche globale Variable.</p>
<p>Hinzugefügt: Mehr Details für Dialogfenster mit unbehandelte Ausnahmefehler.</p>
<p>Geändert: <code><a href="commands/Gui.htm#Owner">Gui +Owner</a></code> funktioniert auch, falls das GUI danach erstellt wurde.</p>
<p>Geändert: Bei Deklarationen von Instanzvariablen in Klassendefinitionen können Key-Value-Paare nicht mehr im Klassenobjekt leer gelassen werden.</p>
<p>Geändert: Bei Misserfolg verwendet #Include nun das Standardformat für die Fehlermeldung (mehr Details; berücksichtigt auch ErrorStdOut).</p>
<p>Geändert: <a href="commands/Throw.htm">Throw</a> löst nun standardmäßig ein Exception-Objekt aus, falls dessen Parameter weggelassen werden.</p>
<p>Geändert: Format von Laufzeitfehlermeldungen wurde etwas angepasst, um die Widersprüche zu verringern und Code-Größe zu verbessern.</p>
<p>Geändert: PCRE aus Performance-Gründen modifiziert, um UTF-16 bei Eingabevariablen in Unicode-Builds zu verwenden.</p>
<p>Geändert: PCRE auf 8.13 aktualisiert.</p>
<p>Behoben: Threads wurden nicht wie vorgesehen beendet, falls eine Zuweisung in einem Ausdruck fehlgeschlagen ist.</p>
<p>Behoben: #MaxMem verhinderte Zuweisungen auf Variablen, die keine Erweiterung benötigten.</p>
<p>Behoben: Try/Catch war nicht in der Lage, COM-Fehler abzufangen.</p>
<p>Behoben: GuiControlGet hat den 2. Parameter in einigen Fällen fälschlicherweise als ungültig angesehen.</p>
<p>Behoben: Eingabevariablen wurden zu früh aufgelöst, so dass sie später durch einen Ausdruck auf selber Zeile ungültig gemacht werden konnten.</p>
<p>Behoben: RegEx-Callouts brachen die Suche nach Übereinstimmung bei einem Ausnahmefehler nicht ab.</p>
<p>Behoben: DllCall setzte ErrorLevel auf -4 anstatt auf -3.</p>
<p>Behoben: While erschien beim ersten Durchlauf zweimal in ListLines.</p>
<p>Behoben: Try/Catch konnte If/Loop/For/While ohne umschließenden Block verwenden.</p>
<p>Behoben: Enumerator-Objekte wurden nicht freigegeben, wenn mit Until eine For-Schleife unterbrochen wurde.</p>

<h2 id="v1.1.04.01">1.1.04.01 - 15. September 2011</h2>
<p>Behoben: FileRemoveDir hat den ErrorLevel nicht richtig gesetzt.</p>

<h2 id="v1.1.04.00">1.1.04.00 - 11. September 2011</h2>
<p class="warning"><strong>Warnung</strong>: Diese Version enthält eine Vielzahl gravierender Änderungen.</p>
<p>Unterstützung für Ausnahmebehandlung hinzugefügt: <a href="commands/Try.htm">Try</a>/<a href="commands/Catch.htm">Catch</a>/<a href="commands/Throw.htm">Throw</a> und <a href="commands/Throw.htm#Exception">Exception()</a>.</p>
<p>Hinzugefügt: Standardausgabemodus (StdOut) für <a href="commands/_Warn.htm">#Warn</a>.</p>
<p>Hinzugefügt: Option <a href="commands/Gui.htm#GuiHwndOutputVar">Gui +HwndVARNAME</a>.</p>
<p>Hinzugefügt: <a href="commands/Gui.htm#New">Gui, New [, Optionen, Titel]</a>.</p>
<p>Hinzugefügt: Automatische Unterstützung für Tastaturkürzel wie CTRL+O in <a href="commands/Gui.htm#Menu">Gui-Menüs</a>.</p>
<p>Geändert: Umgang mit <code>#Include &lt;Lib&gt;</code> wurde angepasst, wenn die Befehlszeilenoption "/iLib" vorhanden ist, um ein <a href="https://github.com/fincs/Ahk2Exe/issues/4">Problem</a> mit Ahk2Exe zu lösen.</p>
<p>Geändert: GuiControl behält den aktuellen Wert vom Progress-Steuerelement beim Verändern des Styles.</p>
<p>Geändert: GuiControl und GuiControlGet können ein HWND im <em>SteuerelementID</em>-Parameter enthalten.</p>
<p>1GB-Einschränkung von FileRead entfernt.</p>
<p>Fehlererkennung verbessert:</p>
<ul>
  <li><code>Hotkey, If, <i>Ausdruck</i></code>, dessen <i>Ausdruck</i> nicht mit einem vorhandenen #If-Ausdruck übereinstimmt, wird bei der Ladezeit falls möglich abgefangen.</li>
  <li><code>Hotkey, If<i>Irgendetwas</i></code>, dessen <i>Irgendetwas</i> ungültig ist, wird bei der Ladezeit abgefangen.</li>
  <li>Klassendefinitionen mit fehlenden geschweiften Klammern werden als Fehler erkannt.</li>
  <li>Wenn ein Funktionsaufruf in der ersten Zeile einer Klassendefinition verwendet wird, dann wird das nun richtig als Fehler behandelt.</li>
  <li>GroupAdd zeigt nun eine Fehlermeldung an, falls der Gruppenname leer ist, anstatt den Thread automatisch zu schließen.</li>
  <li>Einige überflüssige "unset var"-Warnungen entfernt, die beim Verwenden der Warnungsmethoden von OutputDebug oder StdOut erscheinen.</li>
  <li>Wenn eine unbekannte Option mit <a href="commands/Gui.htm#Options">Gui</a>, <a href="commands/Gui.htm#Show">Gui Show</a>, <a href="commands/Gui.htm#New">Gui New</a> oder <a href="commands/GuiControl.htm">GuiControl</a> verwendet wird, dann wird eine Fehlermeldung angezeigt und der Thread beendet, es sei denn, <a href="commands/Try.htm">Try</a> wird verwendet. Diese Gültigkeitsprüfung wird aufgrund der Komplexität nicht während der Ladezeit durchgeführt (üblicherweise enthalten die Optionsparameter Variablenverweise).</li>
  <li>RegRead, RegWrite und RegDelete setzen A_LastError nun auf das Ergebnis der Systemfunktion GetLastError().</li>
  <li><a href="commands/Gui.htm#LastFoundExist">+LastFoundExist</a> wird nun als Fehler behandelt, wenn diese mit anderen Optionen kombiniert wird (in diesem Fall sollte <a href="commands/Gui.htm#LastFound">+LastFound</a> verwendet werden).</li>
</ul>
<p><a href="http://www.autohotkey.com/forum/topic76133.html">Fehler</a> bei rekursiven variadischen Funktionen behoben.</p>

<h2 id="v1.1.03.00">1.1.03.00 - 28. August 2011</h2>
<p>Hinzugefügt: Unterstützung für GUI-Namen.</p>
<p>Hinzugefügt: Unterstützung für das Identifizieren eines GUI's mittels HWND.</p>
<p>Hinzugefügt: Gui-Option <code>+Parent%ParentGui%</code>.</p>
<p>Hinzugefügt: Gui-Fenster können mithilfe von <code>+Owner%HWND%</code> einem externen Fenster zugeordnet werden.</p>
<p>Hinzugefügt: Unterbefehl "Name" für GuiControlGet.</p>
<p>Hinzugefügt: Unterstützung für ActiveX-Steuerelemente mithilfe des Gui-Befehls.</p>
<p>Behoben: Leeres Hotkey-Steuerelement hat "vk00" zurückgegeben.</p>
<p>Behoben: Abstürze und Speicherlecks in Bezug auf COM-Ereignisse/ComObjConnect.</p>
<p>Behoben: <code>GuiControlGet AusgabeVar, Unterbefehl, <b>%AusgabeVar%</b></code> schlug immer fehl.</p>
<p>Geändert: Fehlermeldungen "Missing (/[/{" auf "Unexpected )/]/}" geändert, um es verständlicher zu machen.</p>
<p>Geändert: ListLines zeigt nun While- und Until-Zeilen an, die bei jedem Durchlauf ausgeführt werden.</p>
<p>Geändert: Ausdrucksoperator ~= hat nun höhere Priorität als =/!=/&lt;/&gt;/&lt;=/&gt;=, jedoch niedriger als Verkettung, außerdem wurde er zur Dokumentation hinzugefügt.</p>

<h2 id="v1.1.02.03">1.1.02.03 - 21. August 2011</h2>
<p>Behoben (Debugger): Attribut "numchildren" hat nicht Objekt.Base enthalten.</p>

<h2 id="v1.1.02.02">1.1.02.02 - 20. August 2011</h2>
<p>Behoben: Variablenkapazität war bei x64-Builds auf 2 GB limitiert.</p>
<p>Behoben: Zuletzt Gefundene Fenster wurde nicht von <code>#if WinExist(T)</code> gesetzt.</p>

<h2 id="v1.1.02.01">1.1.02.01 - 13. August 2011</h2>
<p>Geändert: A_PriorKey ignoriert nun die Up-Ereignisse der Tasten.</p>
<p>Fehler beim Abruf des Prozessnamens/-pfades in bestimmten Fällen behoben:</p>
<ul>
  <li>Name/Pfad eines 64-Bit-Prozesses von einem 32-Bit-Skript abrufen.</li>
  <li>Name/Pfad eines erhöhten Prozesses von einem nicht erhöhten Prozess (UAC) abrufen.</li>
</ul>

<h2 id="v1.1.02.00">1.1.02.00 - 6. August 2011</h2>
<p>Hinzugefügt: TV_SetImageList().</p>
<p>Zeichen, die die untypischen Umschaltzustände 16 und 32 benötigen, verwenden nun eine Rückfallmethode, anstatt falsche Tastatureingaben zu erzeugen.</p>
<p>Umgang mit toten Tasten überarbeitet, um Probleme zu vermeiden, falls mehrere Skripte mit Hotstrings aktiv sind.</p>

<h2 id="v1.1.01.00">1.1.01.00 - 30. Juli 2011</h2>
<p>Hinzugefügt: Unterstützung für Instanzvariablen in Klassendefinitionen, mit einfacher Zuweisungssyntax.</p>
<p><b>Entfernt</b>: Schlüsselwort <code>var</code>, das in Klassendefinitionen verwendet wurde; benutzt stattdessen <code>static</code>.</p>
<p>Hinzugefügt: Neue interne Variablen: A_ScriptHwnd und A_PriorKey.</p>
<p>Hinzugefügt: Neue interne Funktionen: GetKeyName(), GetKeyVK(), GetKeySC() und IsByRef().</p>
<p>Hinzugefügt: Neuer Unterbefehl: WinGet, AusgabeVar, ProcessPath.</p>
<p>Hinzugefügt: Ein Fenster kann nun mithilfe des Prozessnamens oder -pfads angegeben werden: <code>ahk_exe %Name%.exe</code> oder <code>ahk_exe %VollständigerPfad%</code>.</p>
<p>Optimiert: ProcessName-Unterbefehl von WinGet.</p>
<p>Geändert: SetTimer verwendet A_ThisLabel, falls das Label weggelassen wird.</p>
<p>Aktualisiert: ComObjConnect() kann ein Objekt anstelle eines Funktionsnamenpräfix verwenden.</p>
<p>Verbessert: ComObjConnect() kann das Präfix/Objekt aktualisieren, ohne es dabei trennen zu müssen.</p>
<p>Verbessert: Parsing von Fortsetzungsbereiche erlauben Ausdrücke wie <code>(x.y)[z]()</code>, ohne "(" mit einem Escapezeichen versehen zu müssen.</p>
<p>Methode ersetzt, die verwendet wurde, um Skript-Texte in 32-Bit-kompilierte Skripte zu speichern; sie nun mit 64-Bit kompatibel.</p>
<p>Behoben: Erkennen von ALTGR bei der Tastaturbelegung des aktiven Fensters (bei Unicode-Builds).</p>
<p>Behoben: SendInput hat ein überflüssiges LCTRL-UP-Ereignis nach einem ALTGR-UP-Ereignis durchgeführt.</p>



<h2 id="v1.1.00.01">1.1.00.01 - 17. Juli 2011</h2>
<p>Behoben: Modifikatortasten wurden beim Senden von Sonderzeichen nicht automatisch losgelassen.</p>
<p>Behoben: Konflikte beim Neubelegen mit Scancode/Modifikatortaste wie sc1xx anstelle von ^sc0xx.</p>
<p>Behoben: $ und #UseHook waren unwirksam, wenn sie nur bei der zweiten oder nachfolgenden Instanzen eines Hotkeys verwendet wurden.</p>
<p>Behoben: Potentieller Absturz bei der Rückgabe eines Werts von einer __Delete-Meta-Funktion.</p>
<p>Behoben: Warnungen "Nicht initialisierte Variable" wurden vom Debugger ausgelöst.</p>
<p>Geändert: <code>base.Methode()</code> löst nun nicht mehr eine Standard-Meta-Funktion oder eine Warnung aus.</p>
<p>Geändert: <code>Gui +(Ex)Style</code> versteckt/zeigt nicht länger das GUI-Fenster.</p>
<p>Debugger geändert, damit er bei nicht initialisierten Variablen Typ="undefined" meldet.</p>
<p>Überprüfung hinzugefügt, um das Senden von falschen Zeichen zu verhindern, die die Hankaku-Taste benötigen.</p>
<p>Zusätzliche Unterstützung für Integer als Variablennamen von Klassen.</p>
<p>Das Schlüsselwort "static" für die Deklaration von Klassenvariablen hinzugefügt.</p>

<h2 id="v1.1.00.00">1.1.00.00 - 1. Mai 2011</h2>
<h4>Neue Features:</h4>
<p>Einfache <a href="Objects.htm#Custom_Classes">Syntax für Klassendefinition</a> implementiert.</p>
<p>Schlüsselwort <code><a href="Objects.htm#Custom_NewDelete">new</a></code> für die Erstellung eines verzweigten Objekts.</p>
<p><a href="commands/Func.htm">Func()</a> für das Abrufen einer Referenz auf einer vorhandenen Funktion hinzugefügt und <a href="commands/IsFunc.htm">IsFunc</a> verbessert, um <a href="Objects.htm#Function_References">Funktionsverweise</a> zu erkennen.</p>
<p>Zusätzliche Unterstützung für <code>++</code> und <code>--</code> mit Objektfeldern, wie z. B. <code>x.y[z]++</code>.</p>

<h4>Änderungen:</h4>
<p>__Delete löst nicht mehr __Call aus.</p>
<p>OnClipboardChange verwendet AddClipboardFormatListener je nach Verfügbarkeit (d. h. in Windows Vista oder höher), um die Zuverlässigkeit zu verbessern.</p>
<p>Autoverkettung mit <code>(</code> ist genauer, daher funktionieren einige ungültige Ausdrücke wie <code>12(34)</code> nicht länger.</p>

<h4>Fehlerbehebungen:</h4>
<p><code>SetTimer Label, -0</code> führt nun dazu, dass das Label "einmal und sehr bald" ausgeführt wird.</p>
<p>A_MyDocuments usw. verwendet nun SHGetFolderPath anstelle eines nicht dokumentierten Registry-Keys.</p>
<p>Fehler mit nicht leerer Textausnahme behoben, dass Fenster ohne Text ausgeschlossen werden.</p>

<h2 id="v1.0.97.02">1.0.97.02 - 14. April 2011</h2>
<p>Fehler durch Fehlinterpretation des Kommas als Argument-Trennzeichen behoben, wenn es mit <code>{}</code> in einem Ausdruck umschlossen wird.</p>
<p>For-Schleife setzt A_Index erst nach der Auswertung des <i>Ausdruck</i>-Arguments, damit der äußere Wert der Schleife verwendet werden kann.</p>
<p>Standardposition des Skripts basiert nun auf das Verzeichnis mit der EXE (wie dokumentiert) und nicht auf das Arbeitsverzeichnis.</p>
<p>Verbesserte Gültigkeitsprüfung während der Ladezeit, um ungültige Versuche zu erkennen, mit Goto aus einer Funktion "herauszuspringen".</p>

<h2 id="v1.0.97.01">1.0.97.01 - 2. April 2011</h2>
<p>Fehler im 64-Bit-Build behoben, um HWNDs oder SendMessage/PostMessage-Parameter nicht auf 32 Bit zu verkürzen.</p>
<p><code>*/::</code> ist nicht länger ein ungültiger Hotkey (fehlerhaft seit L54).</p>
<p>Fehler bei den Symbolen behoben.</p>
<h2 id="v1.0.97.00">1.0.97.00 - 28. März 2011</h2>
<p><code>{key: value}</code> als vereinfachte Syntax für <code>Object("key", value)</code>.</p>
<p><code>[x, y, z]</code> als vereinfachte Syntax für <code>Array(x, y, z)</code>, dass <code>Object(1, x, 2, y, 3, z)</code> entspricht.</p>
<p>Kleine Optimierung: jeder Referenz auf True, False, A_PtrSize oder A_IsUnicode wird während der Ladezeit in Ausdrücke aufgelöst.</p>
<p>Hotkey-Parser behandelt <code>x &amp; ^y</code> nun als Fehler, anstatt <code>^</code> zu ignorieren.</p>

<h2 id="v1.0.96.00">1.0.96.00 - 21. März 2011</h2>
<h4><b>Neue Features:</b></h4>
<p><a href="commands/ComObjQuery.htm">ComObjQuery</a>: Fordert ein Interface oder Service eines COM-Objekts an.</p>
<p><a href="commands/ComObjFlags.htm">ComObjFlags</a>: Ermittelt oder ändert Flags, die das Verhalten eines COM-Wrapper-Objekts kontrollieren.</p>
<p><a href="commands/ComObjCreate.htm">ComObjCreate</a> kann Non-Dispatch-Objekte erstellen, wenn ein Interface-Identifikator (IID) gegeben ist.</p>
<p><a href="commands/ComObjArray.htm">COM-Arrays</a> unterstützen For-Schleifen und die Clone()-Methode.</p>
<p>ListVars zeigt zusätzlich zur Adresse des Wrappers den inneren Typ und Wert einer Variante von jedem COM-Wrapper-Objekt an.</p>
<h4><b>Änderungen:</b></h4>
<p>Wenn ein direkt geschriebener Integer oder eine Variable, die eine numerische Zeichenkette und einen zwischengespeicherten Binär-Integer enthält, einem Objekt-Feld zugewiesen wird, wird ein Integer anstelle einer Zeichenkette gespeichert. Dadurch werden insbesondere Skripte beim Aufrufen von COM-Methoden begünstigt, die Integer anstelle von Zeichenketten akzeptieren oder sich je nach Werttyp unterschiedlich verhalten.</p>
<p>NULL-Werte können nun mit ComObjParameter für die Typen VT_UNKNOWN und VT_DISPATCH verwendet werden.</p>
<p>Verbesserte Unterstützung für CLR-Objekte (Common Language Runtime [.NET]) mithilfe von COM.</p>
<p>FileRecycle sollte nun vorher warnen, wenn eine Datei gelöscht wird, die zu groß für den Papierkorb ist.</p>
<p>Wenn ein SafeArray, mit ComObjArray erstellt, einem Element eines anderen SafeArrays zugewiesen ist, dann wird eine seperate Kopie erstellt. Dadurch wird verhindert, dass das Skript aufgrund des zweiten Versuchs abstürzt, den Array zu "zerstören". Mit ComObjFlags kann dieses Verhalten verhindert werden.</p>
<h4><b>Fehlerbehebungen:</b></h4>
<p>Bei dem Versuch, einem COM-Array des Typs VT_DISPATCH oder VT_UNKNOWN etwas zuzuweisen, stürzte das Skript ab.</p>
<p>Break und Pause wurden manchmal außerhalb von Schleifen toleriert.</p>
<p>Ein alleinstehendes CR-Zeichen (`r) wurde nicht korrekt als Zeilenende interpretiert.</p>
<p>MouseMove berechnete negative Koordinaten im SendInput- und SendEvent-Modus falsch.</p>
<p>Das Auswählen von <i>Edit This Script</i> im Tray-Menü oder Verwenden des Edit-Befehls führte zum Absturz des Skripts (fehlerhaft seit v1.0.95).</p>
<p>Fehlermeldungen zeigten manchmal auf irrelevante Codezeilen.</p>

<h2 id="v1.0.95.00">1.0.95.00 - 12. März 2011</h2>
<p>Alle Datei-Eingaben/Ausgaben wurden stark optimiert.</p>
<p><a href="commands/_Warn.htm">#Warn</a> für Fehleranalyse; ursprüngliches Design von ac.</p>
<p>Wenn standardmäßig <i>name_var</i> einen Funktionsnamen enthält, dann ruft <code>name_var.()</code> eine Funktion auf. Dieses Verhalten kann mithilfe des <a href="Objects.htm#Default_Base_Object">Standard-base-Objekts</a> überschrieben werden, wie es zuvor auch schon möglich war.</p>
<p>Run unterstützt nun Verben mit Parametern, wie z. B. <code>Run *RunAs %A_ScriptFullPath% /Param</code>.</p>
<p>Wenn ein Operator nach einer in Anführungszeichen gesetze Zeichenkette erfolgt, der entweder einen Operanden (<code>&amp;x</code>) oder zwei <i>numerische</i> Operanden (<code>x &amp; y</code>) akzeptieren kann, dann erfolgt die Auto-Verkettung und der Operator nur für den rechten Operanden. Denn in Anführungszeichen gesetzte Zeichenketten werden immer als nicht-numerisch betrachtet und sind deshalb keine gültigen Eingaben für numerische Operationen. Zum Beispiel funktionieren nun Ausdrücke wie <code>"x" &amp;y</code> und <code>"x" ++y</code>.</p>
<p><b>Behoben:</b></p>
<ul>
<li>Platzhalter-Hotkeys respektieren in bestimmten Fällen keine Modifikatoren wie <code>^!+</code>.</li>
<li>File.Pos gab bei nicht-suchenden Dateitypen irgendwelchen Müll zurück; es gibt nun -1 zurück.</li>
<li>File.AtEOF war manchmal fälschlicherweise wahr.</li>
<li>COM-Wrapper-Objekte setzten A_LastError manchmal nicht.</li>
<li>GUI-Untermenü-Symbole funktionierten nicht in Windows 2000/XP/Server 2003.</li>
<li>SplashImage beschnitt das Bild, falls Höhe &gt; Breite war.</li>
<li>ComObjConnect gab keinen Alarm, wenn der erste Parameter ungültig war.</li>
<li>SplashImage verwendet jetzt nur noch GDI+, wenn die anderen Methoden aus Kompatibilitätsgründen fehlschlagen.</li>
<li>Das Tilde-Zeichen in <code>~x::</code> beeinflusst nun <code>x &amp; y::</code> auf die gleiche Weise wie <code>~x &amp; z::</code>, anstatt ohne Effekt.</li>
<li>A_PriorHotkey und A_TimeSincePriorHotkey haben jetzt die erwarteten Werte, wenn mit #If verwendet.</li>
<li>RegExReplace durchlief die Zeichenkette nach einem Übereinstimmungsfehler nicht richtig, wenn die Zeichenkette ASCII-fremde Zeichen enthält.</li>
</ul>
<h2 id="v1.0.92.02">1.0.92.02 - 19. Januar 2011</h2>
<p>Speicherleck behoben, der auftrat, wenn der Rückgabewert eines Objektaufrufs oder einer internen Funktion nicht verwendet wurde, wie z. B. <code>file.ReadLine()</code> oder <code>SubStr(x,y,z)</code> allein in einer Zeile.</p>
<p>Die Fehlerbehebung von v1.0.92.01 wurde mit einer besseren Fehlerbehebung ersetzt, wodurch auch der Fehler bei <code>k::MsgBox(),x:=y</code> behoben wird und <code>if()</code> nicht defekt ist.</p>
<h2 id="v1.0.92.01">1.0.92.01 - 18. Januar 2011</h2>
<p>Geändert: FileCreateDir setzt nun A_LastError.</p>
<p>Behoben: <code>GuiControl()</code> oder Ähnliches wurde manchmal als Befehl fehlinterpretiert.</p>

<h2 id="v1.0.92.00">1.0.92.00 - 13. Januar 2011</h2>
<p>Zusätzliche Unterstützung für Verbundzuweisungen wie <code>x.y += z</code>.</p>
<p>IniWrite in Unicode-Builds verbessert, damit die leere Zeile am Anfang jeder neuen Datei nicht mehr auftaucht.</p>
<p>Der Parser ist nun toleranter damit, was nach <code>{</code>/<code>}</code>/<code>Else</code> folgen kann, besonders wenn sie kombiniert werden.</p>

<h2 id="v1.0.91.05">1.0.91.05 - 1. Januar 2011</h2>
<p>Behoben: Der Cleanup-Code in COM-Methode-Aufrufen gab die falschen Parameter frei.</p>
<p>Behoben (ANSI): DllCall setzte eine inkorrekte Länge für WStr-Parameter bei der Ausgabe.</p>
<p>Behoben: Variadische Funktionsaufrufe waren instabil, wenn ein param-Objekt leer war.</p>

<h2 id="v1.0.91.04">1.0.91.04 - 29. Dezember 2010</h2>
<p>Behoben (Unicode): RegExReplace ließ den ganzen Text bis zur Startposition weg (fehlerhaft seit v1.0.90.00).</p>

<h2 id="v1.0.91.03">1.0.91.03 - 27. Dezember 2010</h2>
<p>Behoben: RegEx-Callout-Teilausdruck-Variablen - fehlerhaft seit v1.0.90.00.</p>

<h2 id="v1.0.91.02">1.0.91.02 - 26. Dezember 2010</h2>
<p>COM: Zusätzlicher Schutz gegen NULL-IDispatch/IUnknown-Pointer.</p>
<p>COM: QueryInterface für IDispatch überspringen, sobald VT_DISPATCH explizit übergeben wird.</p>
<p>Kleine Fehlerbehebung für die Wartbarkeit: <code>obj.field := var</code> ergibt nun korrekt SYM_STRING, nicht SYM_OPERAND.</p>

<h2 id="v1.0.91.01">1.0.91.01 - 24. Dezember 2010</h2>
<p>Behoben: Unerwartete Ergebnisse mit <code>File.Write(Str)</code>, nachdem der Text eingelesen wurde.</p>
<p>Behoben: Die Überprüfung der UTF-Stückliste verursachte unerwartete Ergebnisse in Dateien ohne Stückliste.</p>
<p>Behoben (ANSI): Parsende Schleifen und <code>File.ReadLine()</code> behandelten <code>Chr(255)</code> als EOF.</p>
<p>Behoben (Unicode): RegExReplace-Fehler, wo sich UTF-8- und UTF-16-Längen unterschieden.</p>
<p>Behoben: Deaktiviert den Abbruch von Input durch den letzten Hook-Hotkey.</p>
<p>Hinzugefügt: Einfache Optimierungen für RegExMatch/Replace.</p>

<h2 id="v1.0.91.00">1.0.91.00 - 21. Dezember 2010</h2>
<p><i>Alle Änderungen in dieser Version beziehen sich auf COM.</i></p>
<p>Hinzugefügt: <a href="commands/ComObjError.htm">ComObjError</a> gibt nun die vorherige Einstellung zurück.</p>
<p>Hinzugefügt: <a href="commands/ComObjType.htm">ComObjType(co)</a> und <a href="commands/ComObjValue.htm">ComObjValue(co)</a>.</p>
<p>Hinzugefügt: <a href="commands/ComObjActive.htm">ComObjMissing()</a>.</p>
<p>Hinzugefügt: <a href="commands/ComObjArray.htm">ComObjArray()</a> und einfache SAFEARRAY-Unterstützung.</p>
<p>Hinzugefügt: "Übernehmen"-Parameter für <a href="commands/ComObjActive.htm">ComObjParameter()</a>.</p>
<p>Geändert: Werte, die an COM-Funktionen mithilfe von ComObjParameter übergeben werden, werden nicht länger während dem Aufruf der Funktion freigegeben.</p>
<p>Geändert: <code>ComObj.x()</code> fällt nun auf PROPERTYGET zurück, wenn Element 'x' nicht gefunden wird. Dadurch werden Fehler in For-Schleifen für einige Objekte behoben.</p>
<p>Geändert: Wrappt unbehandelte Variantentypen in ein Objekt, anstatt einen Integer-Wert zurückzugeben.</p>
<p>Geändert: Verwaltet standardmäßig die Lebensdauer von VT_UNKNOWN / VT_ARRAY automatisch.</p>

<h2 id="v1.0.90.00">1.0.90.00 - 27. November 2010</h2>
<p>Behoben: URLDownloadToFile in Unicode-Builds niedriger als Windows 7.</p>
<p>Behoben: Großgeschriebene ANSI-Zeichen wurden als ALT+0 im ANSI-Build gesendet.</p>
<p>Behoben: File.Pos wurde nach dem Versuch inkorrekt, das letzte EOF einzulesen.</p>
<p>Behoben: Escapesequenzen in #If-Ausdrücke und statischen Initialisierungen.</p>
<p>Behoben: ClipboardAll führte manchmal zum Absturz des Skripts in bestimmten Formaten.</p>
<p>Behoben: Transform HTML berechnete die Länge für "&amp;#NNN;"-Entitäten falsch.</p>
<p>Behoben: VarSetCapacity ignoriert nun korrekterweise #MaxMem bei ByRef-Variablen.</p>
<p>Behoben: <code>FileAppend,,Datei.txt</code> setzt ErrorLevel auf 1, selbst bei Erfolg.</p>
<p>Behoben: Übereinstimmungslänge wurde bei RegEx-Callouts mit der P)-Option falsch berechnet.</p>
<p>Sean's Verbesserungen für die Zahlhandhabung in eine COM-Interoperation integriert.</p>
<p>RegExReplace und RegExMatch in Unicode-Builds optimiert.</p>

<h2 id="L61">Revision 61 - 3. Oktober 2010</h2>
<p>Hinzugefügt: <code>ObjClone(Object)</code> wurde vergessen, als <code>Object.Clone()</code> implementiert wurde.</p>
<p>Hinzugefügt: Unterstützung für RegEx-Unicode-Eigenschaften in Unicode-Builds. Außerdem wurde PCRE auf 8.10 aktualisiert.</p>
<p>Hinzugefügt: <code>Object.Remove(int, "")</code> entfernt <code>Object[int]</code> ohne dabei andere Tasten zu beeinflussen.</p>
<p>Geändert: <code>ComObj.xyz()</code> wird nun immer als Methodenaufruf behandelt.</p>
<p>Geändert: <code>Var := 123</code> bleibt nun ein Ausdruck, um Widersprüche zu vermeiden. Dadurch sind <code>Var := 123</code> und <code>Var := (123)</code> gleichwertig, während früher dem Vorherigen nur eine Zeichenkette und dem Letzteren sowohl eine Zeichenkette als auch ein zwischengespeicherter Binär-Integer zugewiesen wurde. Insbesondere werden dadurch einige verwirrende Typenunverträglichkeiten mit COM-Objekten verhindert.</p>
<p>Behoben: Dynamische variadische Aufrufe von Funktionen mit Pflichtparametern.</p>
<p>Behoben: Der letzte Parameter einer variadischen Assume-Global-Funktion musste explizit lokal deklariert werden.</p>
<p>Behoben: Statische Initialisierungen interferieren mit der Einstellung der Haltemarke.</p>
<p>Behoben: Mehr Pointergröße-Fehler bei PCRE-Callouts in x64-Builds.</p>
<p>Behoben: Input mit 'M'-Option behandelte STRG+M (<code>`r</code>) als STRG+J (<code>`n</code>).</p>
<p>Behoben: <code>Object.Remove(n)</code> gab 0 zurück (nicht ""), wenn <code>Object[n]</code> nicht vorhanden war.</p>

<h2 id="L60">Revision 60 - 24. September 2010</h2>
<p>Hinzugefügt: <a href="objects/File.htm#Encoding">File.Encoding</a> für das Ändern oder Abrufen des Zeichensatzes mithilfe eines File-Objekts.</p>
<p>Hinzugefügt: <a href="Functions.htm#Variadic">Variadische Funktionen und Funktionsaufrufe</a> und <a href="commands/RegisterCallback.htm#Indirect">indirekter Modus</a> für Callbacks.</p>
<p>Hinzugefügt: <a href="objects/Object.htm#Clone">Object.Clone()</a></p>
<p>Geändert: ByRef-Parameter benötigen nicht länger den Aufrufer, um eine Variable zu liefern.</p>
<p>Geändert: <code>Obj.foo := ""</code> gibt nun den Inhalt von foo wie vorgesehen frei (das Feld wird aber weiterhin nicht entfernt).</p>
<p>Geändert: OnMessage-Funktionen tolerieren nun optionale Parameter und ByRef-Parameter.</p>
<p>Geändert: RegisterCallback ermöglicht nun Ausführungszugriff auf Callbacks in 32-Bit-Versionen (in 64-Bit-Builds bereits möglich).</p>
<p>Geändert: RegisterCallback behandelt Parameteranzahl = "" eindeutig als weggelassen.</p>
<p>Behoben: For-Schleife behandelte eine nicht-ausdrucksartige "0" als wahr für geskriptete Enumeratoren.</p>
<p>Behoben: ComEvent (ComObjConnect) funktionierte nicht im ANSI-Build.</p>
<p>Behoben: ComEvent (ComObjConnect) hat nicht korrekt lokale Variablen abgesichert/wiederhergestellt, wenn eine Funktion aufgerufen wurde, die bereits läuft.</p>
<p>Behoben: Pufferüberlauf in A_EndChar, wenn kein Endungszeichen vorhanden ist.</p>
<p>Behoben: Func-&gt;mNextFunc nicht auf NULL initialisiert (wird nur von systemnahen Skripten verwendet).</p>
<p>Debugger: Ermöglicht das Abrufen des Inhalts vom Objekt (mit einem unterstützten Debugger-Client).</p>
<p>Debugger: Einige Fehler behoben.</p>

<h2 id="L59">Revision 59 - 12. September 2010</h2>
<p>Behoben: #If <i>Ausdruck</i> sollte nun jeden <i>Ausdruck</i> höchstens einmal pro Tastatureingabe in allen Fällen auswerten.</p>
<p>Geändert: SplashImage verwendet allgemeine Routinen zum Laden von Bildern; das heißt, dass absofort PNG und Vergleichbares unterstützt wird, aber auch, dass die Ergebnisse bei Symboldateien anders aussehen können.</p>
<p>Hinzugefügt: <code><a href="commands/For.htm">For x,y in z</a></code>.</p>
<p>Hinzugefügt: <code>Loop .. <a href="commands/Until.htm">Until</a> <i>Ausdruck</i></code>, mit jeder Schleife oder For-Schleife verwendbar.</p>
<p>Hinzugefügt: Benannte Schleifen; <code><a href="commands/Continue.htm">continue</a> äußere_Schleife</code>, <code><a href="commands/Break.htm">break</a> 2</code>, usw.</p>
<p>Debugger: Kodiert stdout- und stderr-Pakete in UTF-8.</p>
<p>Debugger: Erlaubt das Abbrechen, <b>Wiederholen</b> oder Ignorieren, wenn die erste Verbindung fehlschlägt.</p>
<p>Debugger: Erlaubt das <a href="Scripts.htm#debug_attach">Anbringen eines Debugger-Clients</a>, wenn dem Skript eine registrierte Fenstermeldung gesendet wird.</p>
<p>Debugger: Erlaubt das Abtrennen des Debugger-Clients, wenn der Befehl für das "Abtrennen" von DBGp gesendet wird.</p>

<h2 id="L58">Revision 58 - 5. September 2010</h2>
<p>Hinzugefügt: <code>static Variable := Ausdruck</code>.</p>
<h2 id="L57">Revision 57 - 4. September 2010</h2>
<p>Fehler bei den DllCall-Rückgabetypen Str*, WStr* und AStr* auf x64 behoben.</p>
<p>Zusätzliche Funktionalität für <a href="commands/InStr.htm">InStr</a>, um es in Einklang mit StringGetPos zubringen:</p>
<ul>
  <li>Wenn die <i>Startposition</i> negativ ist, dann erfolgt die Suche von rechts nach links, beginnend beim Offset am Ende.</li>
  <li>Ein zusätzlicher Parameter ist verfügbar, um das <i>Vorkommen</i> einer Zeichenkette zu bestimmen, die gefunden werden soll.</li>
</ul>
<p><code><a href="commands/_Include.htm">#Include</a> &lt;<i>BiblName</i>&gt;</code> hinzugefügt, um explizit ein Skript aus einem <a href="Functions.htm#lib">Funktionsbibliotheksordner</a> einzubinden.</p>
<p>Zusätzliche Funktionalität für <a href="commands/IniRead.htm">IniRead</a> und <a href="commands/IniWrite.htm">IniWrite</a>, um eine ganze Sektion zu lesen oder zu schreiben.</p>
<p>Zusätzliche Funktionalität für <a href="commands/IniRead.htm">IniRead</a>, um eine Liste mit Sektionen abzurufen.</p>
<p>Zusätzliche Unterstützung von <a href="commands/Run.htm#verbs">benutzerdefinierten Verben</a> in Run/RunWait: <code>Run *<i>Verb Datei</i></code>.</p>
<p><a href="Compat.htm#Run">Verbesserungen</a> für die Vorgehensweise von Run/RunWait, die Aktion und seine Parameter vom <i>Ziel</i>-Parameter zu extrahieren.</p>
<p><a href="commands/NumGet.htm">NumGet</a>/<a href="commands/NumPut.htm">NumPut</a> geändert, damit <i>Offset</i> ganz weggelassen werden kann, da der <i>Typ</i> immer nicht-numerisch ist.</p>
<p>Einschränkung entfernt, dass Label nicht auf das Ende eines Blocks verweisen können.</p>

<h2 id="L56">Revision 56 - 29. August 2010</h2>
<p>Zusätzliche Unterstützung für x64-kompilierte Skripte. Benötigt Ahk2Exe_L und x64 AutoHotkeySC.bin.</p>
<p>Behoben: Deref-Operator (<code>*addr</code>) hat Adressen außerhalb des 32-Bit-Bereichs abgelehnt.</p>
<p>Behoben: <code>#If <i>Ausdruck</i></code> Speicherzuweisungsfehler in der x64-Version.</p>
<p>Behoben: Benutzerdefinierte Hotstring-Endungszeichen mit Codepunkte größer als U+00FF.</p>
<p>Behoben: Sonderzeichen wurden nicht in der richtigen Reihenfolge von SendInput/Play gesendet.</p>
<p>Behoben: <code>*/</code> wurde in Fortsetzungsbereichen verworfen (siehe L54).</p>

<h2 id="L55">Revision 55 - 19. August 2010</h2>
<p>Behoben: GroupActivate setzt ErrorLevel nicht auf 1, wenn kein Label angegeben wurde.</p>
<p>Behoben: Tab-Steuerelemente in x64-Builds.</p>
<p>Behoben: Zeichenketten-kopierender Modus von StrPut, wenn Länge weggelassen wird; fehlerhaft seit L53.</p>
<p>Behoben: Datenabgleichprobleme in x64-Builds.</p>
<p>Geändert: A_LastError wird bei mehreren File*-Befehlen gesetzt, um Debuggen zu unterstützen.</p>
<p>Dazu zählen FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version und FileSetAttrib/Time.</p>
<p>Jedoch nicht FileCopyDir, FileRecycle, FileMoveDir, FileRemoveDir, FileRecycleEmpty, FileCreateDir und FileInstall, weil die APIs nicht immer ein Win32-Fehlercode setzen oder zurückgeben.</p>

<h2 id="L54">Revision 54 - 15. August 2010</h2>
<p>Behoben: RunAs im Unicode-Build. [jackieku]</p>
<p>Behoben: RegisterCallback im x64-Build. [fincs]</p>
<p>Behoben: Ausführbare Dateien laufen nicht auf Win2k und WinXP unter SP2. Win2k benötigt SP4 und Updates (wahrscheinlich <a href="http://support.microsoft.com/de-de/kb/816542">KB 816542</a>). XP nicht getestet.</p>
<p>Behoben: Dialogfenster wie MsgBox reagierten nicht mehr, wenn sie von anderen Skript-Threads unterbrochen wurden. Meldungsfilter/Übergangslösung von L45 wurde entfernt.</p>
<p>Behoben: Multi-Byte-Zeichen im Standard-ANSI-Zeichensatz; verursachte auch ein Speicherleck.</p>
<p>Behoben: ComObject erlaubt nun reine numerische Eigenschafts-/Methodennamen.</p>
<p>Benutzerfreundlichkeit und Funktionen von FileOpen/File-Objekten verbessert.</p>
<ul>
  <li><i>Flags</i>-Parameter von FileOpen akzeptiert eine von Menschen lesbare Zeichenkette mit Flags.</li>
  <li>Die "update"-Methode von FileOpen wurde in "read/write" umbenannt und erstellt nun die Datei, wenn sie nicht vorhanden ist.</li>
  <li>FileOpen setzt A_LastError wie vorgesehen.</li>
  <li><code>Datei := FileOpen(handle,"h")</code> verpackt eine vorhandene Datei in ein Objekt.</li>
  <li><code>File.Seek(n)</code> benutzt standardmäßig SEEK_END, wenn n negativ ist.</li>
  <li><code>File.Pos</code> (oder <code>File.Position</code>) kann anstelle von Tell und Seek verwendet werden.</li>
  <li><code>File.Pos</code>, <code>File.Length</code>, <code>File.AtEOF</code> und <code>File.__Handle</code> können ohne leere runde Klammern<code>()</code> verwendet werden.</li>
  <li><code>File.Length</code> kann wie in <code>File.Length:=n</code> gesetzt werden.</li>
  <li><code>File.Read<i>Num</i>()</code> und <code>File.Write<i>Num</i>(n)</code> schreiben oder lesen eine Zahl, wobei <i>Num</i> ein NumGet-kompatibler Typenname ist.</li>
  <li><code>File.WriteLine(s)</code> ist gleichwertig mit <code>File.Write(s "`n")</code>, als Ausgleich für <code>File.ReadLine()</code>.</li>
  <li><code>File.Read()</code> liest und gibt den Rest der Datei zurück, wenn keine Parameter verwendet werden.</li>
  <li>File-Objekte geben nun "" bei unbekannten Methoden und bei ungültiger Syntax zurück, anstatt die numerische <i>Adresse</i> von "".</li>
</ul>
<p>Geändert: Der Label-Parameter von GroupAdd gilt nun für die gesamte Gruppe. <a href="http://www.autohotkey.com/forum/topic61362.html">[Diskussion]</a></p>
<p>Geändert: GroupActivate setzt ErrorLevel bei Erfolg/Misserfolg. (Die gleiche Diskussion wie oben)</p>
<p>Geändert: <code>*/</code> am Anfang einer Zeile wird ignoriert, wenn kein <code>/*</code> vorhanden ist. <a href="http://www.autohotkey.com/forum/topic61109.html">[Diskussion]</a></p>
<p>Die Unterbefehle ToCodePage und FromCodePage von Transform wurden entfernt.</p>

<h2 id="L53">Revision 53 - 8. August 2010</h2>

<p><b>Mit AutoHotkey64 zusammengeführt</b> - COM-Unterstützung und x64-Kompatibilität.</p>
<p><b>x64</b> (<i>Änderungen seit AutoHotkey64</i>):</p>
<ul>
  <li>Fehler bei Gleitkomma-Rückgabewerten und DllCall-Ausnahmebehandlung behoben.</li>
  <li>Fehler bei RegEx-Callouts behoben.</li>
  <li>GetProcAddress-Optimierung für DllCall wieder aktiviert.</li>
  <li>NumPut und NumGet benutzen standardmäßig "Int64" in x64-Builds.</li>
</ul>
<p><b>COM</b> (<i>Änderungen seit AutoHotkey64</i>):</p>
<ul>
  <li>Erlaubt ComObjParameter das Verpacken von 64-Bit-Werte in 32-Bit-Builds.</li>
  <li>Noch mehr Standard-Referenzzählung-Konventionen in ComObjActive implementiert.</li>
  <li>Fremdes AddRef für neue ComObjects werden in bestimmten Fällen verhindert.</li>
  <li>Rückgabewert von pdispVal == NULL wird beim Aufruf nicht als Fehler behandelt.</li>
  <li>Ein Fehlschlag ist vorhersehbarer, wenn ein falscher Typ des Objekts übergeben wird.</li>
  <li>Der zweite Parameter in ComObjType wird direkt benötigt, ohne dabei "IID" zu übernehmen.</li>
  <li>Lokale Variablen werden freigegeben, nachdem ComEvent eine Funktion aufgerufen hat.</li>
  <li>Den pVarResult-Parameter von ComEvent wurde entfernt; verwendet stattdessen den Rückgabewert.</li>
  <li>Das originale Wrapper-ComObject wird bei jedem ComEvent-Aufruf übergeben.</li>
  <li>Kontext bei ComError-Dialogfenster hinzugefügt; die Buttons sind eindeutiger.</li>
</ul>
<p>Gängige Syntaxvalidierung für Enumeratoren implementiert. <code>Enum[]</code> und <code>Enum.Next()</code> werden nun mit oder ohne Parameter unterstützt. <code>Enum[]:=Wert</code> und ähnliche unklare Formen, die in AutoHotkey_COM/AutoHotkey64 funktionierten, sind nicht mehr erlaubt.</p>
<p>"Ptr"-Type ist für maximale Flexibilität und Konsistenz weiterhin signed (im Gegensatz zu AutoHotkey64).</p>
<p><b>Sonstige Änderungen:</b></p>
<p>Hinzugefügt: <code>Objekt.<b>HasKey</b>(key)</code>.</p>
<p>Hinzugefügt: <code>Object(obj)</code> erhöht die Referenzzählung von obj und gibt dessen Adresse zurück.</p>
<p>Hinzugefügt: <code>ObjAddRef()</code> und <code>ObjRelease()</code>.</p>
<p>Behoben: A_ThisHotkey hat jetzt den erwarteten Wert, wenn mit #If verwendet.</p>
<p>Behoben: RunAs im Unicode-Build (Fehler von jackieku behoben).</p>
<p>Geändert: Standard-Skript-Zeichensatz für ANSI-Builds ist nun CP0 (ANSI).</p>
<p>Geändert: <code>x.y[]</code> ist nun gleichwertig mit <code>(x.y)[]</code> anstatt mit <code>x["y"]</code>.</p>
<p>Geändert: Interne Methoden können nun mit oder ohne Unterstrich-Präfix aufgerufen werden (z. B. <code>obj.MaxIndex()</code> oder <code>obj._MaxIndex()</code>).</p>

<h2 id="L52">Revision 52 (nochmal) - 10. Juli 2010</h2>
<p>Zusätzliche Unterstützung für interne Variablen und Umgebungsvariablen in Doppeldereferenzen.</p>
<p>Verbesserte Unterstützung für Multi-Byte-Zeichen in bestimmten Zeichensätzen (bisher wurden nur 932, 936, 949, 950 und 1361 unterstützt).</p>
<p>Behoben: StrPut schlug bei Zeichensätzen fehl, die WC_NO_BEST_FIT_CHARS wie UTF-7 nicht unterstützten.</p>
<p>Behoben: Doppeldereferenz als Objekt - <code>text%var%.text</code>.</p>
<p>Behoben: <code>StrPut("", Codierung)</code> 0-terminierte eine ungültige Adresse.</p>

<h2>Revision 52 - 12. Juni 2010</h2>
<p>Behoben: Der Key-Parameter von ObjRemove ist wie bei <a href="objects/Object.htm#Remove">Object._Remove</a> nun optional.</p>
<p>Behoben: Dateien wurden im Gegensatz zu älteren Versionen während des Lesens nicht ordnungsgemäß gesperrt.</p>
<p>Behoben: Großgeschriebenes Hex-Format verursachte negative Integer, dass unsigned zu Folge hatte.</p>
<p>Behoben: RegExMatch machte Ausgabe-Array-Elemente unbrauchbar, wenn bestimmte Bedingungen erfüllt wurden. Siehe <a href="http://www.autohotkey.com/forum/topic59120.html">Fehlerbericht</a>.</p>

<h2 id="L51">Revision 51 - 11. April 2010</h2>
<p>Geändert: Verwendet &lt;EXENAME&gt;.ahk anstelle von AutoHotkey.ini oder AutoHotkey.ahk.</p>
<p>Geändert: Verwendet standardmäßig UTF-8 für Skript-Dateien; mit /CPnnn überschreiben.</p>
<p>Behoben: Hebt die Pause auf, falls das Skript beendet wird, damit die __Delete-Metafunktion des Objekts ausgeführt werden kann.</p>

<h2 id="L50">Revision 50 - 27. März 2010</h2>
<p>Verbesserte Flexibilität für <a href="objects/Object.htm#Insert">Objekt._Insert</a>.</p>
<ul>
  <li><code>Objekt._Insert(x)</code> - x wird bei <code>_MaxIndex()="" ? 1 : _MaxIndex() + 1</code> eingefügt.</li>
  <li><code>Objekt._Insert(i,x,y,z)</code> - <code>x,y,z</code> wird bei <code>i,i+1,i+2</code> eingefügt.</li>
</ul>
<p>Verbesserte Flexibilität für <a href="objects/Object.htm#Remove">Objekt._Remove</a>.</p>
<ul>
  <li><code>Objekt._Remove(k)</code> - entfernt und gibt den Wert von k zurück.</li>
  <li><code>Objekt._Remove()</code> - entfernt und gibt den Wert von _MaxIndex() zurück.</li>
</ul>
<p>Freigabemodus-Flags für FileOpen hinzugefügt [von jackieku].</p>
<p>Behoben: Behoben: P-Option von RegExMatch gab bei Teilausdrücken fälschlicherweise 1 zurück, die mit nichts übereinstimmten.</p>
<p>Behoben: <code>Objekt._SetCapacity(key,n)</code> wurde in einigen Fällen nicht 0-terminiert.</p>
<p>Behoben: StatusBarGetText gab nur den halben Text in den Unicode-Builds zurück.</p>

<h2 id="L49">Revision 49 - 14. März 2010</h2>
<p><a href="objects/Object.htm#NewEnum">obj._NewEnum()</a> hinzugefügt.</p>
<p><a href="objects/Object.htm">ObjMethod(obj)</a> für jede interne <code>obj._Method()</code> hinzugefügt.</p>
<p>Geändert: ObjSet/Get/Call kann nicht länger vom Skript aufgerufen/überschrieben werden.</p>
<p>Behoben: Potentieller Absturz durch die VK_PACKET-Überprüfung, die in L48 hinzugefügt wurde.</p>
<p>Behoben: Zeichencodes in VK_PACKET-Ereignisse wurden potenziell als Scancodes fehlinterpretiert.</p>
<p>Behoben: Ausnahmetext wurde nach dem ersten übereinstimmenden Steuerelement ineffektiv.</p>

<h2 id="L48">Revision 48 - 21. Februar 2010</h2>
<p>Behoben: Alleinstehendes <code>obj.()</code> wurde nicht als gültiger Ausdruck erkannt.</p>
<p>ControlSend verwendet nun WM_CHAR, um Zeichen ohne zugehörigem Tastencode zu unterstützen. Solche Zeichen sind beispielsweise "…" (en-US), "∞" in einem Unicode-Build und <code>{U+221e}</code> in jedem Build.</p>
<p>KeyHistory zeigt nun den kompletten 16-Bit-Zeichencode von VK_PACKET-Ereignisse (VK=E7) an. Mit <a href="commands/Send.htm#Unicode">Send</a> wurden sie möglicherweise für Unicode-Zeichen erzeugt.</p>

<h2 id="L47">Revision 47 - 13. Februar 2010</h2>
<p>Behoben (Unicode): ControlGet,List mit ListView-Steuerelemente.</p>

<h2 id="L46">Revision 46 - 11. Februar 2010</h2>
<p>A_FileEncoding hinzugefügt, um die aktuelle Standard-Dateicodierung zurück zugeben.</p>
<p><a href="commands/StrPutGet.htm">StrPut</a> hinzugefügt und <a href="commands/StrPutGet.htm">StrGet</a> mit zusätzlichen Funktionen erweitert.</p>

<h2 id="L45">Revision 45 - 8. Februar 2010</h2>
<p>_GetAddress hinzugefügt; _SetCapacity/_GetCapacity bearbeitet nun möglicherweise ein gegebenes Feld. <a href="objects/Object.htm">[mehr Infos]</a></p>
<p>Übergangslösung für WM_PAINT-Endlosschleifen hinzugefügt, die häufig durch Unterklassen verursacht wurden.</p>
<p>Erlaubt <code>obj.()</code>, um die Standard-Methode eines Objekts aufzurufen; vergleichbar mit <code>obj[""]()</code>.</p>
<p>Entwickler: Lösung und Projekt-Dateien für MSBuild 4.0 &amp; VS2010 hinzugefügt. <a href="http://github.com/Lexikos/AutoHotkey_L/commit/ed81ea089c223b46c883036c14454aa4386d3801">[mehr Infos]</a></p>
<p>Behoben (Unicode): 'Running'-Spalte in ListHotkeys.</p>

<h2 id="L44">Revision 44 - 7. Februar 2010</h2>
<p>Behoben: Der Versuch "nichts" zu setzen, führte zum Absturz des Skripts. Zum Beispiel <code>x[]:=z</code>.</p>
<p>Behoben (Unicode): Nicht in der Lage, das Standard-Skript zu finden (Documents\AutoHotkey.ahk).</p>
<p>Behoben (Unicode): A_Desktop, A_ProgramFiles und mehrere andere interne Variablen, die deren Wert aus der Registry lesen, terminierten Zeichenketten nicht richtig.</p>
<p>Behoben (ANSI): Zeichen im Bereich 0x80 bis 0xFF konnten nicht von InStr oder StringReplace gefunden werden.</p>
<p>Geändert (ANSI): Behandelt ToCodePage/FromCodePage wie andere nicht unterstützte/ungültige Unterbefehle.</p>

<h2 id="L43">Revision 43 - 29. Januar 2010</h2>
<p>Behoben: obj.Func() gibt einen zufälligen Integer zurück, wenn es eine leere Zeichenkette sein soll.</p>

<h2 id="L42">Revision 42 - 28. Januar 2010</h2>
<p>Mit AutoHotkeyU zusammengeführt.</p>
<p>Zahlreiche Fehlerbehebungen und Verbesserungen, einige im Zusammenhang mit der Zusammenführung.</p>

<h2 id="L41">Revision 41 - 20. Dezember 2009</h2>
<p>Behoben: Gleitkommazahlen entsprachen einer leeren Zeichenkette, wenn sie als Keys in Objekten verwendet wurden. Sie werden nun wie vorgesehen in numerischen Zeichenketten umgewandelt, abhängig vom <a href="commands/SetFormat.htm">Gleitkomma-Format</a>.</p>

<h2 id="L40">Revision 40 - 13. Dezember 2009</h2>
<p>Das Verhalten von Meta-Funktionen und Multi-Parameter wurde geändert, um die Flexibilität zu verbessern. Meta-Funktionen werden nun aufgerufen, *bevor* nach einem geeigneten Feld in jedem base-Objekt gesucht wird; Werte in x.base werden Meta-Funktionen allerdings überschreiben, die in x.base.base definiert wurden. Die Verkettung von Meta-Funktionen (Vererbung) ist nun möglich, indem "Return" vermieden wird.</p>
<p>Verbesserte Standard-base-Funktionalität, um beständiger mit realen Objekten zu sein.</p>
<p>Geändert (Debugger): Während der Code durchlaufen wird, werden alle geschweifte Klammern übersprungen, nur nicht solche, die eine Funktion beenden.</p>
<p>Geändert (Debugger): Das versteckte "Exit" am Ende des Skripts befindet sich nun *unter* der letzten physischen Zeile, um Verwechslungsgefahr zu vermeiden.</p>

<h2 id="L39">Revision 39 - 2. Dezember 2009</h2>
<p>Behoben (Debugger): Fehler in der Base64-Decodierung, die von property_set verwendet wird.</p>

<h2 id="L38">Revision 38 - 17. November 2009</h2>
<p>Hinzugefügt: <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a>-Direktive, um die Taste zu ändern, mit der ALT/WIN-UP-Ereignisse maskiert werden sollen. Siehe <a href="http://www.autohotkey.com/forum/topic22378.html">diesen Thread</a> für Hintergrundinformationen.</p>
<p>Geändert: Wenn <code>x[1,2]:=3</code> ein Objekt für <code>x[1]</code> erstellt, dann wird dessen base nicht länger auf <code>x.base</code> gesetzt. Siehe <a href="Objects.htm#Subclassing_aoa">die Dokumentation</a> für ein Verfahren zur Steuerung dieses Verhaltens.</p>  

<h2 id="L37">Revision 37 - 7. November 2009</h2>
<p>Hinzugefügt: Unterstützung für die Objektaufrufsyntax <code>obj[Methodenname](Parameter)</code>.</p>

<h2 id="L36">Revision 36 - 4. November 2009</h2>
<p>Geändert: Wenn nach <code>x.y</code> oder Ähnliches unmittelbar eine eckige Startklammer (<code>[</code>) erfolgt, dann wird der Identifikator ganz rechts vor der Klammer als erster Parameter der Operation behandelt. Zum Beispiel ist <code>a.b.c[d]</code> gleichwertig mit <code>ObjGet(a.b,"c",d)</code> und <code>x.y[z]:=v</code> ist gleichwertig mit <code>ObjSet(x,"y",z,v)</code>. Zuvor wurde jeder Unterausdruck vor einer eckigen Klammer separat ausgewertet.</p>
<p>Geändert: Wenn unmittelbar nach einem Methodenaufruf wie <code>x.y()</code> eine Zuweisung erfolgt, werden die runden Klammern als eckige Klammern behandelt. Zum Beispiel ist <code>x.y(z):=v</code> nun gleichwertig mit <code>ObjSet(x,"y",z,v)</code>.</p>
<p>Behoben: If(Ausdruck) und While(Ausdruck) ohne trennendes Leerzeichen oder Komma.</p>  

<h2 id="L35">Revision 35 - 25. Oktober 2009</h2>
<p>Behoben: Alleinstehende Ausdrücke mit zwei oder mehr "Punkten" am Anfang, wie z. B. <code>x.y.z()</code>. (fehlerhaft seit L34). Beachtet, dass '(' oder '[' oder ':=' weiterhin notwendig ist.</p>

<h2 id="L34">Revision 34 - 24. Oktober 2009</h2>
<p>Geändert: Das Setzen eines Wertes auf einer leeren Zeichenkette innerhalb eines Objekts speichert nun die leere Zeichenkette, anstatt das Key-Value-Paar vom Objekt zu entfernen. _Remove kann weiterhin verwendet werden, um Key-Value-Paare vollständig zu entfernen.</p>
<p>Geändert: Befehlsnamen müssen mit einem Leerzeichen, Tabulator oder Komma terminiert werden. Die folgenden Zeichen umgehen nicht länger diese Anforderung: <code>&lt;&gt;:+-*/!~&amp;|^[]</code>. Zum Beispiel werden Syntaxfehler wie <code>MsgBox&lt; foo</code> und <code>If!foo</code> nun bei der Ladezeit abgefangen.</p>
<p>Behoben: Return behandelt nun Ausdrücke korrekt, wodurch eine Variable ein Objekt enthalten kann. Zum Beispiel sollte <code>Return x:=y</code>, <code>Return (x)</code>, <code>Return x,...</code> und ähnliches nun richtig funktionieren (<code>Return x</code> hat bereits funktioniert).</p>
<p>Behoben: Multi-Parameter get/set unterstützte Meta-Funktionen für mehrere Objekte nicht richtig (wie z. B. für <code>x</code> <i>und</i> <code>x[y]</code> im Ausdruck <code>x[y,z]</code>).</p>
<p>Behoben: Hintereinanderfolgende Objektzuweisungen wie z. B. <code>x[y]:=z</code> in <code>r:=x[y]:=z</code> ergaben keine Zahlen oder Objekte - fehlerhaft seit L33.</p>
<p>Behoben: <code>x._Remove(y)</code> führte zum Absturz des Skripts oder entfernte das falsche Element, wenn <code>x</code> nicht <code>y</code> enthielt.</p>
<p>Behoben: <code>x.=y</code>, <code>if x.y=...</code> und Ähnliches. Betrifft wahrscheinlich auch andere Ausdrücke.</p>
<p>Behoben: Allein stehende ternäre Ausdrücke benötigen nicht länger Leerräume. Zum Beispiel ist <code>x? F(1) : F(2)</code> nicht länger erlaubt.</p>
<p>Debugger: Beim Beenden des Skripts wird der Debugger getrennt, *nachdem* Objekte freigegeben wurden, um das Debuggen von __Delete-Handler zu ermöglichen.</p>

<h2 id="L33">Revision 33 - 3. Oktober 2009</h2>
<p>Behoben: Lokale Variablen wurden nicht automatisch für Funktionen freigegeben, die Objekte oder reine Zahlen zurückgaben.</p>
<p>Behoben: Zwei separate Referenzzählungsfehler beim ternären Operator und Object().</p>
<p>Behoben: Wenn einer Variable eine Zeichenkette zugewiesen wurde, die von einer geskripteten Objektfunktion zurückgegeben wurde, dann wurde die Länge der Variable falsch gesetzt.</p>
<p>Behoben: Wenn die letzte Operation in einem Ausdruck eine Zeichenkette aus einem temporären Objekt ermittelte, dann wurde das Objekt und die Zeichenkette vorzeitig freigegeben.</p>
<p>Behoben: Numerische Zeichenketten mit speziellen Formatierungen wurden nicht beibehalten, wenn sie von einer Funktion mittels einer Variable zurückgegeben oder an einer rekursiven Funktion weitergegeben wurde.</p>
<p>Behoben: Wenn das Endergebnis eines Ausdrucks (mit Ausnahme von Return) ein Objekt ist, dann wird korrekt eine leere Zeichenkette ausgegeben, anstatt den Thread unauffällig zu abzubrechen.</p>
<p>Behoben: __Delete-Meta-Funktionen überschrieb manchmal temporäre Werte im Dereferenz-Zwischenspeicher.</p>
<p>Hinzugefügt: Eine ermittelte Adresse mittels &amp;object kehrt möglicherweise mithilfe von Object(Adresse) als Objektreferenz zurück.</p>  

<h2 id="L32">Revision 32 - 26. September 2009</h2>
<p>Behoben: Send/PostMessage führt zum Absturz, wenn weniger als drei Parameter angegeben wurden.</p>

<h2 id="L31">Revision 31 - 26. September 2009</h2>
<p>Hinzugefügt: Objekt/Array-Unterstützung und zahlreiche kleinere Änderungen, um das zu ermöglichen.</p>
<p>Hinzugefügt: Unterstützung für While(Ausdruck) ohne Leerräume.</p>
<p>Hinzugefügt: Trim, LTrim, RTrim.</p>
<p>Hinzugefügt: A ~= B; entspricht RegExMatch(A, B). Das wird möglicherweise in einer zukünftigen Version entfernt.</p>
<p>Behoben: Eine Inkompatibilität mit LowLevel.</p>
<p>Geändert: Die Zeichen [, ] und ? sind nicht länger in Variablennamen gültig. Folglich benötigt ? (ternär) nicht länger ein Leerzeichen auf jeder Seite.</p>
<p>Geändert: Optionale Parameter können nun überall in der Parameterliste eines nicht-dynamischen Funktionsaufrufs weggelassen werden. Da das mittels Einfügen des Parameter-Standardwerts während der Ladezeit funktioniert, wird es nicht unterstützt und ist für dynamische Funktionsaufrufe nicht erlaubt.</p>
<p>Debugger: Verschiedene kleinere Änderungen, um den Programmablauf zu vereinfachen, während der Code durchlaufen wird.</p>
<p>Optimierung: Wenn der erste Parameter von DllCall eine direkt geschriebene Zeichenkette ist, der einer bereits vorhandenen Funktion im Speicher entspricht, dann wird er mit der aktuellen Adresse der Funktion ersetzt.</p>
<p>Von v1.0.48.03 auf v1.0.48.04 aktualisiert.</p>

<h2 id="L30">Revision 30 - 31. Mai 2009</h2>
<p>Von v1.0.48.02 auf v1.0.48.03 aktualisiert.</p>

<h2 id="L29">Revision 29 - 2. Mai 2009</h2>
<p>Alle unterstützten Bildformate können jetzt als Menüsymbole verwendet werden. Derzeit ist es notwendig, die tatsächliche Größe anzugeben, wenn die Transparenz des Symbols in Windows Vista oder höher erhalten bleiben soll. Zum Beispiel:</p>
<pre>Menu, Menüname, Icon, Menüpunktname, Dateiname.png,, 0</pre>  

<h2 id="L28">Revision 28 - 2. Mai 2009</h2>
<p>Verbesserte durchschnittliche Performance von dynamischen Funktionsaufrufen mittels Implementierung von binärer Suche nach Funktionsnamen. Diese Änderung gilt auch für andere Bereiche, wie Auflösung von Funktionsreferenzen in Ausdrücken während der Ladezeit und Auflösung von OnMessage, RegisterCallback, etc. während der Laufzeit.</p>  

<h2 id="L27">Revision 27 - 26. April 2009</h2>
<p>Von v1.0.48.00 auf v1.0.48.02 aktualisiert.</p>  

<h2 id="L26">Revision 26 - 11. April 2009</h2>
<p>Behoben: Menüsymbole wurden nicht bei Elementen gezeichnet, die Untermenüs haben, wenn Owner-Drawing verwendet wurde.</p>
<p>Behoben: Menüsymbole wurden nicht freigegeben, wenn alle Menüpunkte gleichzeitig gelöscht wurden.</p>
<p>Geändert (Source): AutoHotkey.sln in AutoHotkey_L.sln umbenannt, damit das VS-Fenster leichter identifiziert werden kann.</p>  

<h2 id="L25">Revision 25 - 30. März 2009</h2>
<p>Behoben: Send {U+xxxx} setzt nun korrekt den Modifikatorstatus wie bei normalen Tasten.</p>
<p>Behoben: Send {U+..xx} löst nicht länger Hotkey SCxx aus.</p>

<h2 id="L24">Revision 24 - 30. März 2009</h2>
<p>Hinzugefügt: Unterstützung für Send {U+xxxx}. SendInput() wird verwendet, wenn eine ordnungsgemäße Unicode-Unterstützung verfügbar ist, ansonsten wird wieder ALT+Ziffernblock benutzt.</p>

<h2 id="L23">Revision 23 - 30. März 2009</h2>
<p>Behoben: GuiControl, Enable/Disable setzt den Fokus nur noch neu, wenn das fokussierte Steuerelement deaktiviert war.</p>  

<h2 id="L22">Revision 22 - 26. März 2009</h2>
<p>Optimiert: If var [not] in/contains Vergleichsliste, besonders für lange Listen mit kurzen Feldern.</p>  

<h2 id="L21">Revision 21 - 16. März 2009</h2>
<p>Kleinere Optimierungen für While. [Danke an Chris]</p>
<p>Behoben (Debugger): Revisionen 19 und 20 ließ Timer-Threads von der Aufrufliste weg.</p>
<p>Behoben (Debugger): XML-reservierte Zeichen wurden in den meisten Fällen nicht mit einem Escapezeichen versehen.</p>
<p>Behoben (Debugger): Falscher Befehl und transaction_id wurden in der letzten Antwort verwendet, bevor das Skript beendet wurde.</p>  

<h2 id="L20">Revision 20 - 27. Februar 2009</h2>
<p>Geändert: Wenn ein Symbol nicht mit einer neuen Methode geladen werden kann, dann soll die alte Methode wieder verwendet werden.</p>

<h2 id="L19">Revision 19 - 26. Februar 2009</h2>
<p>Hinzugefügt: Neue Option Gui, Font, qN, um die Schriftartqualität zu setzen bzw. Anti-Aliasing zu kontrollieren, wobei N zwischen 0 und 5 liegt.</p>
<p>Behoben: IL_Add wählt nun bei mehreren Symbolgrößen eine Größe aus, die am besten geeignet ist.</p>
<p>Mit AutoHotkey v1.0.48 zusammengeführt, für Fehlerbehebungen, Optimierungen und anderen Änderungen von Chris. Einige AutoHotkey_L-Funktionen wurden in der Hauptversion integriert; folgende Änderungen wurden an diesen Funktionen seit den vorherigen Revisionen vorgenommen:</p>
<ul>
  <li>Verhaltensmuster gilt nicht länger für While - z. B. wird "While %x%" nicht als "While x", sondern korrekt als Doppeldereferenz interpretiert.</li>
  <li>One-True-Brace-Stil wird nun für While unterstützt.</li>
  <li>Statische Variablen können nun in Assume-Static-Funktionen deklariert und initialisiert werden.</li>
  <li>Die Übergabe von zu <em>wenigen</em> Parametern an einem dynamischen Funktionsaufruf ist nicht mehr zulässig, da der Aufrufer der Funktion den Designer der Funktion im Nachhinein anzweifeln kann, das Erkennen von Skript-Fehlern während der Laufzeit einschränkt wird und zum Absturz der Anwendung führen kann, wenn eine interne Funktion aufgerufen wird.</li>
</ul>

<h2 id="L18">Revision 18 - 21. Februar 2009</h2>
<p>Behoben: Durch die unvollständige Fehlerbehebung in der vorherigen Revision bewirkte eine Verkettung gefolgt von einer Zuweisung, dass der Rest des Ausdrucks in einigen Fällen übersprungen wurde.</p>

<h2 id="L17">Revision 17 - 20. Februar 2009</h2>
<p>Hinzugefügt: Menüsymbole mithilfe der Unterbefehle Icon und NoIcon im Menu-Befehl.</p>
<p>Geändert: Negative Symbolnummern können nun verwendet werden, um eine Ressourcen-ID innerhalb einer ausführbaren Datei zu kennzeichnen.</p>
<p>Geändert: Standard-Style von Menüs um MNS_CHECKORBMP erweitert.</p>
<p>Geändert: Sowohl die kleinen als auch großen Versionen der benutzerdefinierten Tray-Symbole werden nun geladen, um sie an den richtigen Stellen anzuzeigen.</p>
<p>Behoben: Das Laden von Symbolen ausführbarer Dateien, deren Größen von den Systemgrößen Klein/Groß abweichen.</p>

<h2 id="L16">Revision 16 - 4. Februar 2009</h2>
<p>Behoben: Das Löschen eines Menüpunktes löschte teilweise auch sein zugeordnetes Untermenü.</p>  

<h2 id="L15">Revision 15 - 1. Februar 2009</h2>
<p>Behoben: Die Präsenz von SetFormat in einem *kompilierten* Skript deaktivierte nicht den Binärzahl-Schreibcache. SetFormat sollte nun ordnungsgemäß in kompilierten Skripten funktionieren.</p>

<h2 id="L14">Revision 14 - 1. Februar 2009</h2>
<p>Zahlreiche Fehlerbehebungen und Optimierungen von Chris (pre-v1.0.48 beta).</p>
<p>Hinzugefügt: Unterstützung für RegEx-Callouts und die Auto-Callout-Option 'C'.</p>
<p>Geändert: A_AhkVersion beinhaltet nun die Revisionsnummer. Zum Beispiel 1.0.47.07.L14.</p>
<p>Behoben: HWND's/Fenster-ID's wurden per Vorzeichen auf 64-Bit erweitert. Zum Beispiel wurde 0xb482057e zu 0xffffffffb482057e.</p>

<h2 id="L13">Revision 13 - 29. November 2008</h2>
<p>Behoben: Ungültige DllCall-Typen wurden als INT in einigen Build-Umgebungen behandelt.</p>
<p>Hinzugefügt: Übergangslösung für das GuiEscape-Problem beim Deaktivieren des fokussierten Steuerelements.</p>
<p>Geänderte Versionsinformation: InternalName, ProductName und FileDescription sind nun "AutoHotkey_L" anstelle von "AutoHotkey".</p>

<h2 id="L12">Revision 12 - 6. September 2008</h2>
<p>Behoben: Mögliche Zugriffsverletzung beim Verwenden von property_get in einer internen Variable. -- DBGP</p>

<h2 id="L11">Revision 11 - 5. September 2008</h2>
<p>Behoben: Prüfsumme von AutoHotkeySC.bin mittels Post-Build-Skript entfernt (AutoHotkey muss installiert sein).</p>
<p>Hinzugefügt: .L-Suffix für A_AhkVersion.</p>
<p>Hinzugefügt: Vorläufige Unterstützung für DBGp (interaktives Debuggen).</p>

<h2 id="L10">Revision 10 - 2. August 2008</h2>
<p>Behoben: WheelLeft/WheelRight-Unterstützung, dass seit Revision 9 fehlerhaft war.</p>

<h2 id="L9">Revision 9 - 29. Juli 2008</h2>
<p>Behoben: Ermöglicht Break/Continue in While.</p>
<p>Behoben: TrayTip in Windows-Versionen außer Englisch und möglicherweise andere Nebeneffekte beim Verwenden von Vista-Versionen.</p>

<h2 id="L8">Revision 8 - 27. Juli 2008</h2>
<p>Hinzugefügt: #IfTimeout-Direktive, um das Zeitlimit für das Auswerten von #If-Ausdrücke zu bestimmen (in Millisekunden). 1000 ist Standard.</p>
<p>Hinzugefügt: Assume-Static-Modus für Funktionen. "Static" muss jeder lokalen/globalen Variablendeklaration vorangestellt werden.</p>
<p>Hinzugefügt: One-True-Brace-Unterstützung für While.</p>
<p>Geändert: While setzt nun A_Index, wenn der Durchlauf beginnt.</p>

<h2 id="L7">Revision 7 - 26. Juli 2008</h2>
<p>Hinzugefügt: IsFunc(Funktionsname) - Gibt eine Zahl ungleich 0 zurück, wenn der Funktionsname im Skript oder als interne Funktion existiert.</p>

<h2 id="L5">Revision 5 - 19. Juli 2008</h2>
<p>Veraltete Referenzen auf Test-Skripte entfernt.</p>
<p>Einfacher Standard-Test-Skript hinzugefügt.</p>

<h2 id="L4">Revision 4 - 18. Juli 2008</h2>
<p>Hinzugefügt: #if (Ausdruck) - Vergleichbar mit #IfWinActive, aber für beliebige Ausdrücke.</p>
<p>Hinzugefügt: WheelLeft, WheelRight - Unterstützung für WM_MOUSEHWHEEL, eingeführt durch Windows Vista. (Benötigt Vista).</p>
<p>Hinzugefügt: While, Ausdruck - Schleife, während eine Bedingung wahr ist.</p>
<p>Hinzugefügt: A_IsPaused - Wahr, wenn der darunterliegende Thread pausiert ist.</p>
<p>Hinzugefügt: A_IsCritical - Wahr, wenn der aktuelle Thread mithilfe des "Critical"-Befehls als unterbrechungsfrei markiert ist.</p>
<p>Geändert: Erlaubt eine beliebige Anzahl an Parametern, die an dynamischen Funktionsaufrufen übergeben werden können.</p>
<p>Behoben: Zugriffsverletzung, verursacht durch WinGetClass und Unterklassenfenster.</p>
<p>Behoben: Zugriffsverletzung, verursacht durch leere dynamische Funktionsreferenzen.</p>

<p>&nbsp;</p>
</body>
</html>
