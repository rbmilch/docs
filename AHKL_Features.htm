<!DOCTYPE HTML>
<html>
<head>
<title>Neue Features von AutoHotkey_L</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>
<body><h1>Neue Features von AutoHotkey_L</h1>

<p>Dieses Dokument beschreibt Features, die in den AutoHotkey_L-Entwicklungszweig von AutoHotkey hinzugefügt wurden, der mittlerweile als "AutoHotkey 1.1" bekannt ist.</p>
<p class="warning"><strong>Vorsicht:</strong> Dieses Dokument wurde in den letzten Jahren vernachlässigt und könnte daher einige der neueren Änderungen nicht enthalten.</p>

<h2 id="flow">Ablaufsteuerung</h2>
<table class="info">
<tr><td><a href="commands/Break.htm">Break <i>LoopLabel</i></a></td><td>Unterbricht eine Schleife oder eine bestimmte Nummer von verschachtelten Schleifen.</td></tr>
<tr><td><a href="commands/Continue.htm">Continue <i>LoopLabel</i></a></td><td>Überspringt den Rest des Durchlaufs einer Schleife oder verschachtelten Schleife.</td></tr>
<tr><td><a href="commands/For.htm">For <i>x</i>,<i>y</i> in <i>z</i></a></td><td>Durchläuft den Inhalt eines Objekts.</td></tr>
<tr><td><a href="commands/Until.htm">Loop Until</a></td><td>Die Schleife wird solange wiederholt, bis eine Bedingung wahr ist. Auf jede Schleifenvariante anwendbar.</td></tr>
<tr><td><a href="commands/Try.htm">Try</a>...<a href="commands/Catch.htm">Catch</a>...<a href="commands/Finally.htm">Finally</a></td><td>Ermöglicht eine strukturierte Ausnahmebehandlung.</td></tr>
<tr><td><a href="commands/Throw.htm">Throw</a></td><td>Löst eine Ausnahme aus.</td></tr>
</table>

<h2 id="commands">Befehle</h2>
<table class="info">
<tr><td><a href="commands/FileEncoding.htm">FileEncoding</a></td><td>Bestimmt die Standardcodierung für <a href="commands/FileRead.htm">FileRead</a>, <a href="commands/FileReadLine.htm">FileReadLine</a>, <a href="commands/LoopReadFile.htm">Loop Read</a>, <a href="commands/FileAppend.htm">FileAppend</a> und <a href="commands/FileOpen.htm">FileOpen</a>.<br><i>Siehe auch:</i> <a href="#enc">Textcodierungen</a></td></tr>
<tr><td><a href="commands/Gui.htm">Gui</a></td><td>Siehe <a href="#GUI_Enhancements">GUI-Erweiterungen</a> weiter unten.</td></tr>
<tr><td><a href="commands/IniRead.htm">IniRead</a>/<a href="commands/IniWrite.htm">Write</a>/<a href="commands/IniDelete.htm">Delete</a></td><td>Liest, schreibt oder entfernt ganze Sektionen, oder ruft eine Liste aller Sektionsnamen ab.</td></tr>
<tr><td><a href="commands/Menu.htm#MenuIcon">Menu, Icon</a></td><td>Setzt oder entfernt das Symbol eines Menüpunkts.</td></tr>
<tr><td><a href="commands/Run.htm">Run</a></td><td><a href="Compat.htm#Run">Verbesserungen</a> in der Hinsicht, wie Parameter geparst werden.</td></tr>
<tr><td><a href="commands/Send.htm#Unicode">SendInput {U+nnnn}</a></td><td>Sendet ein Unicode-Zeichen. Unicode-Zeichen können direkt in Unicode-Builds verwendet werden.</td></tr>
<tr><td><a href="commands/SendLevel.htm">SendLevel</a></td><td>Bestimmt, welche künstlichen Tastatur- oder Mausereignisse von Hotkeys und Hotstrings ignoriert werden sollen.</td></tr>
<tr><td><a href="commands/SetFormat.htm">SetFormat, IntegerFast, h|H</a></td><td>Legt fest, ob das hexadezimale Format klein- oder großgeschrieben werden soll.</td></tr>
<tr><td><a href="commands/SetRegView.htm">SetRegView, RegAnsicht</a></td><td>Bewirkt, dass Registry-Befehle in einem 32-Bit-Skript auf die 64-Bit-Registry-Ansicht zugreifen können und umgekehrt.</td></tr>
<tr><td><a href="commands/Transform.htm#HTML">Transform, HTML</a></td><td>Führt Zeichensatz- oder HTML-Umwandlungen durch.</td></tr>
<tr><td><a href="commands/WinGet.htm#ProcessPath">WinGet, ..., ProcessPath</a></td><td>Ermittelt den vollständigen Pfad und Namen des Prozesses, dem ein bestimmtes Fenster untergeordnet ist.</td></tr>
</table>

<h2 id="directives">Direktiven</h2>
<table class="info">
<tr><td><a href="commands/_If.htm">#If <i>Ausdruck</i></a></td><td>Vergleichbar mit <a href="commands/_IfWinActive.htm">#IfWinActive</a>, aber für beliebige Ausdrücke.</td></tr>
<tr><td><a href="commands/_IfTimeout.htm">#IfTimeout</a></td><td>Bestimmt die maximale Zeit, die zur Auswertung eines einzelnen #If-Ausdrucks aufgebracht werden soll.</td></tr>
<tr><td><a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a></td><td>Ändert die Taste, mit der WIN- oder ALT-KeyUp-Ereignisse maskiert werden sollen.</td></tr>
<tr><td><a href="commands/_Include.htm">#Include &lt;Lib&gt;</a></td><td>Bindet eine Skriptdatei aus einem Funktionsbibliotheksordner ein.</td></tr>
<tr><td><a href="commands/_InputLevel.htm">#InputLevel</a></td><td>Bestimmt, welche künstlichen Tastatur- oder Mausereignisse von Hotkeys und Hotstrings ignoriert werden sollen.</td></tr>
<tr><td><a href="commands/_Warn.htm">#Warn</a></td><td>Aktiviert oder deaktiviert Warnungen für ausgewählte Zustände, die auf Entwicklerfehler hinweisen können.</td></tr>
</table>

<h2 id="functions">Funktionen</h2>
<table class="info">
<tr><td><a href="commands/ComObjActive.htm">ComObj...</a> --<br>ComObjActive<br>ComObjEnwrap/Unwrap<br>ComObjParameter<br>ComObjType</td><td><br>Ermittelt ein registriertes COM-Objekt.<br>Wrappt/entwrappt ein COM-Objekt.<br>Wrappt einen Wert und Typ zu einem Objekt, das als Parameter übergeben werden kann.<br>Ermittelt Informationen über den Typ eines COM-Objekts.</td></tr>
<tr><td><a href="commands/ComObjArray.htm">ComObjArray</a></td><td>Erstellt einen SafeArray, das für COM genutzt werden kann.</td></tr>
<tr><td><a href="commands/ComObjConnect.htm">ComObjConnect</a></td><td>Verbindet die Ereignisquellen eines COM-Objekts mit Funktionen, die ein bestimmtes Präfix haben.</td></tr>
<tr><td><a href="commands/ComObjCreate.htm">ComObjCreate</a></td><td>Erstellt ein COM-Objekt.</td></tr>
<tr><td><a href="commands/ComObjError.htm">ComObjError</a></td><td>Aktiviert oder deaktiviert Fehlermeldungen in Bezug auf COM.</td></tr>
<tr><td><a href="commands/ComObjFlags.htm">ComObjFlags</a></td><td>Ermittelt oder ändert Flags, die das Verhalten eines COM-Wrapper-Objekts kontrollieren.</td></tr>
<tr><td><a href="commands/ComObjGet.htm">ComObjGet</a></td><td>Gibt den Verweis auf ein Objekt zurück, das von einer COM-Komponente bereitgestellt wird.</td></tr>
<tr><td><a href="commands/ComObjQuery.htm">ComObjQuery</a></td><td>Fordert ein Interface oder Service eines COM-Objekts an.</td></tr>
<tr><td><a href="commands/ComObjType.htm">ComObjType</a></td><td>Ermittelt Informationen über den Typ eines COM-Objekts.</td></tr>
<tr><td><a href="commands/ComObjValue.htm">ComObjValue</a></td><td>Ermittelt den Wert oder Pointer, der in einem COM-Wrapper-Objekt gespeichert ist.</td></tr>
<tr><td><a href="commands/Throw.htm#Exception">Exception</a></td><td>Erstellt ein Exception-Objekt für <a href="commands/Throw.htm">Throw</a> (und ermöglicht beschränkten Zugriff auf die Aufrufliste).</td></tr>
<tr><td><a href="commands/FileOpen.htm">FileOpen</a></td><td>Ermöglicht eine objektorientierte Dateibearbeitung.</td></tr>
<tr><td><a href="commands/Func.htm">Func</a></td><td>Ermittelt einen <a href="Objects.htm#Function_References">Verweis</a> auf eine Funktion.</td></tr>
<tr><td><a href="commands/GetKey.htm">GetKeyName/VK/SC</a></td><td>Ermittelt den Namen oder Text, virtuellen Tastencode oder Scancode einer Taste.</td></tr>
<tr><td><a href="commands/InStr.htm">InStr</a></td><td>Sucht von links nach rechts das erste <em>Vorkommen</em> einer Zeichenkette.</td></tr>
<tr><td><a href="commands/IsByRef.htm">IsByRef</a></td><td>Stellt fest, ob eine Variable für einen bestimmten ByRef-Parameter bereitgestellt wurde.</td></tr>
<tr><td><a href="Objects.htm">IsObject</a></td><td>Stellt fest, ob ein Wert ein Objekt ist.</td></tr>
<tr><td><a href="commands/StrPutGet.htm">StrPut / StrGet</a></td><td>Schreibt oder liest eine Zeichenkette auf einer Speicheradresse unter Beachtung des angegebenen Zeichensatzes.</td></tr>
<tr><td><a href="commands/Trim.htm">Trim</a></td><td>Entfernt bestimmte Zeichen vom Anfang und/oder Ende einer Zeichenkette.</td></tr>
<tr><td><a href="misc/RegExCallout.htm">RegEx (?C<i>Num</i>:<i>Func</i>)</a></td><td>Ruft eine Funktion während der Auswertung eines RegEx-Musters auf.</td></tr>
<tr><td><a href="#Function_Libraries">Funktionsbibliotheken</a></td><td>Neue "lokale Bibliothek" und <code>#Include &lt;BiblName&gt;</code>.</td></tr>
<tr><td><a href="Functions.htm#Variadic">Variadische Funktionen</a></td><td>Funktionen können eine beliebige Anzahl von Parametern mittels eines Arrays akzeptieren.</td></tr>
<tr><td><a href="#Static">Statische Initialisierer</a></td><td>Statische Variablen können nun mit einem beliebigen Ausdruck initialisiert werden.</td></tr>
</table>

<h2 id="objects">Objekte</h2>
<table class="info">
<tr><td><a href="Objects.htm">Allgemein</a></td><td>Eine allgemeine Abhandlung über das Verhalten und die Nutzung von Objekten.</td></tr>
<tr><td><a href="Objects.htm#Arrays">Objekt</a></td><td>Assoziative Arrays, die mit anderen Funktionalitäten erweiterbar sind.</td></tr>
<tr><td><a href="objects/Enumerator.htm">Enumerator</a></td><td>Ermöglicht das Enumerieren einer Sammlung von Elementen.</td></tr>
<tr><td><a href="objects/File.htm">File</a></td><td>Ermöglicht eine Schnittstelle für den Zugriff auf eine Datei. <a href="commands/FileOpen.htm">FileOpen</a> gibt ein Objekt dieses Typs zurück.</td></tr>
<tr><td><a href="objects/Func.htm">Func</a></td><td>Repräsentiert eine benutzerdefinierte oder interne Funktion, die über das Skript aufgerufen werden kann.</td></tr>
<tr><td>ComObject</td><td>Siehe oben genannte ComObj-Funktionen.</td></tr>
</table>

<h2 id="vars">Variablen</h2>
<table class="info">
<tr><td>A_Is64bitOS</td><td>Enthält 1 (wahr), wenn das Betriebssystem eine 64-Bit-Version ist, oder 0 (falsch), wenn es eine 32-Bit-Version ist.</td></tr>
<tr><td>A_IsUnicode</td><td>In Unicode-Builds enthält diese Variable eine 1 (<i>wahr</i>). In ANSI-Builds wird sie nicht gesetzt, also praktisch <i>falsch</i>.</td></tr>
<tr><td>A_FileEncoding</td><td>Enthält die Codierung, die standardmäßig für alle Befehle gilt; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td></tr>
<tr><td>A_OSVersion</td><td>Unterstützt Windows 7 und Windows 8; siehe <a href="Variables.htm#OSVersion">A_OSVersion</a>.</td></tr>
<tr><td>A_PriorKey</td><td>Der Name der Taste, die vor dem Drücken oder Loslassen der letzten Taste gedrückt wurde ... <a href="Variables.htm#PriorKey">(Mehr)</a></td></tr>
<tr><td>A_PtrSize</td><td>Enthält die Größe eines Pointers in Bytes. Entweder 4 (32-Bit) oder 8 (64-Bit).</td></tr>
<tr><td>A_RegView</td><td>Die aktuell gesetzte Registry-Ansicht von <a href="commands/SetRegView.htm">SetRegView</a>.</td></tr>
<tr><td>A_ScriptHwnd</td><td>Die Eindeutige ID (HWND/Handle) des versteckten Skript-Hauptfensters.</td></tr>
</table>

<h2 id="types">Datentypen</h2>
<table class="info">
<tr><td><a href="commands/DllCall.htm#ptr">Ptr</a></td><td>Äquivalent zu <i>Int</i> in 32-Bit-Builds und <i>Int64</i> in 64-Bit-Builds. Wird unterstützt von <a href="commands/DllCall.htm">DllCall</a>, <a href="commands/NumPut.htm">NumPut</a> und <a href="commands/NumGet.htm">NumGet</a>.</td></tr>
<tr><td><a href="commands/DllCall.htm#astr">AStr</a>, <a href="commands/DllCall.htm#astr">WStr</a></td><td>Wird nur von <a href="commands/DllCall.htm">DllCall</a> unterstützt; siehe <a href="Compat.htm">Skript-Kompatibilität</a>.</td></tr>
</table>

<h2 id="unicode">Unicode</h2>
<table class="info">
<tr><td><a href="Compat.htm">Kompatibilität</a></td><td>Wie man mit Unicode in DllCall usw. umgeht.</td></tr>
<tr><td><a href="Scripts.htm#cp">Skriptdateien</a></td><td>Die Handhabung von Unicode in Skriptdateien.</td></tr>
<tr><td><a href="commands/Send.htm#Unicode">SendInput</a></td><td>Die Handhabung von Unicode in Verbindung mit SendInput.</td></tr>
</table>

<h2 id="other">Sonstiges</h2>
<table class="info">
<tr><td><a href="misc/WinTitle.htm#ahk_exe">ahk_exe</a></td><td>Fenster können über den Namen oder Pfad des übergeordneten Prozesses (EXE-Datei) identifiziert werden.</td></tr>
<tr><td><a href="Scripts.htm#idebug">Debuggen</a></td><td>Interaktive Debugging-Features (zeilenweise Ausführung usw.).</td></tr>
<tr><td><a href="#Error_Handling">Fehlerbehandlung</a></td><td>Try/Catch/Throw und erhöhter Nutzwert für A_LastError.</td></tr>
<tr><td><a href="#GUI_Enhancements">GUI-Verbesserungen</a></td><td>Zahlreiche Verbesserungen des Gui-Befehls und verwandte Befehle.</td></tr>
<tr><td><a href="#icons">Symbolunterstützung</a></td><td>Ressourcenidentifikatoren und verbesserte Unterstützung für verschiedene Symbolgrößen.</td></tr>
<tr><td><a href="Compat.htm">Sonstige Änderungen</a></td><td>Änderungen, die die Kompatibilität mit einem Skript beeinflussen.</td></tr>
<tr><td><a href="AHKL_ChangeLog.htm">Versionsverlauf</a></td><td>Verlauf der AutoHotkey_L-Revisionen.</td></tr>

</table>


<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Viele Befehle unterstützen <a href="commands/Try.htm">Try</a>/<a href="commands/Catch.htm">Catch</a> anstelle von ErrorLevel zur Fehlerbehandlung. Zum Beispiel:</p>
<pre class="NoIndent">try
{
    FileCopy, Datei1.txt, C:\Ordner
    FileDelete, C:\Ordner\Alt.txt
}
catch
    MsgBox Es ist ein Fehler aufgetreten!</pre>
<p>Darüber hinaus setzen die folgenden Befehle nun <a href="Variables.htm#LastError">A_LastError</a>, um das Debuggen zu unterstützen: FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version, FileSetAttrib/Time, FileCreateDir, RegRead, RegWrite, RegDelete.</p>

<h2 id="Function_Libraries">Funktionsbibliotheken</h2>
<p>Zusätzlich zur Benutzerbibliothek in <code>%A_MyDocuments%\AutoHotkey\Lib</code> und zur Standardbibliothek im AutoHotkey-Verzeichnis können Funktionen automatisch aus der "lokalen Bibliothek" <code>%A_ScriptDir%\Lib</code> eingebunden werden. Weitere Informationen finden Sie unter <a href="Functions.htm#lib">Funktionsbibliotheken</a>.</p>
<p><a href="commands/_Include.htm">#Include &lt;BiblName&gt;</a> bindet explizit eine Bibliotheksdatei ein, die sich in einer der Funktionsbibliotheken befinden kann.</p>

<h2 id="GUI_Enhancements">GUI-Verbesserungen</h2>
<p>Folgende Verbesserungen wurden am <a href="commands/Gui.htm">Gui</a>-Befehl und verwandte Befehle vorgenommen:</p>
<ul>
  <li>Um ein GUI-Fenster anzusteuern, kann ein <a href="commands/Gui.htm#MultiWin">Name oder HWND</a> anstelle einer Nummer zwischen 1 und 99 verwendet werden.</li>
  <li><a href="commands/Gui.htm#New">Gui, New</a> erstellt ein neues anonymes GUI-Fenster.</li>
  <li>Es können beliebig viele benannte oder anonyme GUI-Fenster erstellt werden.</li>
  <li>Neue GUI-Optionen: <a href="commands/Gui.htm#GuiHwndOutputVar">+Hwnd<em>AusgabeVar</em></a>, <a href="commands/Gui.htm#Parent">+Parent<em>GUI</em></a></li>
  <li>Einem GUI-Fenster kann ein beliebiges Fenster übergeordnet werden: <a href="commands/Gui.htm#Owner">+Owner<em>%HWND%</em></a>.</li>
  <li><a href="commands/Gui.htm#fontq">Gui, Font</a> kann die Kantenglättung des Textes einstellen.</li>
  <li><a href="commands/GuiControls.htm#ActiveX">ActiveX-Steuerelemente</a> wie z. B. "Internet Explorer WebBrowser" werden unterstützt.</li>
  <li><a href="commands/GuiControlGet.htm#Name">GuiControlGet, <em>AusgabeVar</em>, Name</a> ermittelt den Namen der Variable, die einem GUI-Steuerelement zugeordnet wurde.</li>
  <li>Tastaturkürzel wie CTRL+O werden automatisch unterstützt, wenn sie in <a href="commands/Gui.htm#Menu">Gui-Menüs</a> verwendet werden.</li>
  <li>Die <a href="commands/Gui.htm#fontq">Textdarstellungsqualität</a> kann mithilfe des Font-Unterbefehls eingestellt werden.</li>
</ul>

<h2 id="Static">Statische Variablen</h2>
<p>Statische Variablen können nun mit einem beliebigen Ausdruck initialisiert werden. Zum Beispiel:</p>
<pre>Sleep 500
MsgBox % "Es sind " Time() "ms vergangen, seit das Skript gestartet wurde."
Time() {
    static Tick := A_TickCount
    return A_TickCount - Tick
}</pre>

<h2 id="enc">Textcodierungen</h2>
<p><a href="commands/FileRead.htm">FileRead</a>, <a href="commands/FileReadLine.htm">FileReadLine</a>, <a href="commands/LoopReadFile.htm">Loop Read</a> und <a href="commands/FileAppend.htm">FileAppend</a> unterstützen nicht nur das Standard-ANSI-Zeichensatz des Systems, sondern auch die meisten anderen Textzeichensätze, die von Windows unterstützt werden. <a href="commands/FileEncoding.htm">FileEncoding</a> kann genutzt werden, um die Standardcodierung zu bestimmen. FileRead und FileAppend kann diese Standardcodierung wie folgt überschreiben:</p>
<pre class="Syntax">
<span class="func">FileRead</span>, AusgabeVar, *P<i>nnn</i> Dateiname
<span class="func">FileAppend</span> <span class="optional">, Text, Dateiname, Codierung</span>
</pre>
<p>Während <i>nnn</i> ein numerischer <a href="https://msdn.microsoft.com/de-de/library/dd317756.aspx">Zeichensatzidentifikator</a> sein muss, folgt <i>Codierung</i> dem gleichen Format wie <a href="commands/FileEncoding.htm">FileEncoding</a>.</p>
<p><b>Siehe auch:</b> <a href="Compat.htm#FileRead">Skript-Kompatibilität</a></p>

<h2 id="Variadic">Variadische Funktionen und Funktionsaufrufe</h2>
<p><a href="Functions.htm#Variadic">Variadische Funktionen</a> können mithilfe eines Arrays eine variable Anzahl von Parametern akzeptieren, während <a href="Functions.htm#VariadicCall">variadische Funktionsaufrufe</a> verwendet werden können, um eine variable Anzahl von Parametern an einer Funktion zu übergeben.</p>


<h2 id="icons">Verbesserte Unterstützung von Symbolen</h2>

<h3>Ungewöhnliche Größen</h3>
<p>Es können beliebig große Symbolressourcen, die vom Betriebssystem unterstützt werden, aus einer ausführbaren Datei extrahiert werden. Wenn mehrere Symbolressourcen mit unterschiedlichen Größen in einer Symbolgruppe vorhanden sind, wird automatisch die am besten geeignete Größe genutzt. Vor Revision 17 bestimmte das System, welche Symbolressource genutzt werden sollte, die sie zuerst auf die system-interne Standardgröße eines großen Symbols skalierte und anschließend wieder auf die gewünschte Größe skalierte.</p>

<h3>Ressourcenidentifikatoren</h3>
<p>Negative Symbolnummern können genutzt werden, um eine Gruppensymbolressource innerhalb einer ausführbaren Datei zu identifizieren. Das folgende Beispiel zeigt, wie das Tray-Symbol mit dem Symbol ersetzt werden kann, das standardmäßig für die .ahk-Dateien genutzt wird:</p>
<pre>Menu, Tray, Icon, %A_AhkPath%, -160</pre>

</body></html>
