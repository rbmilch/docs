<!DOCTYPE HTML>
<html>
<head>
<title>File-Objekt</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>File-Objekt <span class="ver">[AHK_L 42+]</span></h1>

<p>Ermöglicht eine Schnittstelle für die Dateibearbeitung. <a href="../commands/FileOpen.htm">FileOpen</a> gibt ein Objekt dieses Typs zurück.</p>

<h2 id="Members">Objektelemente</h2>
<h4>Eigenschaften:</h4>
<ul>
  <li><a href="#Seek">Pos</a>: Ermittelt oder setzt die Position des Dateizeigers. Äquivalent zu <code>Pos := File.Tell()</code> oder <code>File.Seek(Distanz)</code>.</li>
  <li><a href="#Length">Length</a>: Ermittelt oder bestimmt die Größe der Datei.</li>
  <li><a href="#AtEOF">AtEOF</a>: Ermittelt einen Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat.</li>
  <li><a href="#Encoding">Encoding</a>: Ermittelt oder setzt die Textcodierung für das File-Objekt.</li>
  <li><a href="#Handle">__Handle</a>: Ermittelt ein System-Datei-Handle, das für DllCall verwendet werden kann.</li>
</ul>
<h4>Methoden:</h4>
<ul>
  <li><a href="#Read">Read</a>: Liest eine Zeichenfolge aus der Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#Write">Write</a>: Schreibt eine Zeichenfolge in die Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#ReadLine">ReadLine</a>: Liest eine Textzeile aus der Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#WriteLine">WriteLine</a>: Schreibt eine Zeichenfolge gefolgt von <code>`n</code> oder <code>`r`n</code>, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Der Dateizeiger wird dabei vorgerückt.</li>
  <li><a href="#ReadNum">Read<em>NumType</em></a>: Liest eine Zahl aus der Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#WriteNum">Write<em>NumType</em></a>: Schreibt eine Zahl in die Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#RawRead">RawRead</a>: Liest unbearbeitete Binärdaten aus der Datei in den Speicher. Falls eine Variable angegeben ist, dann wird sie je nach Bedarf automatisch erweitert.</li>
  <li><a href="#RawWrite">RawWrite</a>: Schreibt unbearbeitete Binärdaten in die Datei.</li>
  <li><a href="#Seek">Seek</a>: Verschiebt den Dateizeiger. Wenn der zweite Parameter fehlt, ist es das gleiche wie <code>File.Pos := Distanz</code>.</li>
  <li><a href="#Tell">Tell</a>: Gibt die Position des Dateizeigers zurück. Äquivalent zu <code>Pos := File.Pos</code>.</li>
  <li><a href="#Close">Close</a>: Schließt die Datei, löscht alle Daten im Zwischenspeicher auf der Festplatte und hebt die Sperrungen auf.</li>
</ul>

<div class="methodShort" id="Read"><h2>Read</h2>
<p>Liest eine Zeichenfolge aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Zeichenkette := File.<span class="func">Read</span>(<span class="optional">Zeichen</span>)</pre>
<dl>
  <dt>Zeichen</dt>
  <dd>Die maximale Anzahl der zu lesenden Zeichen. Fehlt dieser Parameter, wird der Rest der Datei gelesen und als Zeichenkette zurückgegeben. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erzeugt wurde, bewirkt das Weglassen des Parameters, dass die Methode fehlschlägt oder nur die aktuell verfügbaren Daten zurückgibt.</dd>
</dl>
<p><strong>Rückgabewert</strong> ist eine Zeichenkette.</p>
</div>

<div class="methodShort" id="Write"><h2>Write</h2>
<p>Schreibt eine Zeichenfolge in die Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">File.<span class="func">Write</span>(Zeichenkette)</pre>
<dl>
  <dt>Zeichenkette</dt>
  <dd>Eine Zeichenkette, die geschrieben werden soll.</dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden.</p>
</div>

<div class="methodShort" id="ReadLine"><h2>ReadLine</h2>
<p>Liest eine Textzeile aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Textzeile := File.<span class="func">ReadLine</span>()</pre>
<p><strong>Rückgabewert</strong> ist eine Textzeile. Sie enthält <code>`n</code>, <code>`r`n</code> oder <code>`r</code>, abhängig von der Datei und den EOL-Flags, die zum Öffnen der Datei verwendet wurden.</p>
<p>Es können Zeilen gelesen werden, die bis zu 65.534 Zeichen lang sind. Wenn eine Zeile diese Länge überschreitet, wird der Rest der Zeile durch nachfolgende Aufrufe dieser Methode zurückgegeben.</p></div>

<div class="methodShort" id="WriteLine"><h2>WriteLine</h2>
<p>Schreibt eine Zeichenfolge gefolgt von <code>`n</code> oder <code>`r`n</code>, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Der Dateizeiger wird dabei vorgerückt.</p>
<pre class="Syntax">File.<span class="func">WriteLine</span>(<span class="optional">Zeichenkette</span>)</pre>
<dl>
  <dt>Zeichenkette</dt>
  <dd>Eine optionale Zeichenkette, die geschrieben werden soll.</dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden.</p>
</div>

<div class="methodShort" id="ReadNum"><h2>Read<i>Zahlentyp</i></h2>
<p>Liest eine Zahl aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Zahl := File.Read<i>Zahlentyp</i>()</pre>
<p><em>Zahlentyp</em> ist entweder UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float. Diese Typennamen haben die gleiche Bedeutung wie die von <a href="../commands/DllCall.htm#types">DllCall</a>.</p>
<p><strong>Rückgabewert</strong> ist bei Erfolg eine Zahl und bei Misserfolg eine leere Zeichenkette.</p>
<p>Wenn eine Try-Anweisung aktiv ist und keine Bytes gelesen wurden, wird eine Ausnahme ausgelöst. Es wird keine Ausnahme ausgelöst, wenn mindestens ein Byte gelesen wurde, selbst wenn die Größe des angegebenen <i>Zahlentyp</i>s größer ist als die Anzahl der gelesenen Bytes. Stattdessen werden die fehlenden Bytes als Null angesehen.</p></div>

<div class="methodShort" id="WriteNum"><h2>Write<i>Zahlentyp</i></h2>
<p>Schreibt eine Zahl in die Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">File.Write<i>Zahlentyp</i>(Zahl)</pre>
<dl>
  <dt>Zahl</dt>
  <dd>Eine Zahl, die geschrieben werden soll.</dd>
</dl>
<p><em>Zahlentyp</em> ist entweder UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float. Diese Typennamen haben die gleiche Bedeutung wie die von <a href="../commands/DllCall.htm#types">DllCall</a>.</p>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes, die geschrieben wurden. Zum Beispiel wird WriteUInt bei Erfolg eine 4 zurückgeben.</p>
</div>

<div class="methodShort" id="RawRead"><h2>RawRead</h2>
<p>Liest unbearbeitete Binärdaten aus der Datei in den Speicher. Falls eine Variable angegeben ist, dann wird sie je nach Bedarf automatisch erweitert.</p>
<pre class="Syntax">File.<span class="func">RawRead</span>(VarOderAdresse, Bytes)</pre>
<dl>
  <dt>VarOderAdresse</dt>
  <dd>Eine Variable oder Speicheradresse, in der die Daten kopiert werden. Die Verwendung hat Ähnlichkeit mit <a href="../commands/NumGet.htm">NumGet</a>.</dd>
  <dt>Bytes</dt>
  <dd>Die maximale Anzahl der zu lesenden Bytes.</dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes, die gelesen wurden.</p>
<p>Wenn eine Try-Anweisung aktiv ist und <em>Bytes</em> ungleich Null ist, aber keine Bytes gelesen wurden, wird eine Ausnahme ausgelöst. Mit <a href="#AtEOF">AtEOF</a> kann man das verhindern, wenn nötig.</p></div>

<div class="methodShort" id="RawWrite"><h2>RawWrite</h2>
<p>Schreibt unbearbeitete Binärdaten in die Datei.</p>
<pre class="Syntax">File.<span class="func">RawWrite</span>(VarOderAdresse, Bytes)</pre>
<dl>
  <dt>VarOderAdresse</dt>
  <dd>Eine Variable, die die Daten oder die Adresse der Daten im Speicher enthält. Die Verwendung hat Ähnlichkeit mit <a href="../commands/NumPut.htm">NumPut</a>.</dd>
  <dt>Bytes</dt>
  <dd>Die maximale Anzahl der zu schreibenden Bytes.</dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes, die geschrieben wurden.</p>
</div>

<div class="methodShort" id="Seek"><h2>Seek</h2>
<p>Verschiebt den Dateizeiger.</p>
<pre class="Syntax">
File.<span class="func">Seek</span>(Distanz <span class="optional">, Ausgangspunkt := 0</span>)
File.Position := Distanz
File.Pos := Distanz
</pre>
<dl>
  <dt>Distanz</dt>
  <dd>Die Anzahl der Bytes, die zurückgelegt werden sollen. Niedrigere Werte sind näher an den Anfang der Datei.</dd>
  <dt>Ausgangspunkt</dt>
  <dd><p>Startpunkt zum Verschieben des Dateizeigers. Kann nur eine der folgenden Angaben sein:</p>
    <ul>
      <li>0 (SEEK_SET): Anfang der Datei. <i>Distanz</i> muss 0 oder größer sein.</li>
      <li>1 (SEEK_CUR): Aktuelle Position des Dateizeigers.</li>
      <li>2 (SEEK_END): Ende der Datei. <i>Distanz</i> sollte normalerweise negativ sein.</li>
    </ul>
    <p>Wenn weggelassen, dann ist der <i>Ausgangspunkt</i> standardmäßig SEEK_END, solange die Distanz negativ ist, ansonsten SEEK_SET.</p></dd>
</dl>
<p><strong>Rückgabewert</strong> ist bei Erfolg ein Wert ungleich 0 und bei Misserfolg eine 0.</p>
</div>

<div class="methodShort" id="Tell"><h2>Tell</h2>
<p>Gibt die aktuelle Position des Dateizeigers zurück, wobei 0 der Anfang der Datei ist.</p>
<pre class="Syntax">
Pos := File.<span class="func">Tell</span>()
Pos := File.Position
Pos := File.Pos
</pre>
</div>

<div class="methodShort" id="Length"><h2>Length</h2>
<p>Ermittelt oder bestimmt die Größe der Datei.</p>
<pre class="Syntax">Dateigröße := File.Length</pre>
<pre class="Syntax">File.Length := NeueGröße</pre>
<p><em>Dateigröße</em> und <em>NeueGröße</em> ist die Größe der Datei in Bytes.</p>
<p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein Pipe verweist, erzeugt wurde, wird es möglicherweise die derzeitig verfügbare Datenmenge im internen Pipe-Puffer zurückgeben. Allerdings ist dieses Verhalten nicht sichergestellt.</p></div>

<div class="methodShort" id="AtEOF"><h2>AtEOF</h2>
  <p>Ermittelt ein Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat, ansonsten 0.</p>
<pre class="Syntax">IsAtEOF := File.AtEOF</pre>
  <p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erstellt wurde, könnte der Rückgabewert ohne Bedeutung sein, da solche Devices logischerweise kein "End of File" haben.</p></div>

<div class="methodShort" id="Close"><h2>Close</h2>
<p>Schließt die Datei, löscht alle Daten im Zwischenspeicher auf der Festplatte und hebt die Sperrungen auf.</p>
<pre class="Syntax">File.<span class="func">Close</span>()</pre>
<p>&nbsp;Obwohl die Datei beim Freigeben des Objekts automatisch geschlossen wird, ist es empfehlenswert, die Datei so schnell wie möglich zu schließen.</p></div>

<div class="methodShort" id="Encoding"><h2>Encoding</h2>
<p>Ermittelt oder setzt die Textcodierung für das File-Objekt.</p>
<pre class="Syntax">ErmittelteCodierung := File.Encoding</pre>
<pre class="Syntax">File.Encoding := NeueCodierung</pre>
  <p><em>ErmittelteCodierung</em> und <em>NeueCodierung</em> ist ein numerischer Zeichensatzidentifikator (siehe <a href="https://msdn.microsoft.com/de-de/library/dd317756.aspx">MSDN</a>) oder eine der folgenden Zeichenketten:</p>
  <ul>
	<li><code>UTF-8</code>: Unicode UTF-8, entspricht CP65001.</li>
	<li><code>UTF-16</code>: Unicode UTF-16 mit Little-Endian-Byte-Order, entspricht CP1200.</li>
	<li><code>CP<i>nnn</i></code>: Ein Zeichensatz mit dem numerischen Identifikator <i>nnn</i>.</li>
  </ul>
  <p><em>ErmittelteCodierung</em> ist nie ein Wert mit dem Suffix <code>-RAW</code>, egal wie die Datei geöffnet wurde oder ob es eine Byte-Order-Markierung (BOM) enthält. Das Setzen von <em>NeueCodierung</em> bewirkt nicht, dass ein BOM hinzugefügt oder entfernt wird. Normalerweise wird das BOM bereits beim Erstellen der Datei hinzugefügt.</p>
  <p><span class="ver">[v1.1.15.04+]</span>: Man kann <em>NeueCodierung</em> auf <code>UTF-8-RAW</code> oder <code>UTF-16-RAW</code> setzen, allerdings wird der Suffix <code>-RAW</code> ignoriert. In früheren Versionen verhielten sich <code>UTF-8-RAW</code> und <code>UTF-16-RAW</code> wie eine ungültige 8-Bit-Codierung, und bewirkten, dass alle ASCII-fremden Zeichen verworfen wurden. Dies gilt nur für <code>File.Encoding</code>, nicht für <a href="../commands/FileOpen.htm">FileOpen()</a>.</p>
</div>

<div class="methodShort" id="Handle"><h2>__Handle</h2>
  <p>Gibt ein System-Datei-Handle zurück, das für DllCall verwendet werden kann. Siehe <a href="http://msdn.microsoft.com/de-de/library/aa363858.aspx">CreateFile</a>.</p>
<pre class="Syntax">File.__Handle</pre>
<p>File-Objekte zwischenspeichern gelesene und geschriebene Daten. Daten im internen Zwischenspeicher des Objekts werden erst auf das Laufwerk übertragen, wenn das Handle zurückgegeben wird. Enthält der Zwischenspeicher gelesene Daten von der Datei, werden diese Daten verworfen und der aktuelle Dateizeiger auf die logische Position (gekennzeichnet durch <code>File.Pos</code>) zurückgesetzt.</p></div>

</body>
</html>
