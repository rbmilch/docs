<!DOCTYPE HTML>
<html>
<head>
<title>Variablen und Ausdrücke</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke (Expressions)</a></li>
  <li><a href="#Operators">Operatoren innerhalb von Ausdrücken</a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher einer Variable</a></li>
</ul>
<span id="Variables"></span><h2 id="Intro">Variablen</h2>
<p>Allgemeine Erläuterungen und Details zur Funktionsweise finden Sie unter <a href="Concepts.htm#variables">Variablen</a>.</p>
<p id="assigning"><strong>Speichern von Variablenwerten</strong>: Um eine Zeichenkette oder Zahl in eine Variable zu speichern, gibt es zwei Methoden: <a href="Language.htm#legacy-syntax">Altmodisch</a> und <a href="Language.htm#expressions">Ausdruck</a>. Die altmodische Methode verwendet den <a href="commands/SetEnv.htm">Gleichheitszeichenoperator (=)</a>, um <a href="Language.htm#unquoted-text">direkt geschriebene Zeichenketten <strong>ohne Anführungszeichen</strong></a> und mit Prozentzeichen umschlossene Variablen zuzuweisen. Zum Beispiel:</p>
<pre>MeineZahl = 123
MeineZeichenkette = Das ist eine direkt geschriebene Zeichenkette.
KopieVonVar = %Var%  <em>; Bei dem Operator "=" sind Prozentzeichen notwendig, um den Inhalt einer Variable abzurufen.</em></pre>
<p>Die Ausdrucksmethode verwendet hingegen den <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>, um Zahlen, <a href="Language.htm#strings"><strong>in Anführungszeichen gesetzte</strong> Zeichenketten</a> und andere Arten von <a href="Language.htm#expressions">Ausdrücken</a> zuzuweisen. Die folgenden Beispiele sind funktional identisch zu den vorherigen Beispielen:</p>
<pre>MeineZahl := 123
MeineZeichenkette := "Das ist eine direkt geschriebene Zeichenkette."
KopieVonVar := Var  <em>; Bei dem Operator ":=" werden Prozentzeichen weggelassen.</em></pre>
<p>Die letztere Methode wird von vielen bevorzugt, weil sie verständlicher ist und weil sie eine <a href="Language.htm#expressions">Ausdruckssyntax</a> unterstützt, die mit der Syntax in vielen anderen Sprachen identisch ist.</p>
<p>Wie Sie vielleicht schon erraten haben, gibt es zwei Methoden, um den Inhalt einer Variable zu löschen (um sie sozusagen leer zu machen):</p>
<pre>MeineVar =
MeineVar := ""</pre>
<p>Das leere Anführungszeichen-Paar sollte nicht mit dem Operator "=" zugewiesen werden, weil die Variable sonst zwei Anführungszeichen enthalten würde.</p>
<p id="retrieving"><strong>Abrufen von Variablenwerten</strong>: Wenn es zwei Methoden zum Speichern von Werten gibt, gibt es auch zwei Methoden, um sie abzurufen: <a href="Language.htm#legacy-syntax">Altmodisch</a> und <a href="Language.htm#variables">Ausdruck</a>. Die altmodische Methode erfordert, dass jeder Name einer Variable mit Prozentzeichen umschlossen werden muss, um ihren Inhalt abzurufen. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a> Der Wert in der Variable namens Var ist %Var%.
KopieVonVar = %Var%</pre>
<p>Die Ausdrucksmethode erfordert hingegen, dass die Prozentzeichen weggelassen und <a href="Language.htm#strings">direkt geschriebene Zeichenketten</a> in Anführungszeichen gesetzt werden müssen. Die folgenden Beispiele sind funktional identisch zu den vorherigen Beispielen:</p>
<pre>MsgBox <strong>%</strong> "Der Wert in der Variable namens Var ist " . Var . "."  <em>; Mit einem Punkt können zwei Zeichenketten verkettet (verbunden) werden.</em>
KopieVonVar := Var</pre>
<p>Das <a href="Language.htm#-expression">Prozent- und Leerzeichen</a> im oberen Beispiel dient dazu, die Ausdruckssyntax für den Parameter des MsgBox-Befehls zu erzwingen. Standardmäßig verwenden alle Befehle die altmodische Syntax, sofern nicht anders dokumentiert.</p>
<p><strong>Vergleichen von Variablen</strong>: Bitte lesen Sie den folgenden Abschnitt, um zu erfahren, welche verschiedenen Arten von Vergleichen es gibt, und wann und wo die runden Klammern notwendig sind.</p>

<h2 id="Expressions">Ausdrücke (Expressions)</h2>
<p class="note">Eine strukturierte Übersicht und weitere Erläuterungen finden Sie unter <a href="Language.htm#expressions">Ausdrücke (Expressions)</a>.</p>
<p>Ausdrücke sind nützlich, um eine oder mehrere Operationen in Verbindung mit mehreren Variablen, direkt geschriebenen Zeichenketten und/oder direkt geschriebenen Zahlen durchzuführen.</p>
<p>Die Namen der Variablen dürfen innerhalb eines Ausdrucks nicht mit Prozentzeichen umschlossen werden (nur wenn es <a href="misc/Arrays.htm#pseudo">Pseudo-Arrays</a> und anderweitige <a href="#ref">Doppelverweise</a> sind). Direkt geschriebene Zeichenketten müssen demzufolge in Anführungszeichen gesetzt werden, um sie von Variablen zu unterscheiden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or GefundeneFarbe &lt;&gt; "Blau")
    MsgBox Die Einstellung ist zu hoch oder die Farbe ist falsch.</pre>
<p>Im obigen Beispiel wurde "Blau" in Anführungszeichen gesetzt, weil es eine direkt geschriebene Zeichenkette ist. Das folgende Beispiel zeigt, wie mithilfe von zwei aufeinanderfolgenden Anführungszeichen ein <em>tatsächliches</em> Anführungszeichen in eine direkt geschriebene Zeichenkette eingefügt werden kann: <code>"Sie sagte: <span class="red">""</span>Ein Apfel täglich.<span class="red">""</span>"</code>.</p>
<p><strong>Wichtig</strong>: Eine if-Anweisung, die einen Ausdruck enthält, unterscheidet sich von einer <a href="commands/IfEqual.htm">traditionellen if-Anweisung</a> wie <code>If GefundeneFarbe &lt;&gt; Blau</code> dadurch, dass das Zeichen nach dem Wort "if" eine runde Startklammer ist. Eine if-Anweisung wird als Ausdruck angesehen, wenn sie entweder vollständig von runden Klammern umschlossen ist oder wenn man so etwas wie <code>if (x &gt; 0) and (y &gt; 0)</code> schreibt. Die runde Startklammer kann weggelassen werden, wenn das erste Element nach dem "if" ein <a href="Functions.htm">Funktionsaufruf</a> oder ein Operator wie "not" oder "!" ist.</p>
<p><strong>Leere Zeichenketten</strong>: Um eine leere Zeichenkette in einem Ausdruck anzugeben, verwendet man ein leeres Anführungszeichen-Paar. Zum Beispiel wäre die Anweisung <code>if (MeineVar &lt;&gt; "")</code> wahr, wenn <em>MeineVar</em> nicht leer ist. In einer <a href="commands/IfEqual.htm">traditionellen if-Anweisung</a> wird ein leeres Anführungszeichen-Paar jedoch als direkt geschriebener Text behandelt. Zum Beispiel wäre die Anweisung <code>if MeineVar = ""</code> nur wahr, wenn <em>MeineVar</em> genau diese zwei Zeichen enthält. Um also zu prüfen, ob eine Variable in einer traditionellen if-Anweisung leer ist, genügt es, nur ein = oder &lt;&gt; anzugeben; zum Beispiel: <code>if Var =</code>.</p>
<p>Ungültige Ausdrücke wie <code>(x +* 3)</code> geben immer eine leere Zeichenkette zurück.</p>
<p><strong>Speichern eines Ausdruckswertes</strong>: Mit dem <a href="commands/SetExpression.htm">Operator ":="</a> kann der Wert bzw. das Ergebnis eines Ausdrucks in eine Variable gespeichert werden. Zum Beispiel:</p>
<pre>Nettopreis := Preis * (1 - Rabatt/100)</pre>
<p id="Boolean"><strong>Logische Werte</strong>: Das Ergebnis eines Ausdrucks (z. B. einer IF-Anweisung) ist falsch (False), wenn es leer oder eine 0 ist, oder wahr (True), wenn ein anderes Ergebnis vorliegt. Zum Beispiel wäre die Anweisung <code>if ItemCount</code> nur dann falsch, wenn ItemCount leer oder 0 ist. Der Ausdruck <code>if not ItemCount</code> würde das gegenteilige Ergebnis liefern.</p>
<p>Operatoren wie NOT/AND/OR/&gt;/=/&lt; erzeugen automatisch einen wahren oder falschen Wert: 1 für True und 0 für False. Im folgenden Beispiel bekommt die <em>Done</em>-Variable eine 1 zugewiesen, wenn eine der beiden Bedingungen wahr ist:</p>
<pre>Done := A_Index &gt; 5 or FoundIt</pre>
<p>Wie oben angedeutet, kann eine Variable einen falschen Wert enthalten, indem man sie leer macht oder ihr eine 0 zuweist. Verwenden Sie dann die Kurzanweisung <code>if Done</code>, um zu überprüfen, ob die Done-Variable wahr oder falsch ist.</p>
<p><span id="True"></span><span id="False"></span>Die Wörter <em>True</em> und <em>False</em> sind interne Variablen, die 1 und 0 enthalten. Sie können verwendet werden, um ein Skript besser lesbar zu machen, z. B.:</p>
<pre>GroßKleinSensitiv := false
SucheFortsetzen := true</pre>
<p><strong>Integer (ganze Zahl) und Floating-Point (Gleitkommazahl)</strong>: Zahlen, die einen Dezimalpunkt enthalten, werden innerhalb eines Ausdrucks als Gleitkommazahlen gewertet; alle anderen Zahlen werden als Integer behandelt. Bei den meisten Operatoren -- wie Addition und Multiplikation -- gilt: Wenn einer der Eingabewerte eine Gleitkommazahl ist, wird das Ergebnis auch eine Gleitkommazahl sein.</p>
<p>Integer können sowohl innerhalb als auch außerhalb von Ausdrücken im hexadezimalen oder dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel wäre <code>Sleep 0xFF</code> das gleiche wie <code>Sleep 255</code>. <span class="ver">[v1.0.46.11+]</span>: Gleitkommazahlen in wissenschaftlicher Schreibweise werden erkannt; aber nur, wenn sie einen Dezimalpunkt enthalten (z. B. <code>1<strong>.</strong>0e4</code> und <code>-2<strong>.</strong>1E-4</code>).</p>
<p id="percent-space"><strong>Erzwingen eines Ausdrucks</strong>: Standardmäßig unterstützen Befehlsparameter (außer AusgabeVar-Parameter) keine Ausdrücke, aber man kann mithilfe eines Prozentzeichens und Leer- oder Tabulatorzeichens ein Ausdruck in einem Parameter erzwingen. In <span class="ver">[v1.1.21+]</span> kann dieses Präfix in den EingabeVar-Parametern von fast allen Befehlen verwendet werden; benutzen Sie für die traditionellen IF-Befehlen stattdessen <a href="commands/IfExpression.htm">If (Ausdruck)</a>. Diese Technik wird häufig genutzt, um auf <a href="misc/Arrays.htm">Arrays</a> zuzugreifen. Zum Beispiel:</p>
<pre><a href="commands/FileAppend.htm">FileAppend</a>, <strong>%</strong> MeinArray[i], Meine Datei.txt
<a href="commands/FileAppend.htm">FileAppend</a>, <strong>%</strong> MeinPseudoArray%i%, Meine Datei.txt
<a href="commands/MsgBox.htm">MsgBox</a> <strong>%</strong> "Die MeineVar-Variable enthält " . MeineVar . "."
<a href="commands/Loop.htm">Loop</a> <strong>%</strong> Iterationen + 1
<a href="commands/WinSet.htm">WinSet</a>, Transparent, <strong>%</strong> X + 100
<a href="commands/Control.htm">Control</a>, Choose, <strong>%</strong> AktuelleAuswahl - 1</pre>

<h2 id="Operators">Operatoren innerhalb von Ausdrücken</h2>
<p class="note">Allgemeine Informationen über Operatoren finden Sie unter <a href="Language.htm#operators">Operatoren</a>.</p>
<p>In einer mathematischen Operation werden leere Werte (leere Zeichenketten) oder nicht-numerische Werte <strong>nicht</strong> als 0 gewertet, wenn nicht anders unten angegeben. Stattdessen wird es als Fehler behandelt, wodurch dieser Teil des Ausdrucks als leere Zeichenkette gewertet wird. Wenn die Variable X zum Beispiel leer wäre, würde der Ausdruck X+1 einen leeren Wert statt 1 zurückgeben.</p>
<p>Aus historischen Gründen werden <em>in Anführungszeichen gesetzte</em> numerische Zeichenketten wie <code>"123"</code> immer als nicht-numerisch angesehen, wenn sie direkt in einem Ausdruck verwendet werden (aber nicht, wenn sie in einer Variable gespeichert sind oder von einer Funktion zurückgegeben werden). Dieser nicht-numerische Attribut kann mit <a href="#concat">Verkettungen</a> erzwungen werden, so dass Ausdrücke wie <code>"0x" n</code> einen nicht-numerischen Wert erzeugen würden (selbst wenn n gültige hexadezimale Ziffern enthalten würde). Dieses Problem kann man umgehen, indem man den Wert in eine Variable speichert oder ihn via Funktion, wie z. B. <a href="Functions.htm#Round">Round()</a>, übergibt. Generell sollte man vermeiden, direkt geschriebene Zahlen in Anführungszeichen zu setzen, weil dieses Verhalten eventuell in einer zukünftigen Version geändert wird.</p>

<h3 id="operators">Ausdrucksoperatoren (in absteigender Priorität)</h3>
<table class="info">
  <tr id="ref">
    <td style="text-align:center; white-space:nowrap"><strong>%Var%</strong></td>
    <td><p>Umschließt man innerhalb eines Ausdrucks eine Variable mit Prozentzeichen (z. B. %Var%), wird alles, was auch immer in dieser Variable <u>enthalten</u> ist, als Name oder Teilname einer anderen Variable angesehen (wenn es diese Variable nicht gibt, wird %Var% in eine leere Zeichenkette aufgelöst). Meistens wird das verwendet, um auf <a href="misc/Arrays.htm#pseudo">Pseudo-Array</a>-Elemente zu verweisen, wie z. B:</p>
      <pre>Var := MeinArray%A_Index% + 100</pre>
      <p>Aus Gründen der Abwärtskompatibilität behandeln Befehlsparameter, die als "kann ein Ausdruck sein" dokumentiert sind, einen alleinstehenden Namen in Prozentzeichen (z. B. %Var%, aber nicht Array%i%), als wären die Prozentzeichen nicht vorhanden. Um das zu umgehen, kann der Verweis mit runden Klammern umschlossen werden; z. B. <code>Sleep (%Var%)</code>.</p>
      <p><span class="ver">[AHK_L 52+]:</span> %Var% kann nicht nur in eine normale Variable, sondern auch in eine <a href="Concepts.htm#environment-variables">Umgebungsvariable</a>, die Clipboard-Variable oder eine beliebige <a href="#BuiltIn">reservierte/schreibgeschützte Variable</a> aufgelöst werden. Vor Revision 52 wurde %Var% in solchen Fällen in eine leere Zeichenkette aufgelöst.</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>x.y</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Objektzugriff</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei muss <i>y</i> ein direkt geschriebener Wert sein. Siehe <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
  <tr id="new">
    <td style="text-align:center"><strong>new</strong></td>
    <td><span class="ver">[v1.1.00+]:</span> Erstellt ein neues von einem anderen Objekt abgeleitetes Objekt. Zum Beispiel wäre <code>x := new y</code> generell das gleiche wie <code>x := {base: y}</code>. Nach dem Wort <code>new</code> sollte eine Variable oder ein einfacher Klassenname in Form von <code>GlobaleKlasse.VerschachtelteKlasse</code> erfolgen, und je nach Bedarf Parameter wie in <code>x := new y(z)</code> (wo <code>y</code> eine Variable ist, nicht ein Funktionsname). Weitere Informationen finden Sie unter <a href="Objects.htm#Custom_Objects">Benutzerdefinierte Objekte</a>.</td>
  </tr>
  <tr id="IncDec">
    <td style="text-align:center"><strong>++<br>
    
    --</strong></td>
    <td><strong>Vorherige und nachherige Inkrementierung/Dekrementierung</strong>. Erhöht oder verringert eine Zahlenvariable um 1 (in den Versionen vor 1.0.46 müssen sie allein auf einer Zeile stehen; es dürfen keine anderen Operatoren vorhanden sein). Der Operator kann entweder vor oder nach dem Namen einer Variable erfolgen. Erfolgt der Operator <em>vor</em> dem Namen, wird die Operation sofort durchgeführt und ihr Ergebnis für die nächste Operation verwendet. Zum Beispiel würde <code>Var := ++X</code> die X-Variable sofort um 1 erhöhen und ihr Wert in <em>Var</em> speichern. Erfolgt der Operator <em>nach</em> dem Namen einer Variable, wird die Operation <em>erst</em> durchgeführt, wenn die Variable für die nächste Operation verwendet wurde. Zum Beispiel würde <code>Var := X++</code> die X-Variable erst um 1 erhöhen, wenn der aktuelle Wert von X in <em>Var</em> gespeichert wurde. Aus Gründen der Abwärtskompatibilität behandeln diese Operatoren leere Variablen als 0, sofern sie allein auf einer Zeile stehen; zum Beispiel würde sowohl <code>y := 1, ++x</code> als auch <code>MsgBox % ++x</code> ein leeres Ergebnis erzeugen, wenn x leer wäre.</td>
  </tr>
  <tr id="pow">
    <td style="text-align:center"><strong>**</strong></td>
    <td>
      <p><strong>Potenz</strong>. Sowohl die Basis als auch der Exponent können einen Dezimalpunkt enthalten. Ist der Exponent negativ, wird das Ergebnis in eine Gleitkommazahl umgewandelt, auch dann, wenn die Basis und der Exponent Integer sind. Da dieser Operator eine höhere Priorität hat als ein unäres Minuszeichen, wird <code>-2**2</code> wie <code>-(2**2)</code> ausgewertet und daher -4 zurückgeben. Um also eine direkt geschriebene negative Zahl zu potenzieren, muss sie in runden Klammern gesetzt werden, z. B <code>(-2)**2</code> .</p>
      <p class="note"><strong>Hinweis</strong>: Eine negative Basis in Verbindung mit einem gebrochenen Exponenten wie <code>(-2)**0.5</code> wird nicht unterstützt; das Ergebnis wird eine leere Zeichenkette sein. Schreibweisen wie <code>(-2)**2</code> und <code>(-2)**2.0</code> werden aber unterstützt.</p>
    </td>
  </tr>
  <tr id="unary">
    <td style="text-align:center"><strong>-<br>
    
    !<br>
    
    ~<br>
    
    &amp; *</strong></td>
    <td><p><strong>Einstelliges Minuszeichen (-)</strong>: Obwohl dieser Operator dasselbe Symbol wie der Subtraktionsoperator verwendet, können unäre Minuszeichen nur bei einzelnen Elementen oder Teilausdrücken angewendet werden: <code><strong>-</strong>(3 / <strong>-</strong>x)</code>. Der gegenteilige Operator, ein unäres Pluszeichen (+), wird in einem Ausdruck ignoriert.</p>
      <p><strong>Logisches NICHT (!)</strong>: Wenn der Operand leer oder 0 ist, wird das Ergebnis nach Anwenden des logischen NICHTs eine 1 sein, also "wahr". Ansonsten ist das Ergebnis eine 0 (falsch). Zum Beispiel: <code>!x or !(y and z)</code>. Hinweis: Das Wort NOT ist das Synonym zu <strong>!</strong>, allerdings hat <strong>!</strong> eine höhere Priorität. <span class="ver">[v1.0.46+]</span>: Aufeinanderfolgende unäre Operatoren wie <code><strong>!!</strong>Var</code> sind erlaubt, weil sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Dieser Operator invertiert jedes Bit seines Operanden. Handelt es sich bei den Operanden um eine Gleitkommazahl, wird er vor der Berechnung auf Integer-Größe gekürzt. Ist der Operand eine Zahl zwischen 0 und 4294967295 (0xffffffff), wird er als <u>vorzeichenloser</u> 32-Bit-Wert behandelt. Ansonsten wird er als <u>vorzeichenbehafteter</u> 64-Bit-Wert behandelt. Zum Beispiel wäre <code>~0xf0f</code> dann 0xfffff0f0 (4294963440).</p>
      <p id="amp"><strong>Adresse (&amp;)</strong>: <code>&amp;MeineVar</code> ruft die Adresse des Inhalts von <em>MeineVar</em> im Speicher ab. Dieser Operator wird häufig in Verbindung mit <a href="commands/DllCall.htm#struct">DllCall-Strukturen</a> genutzt. <code>&amp;MeineVar</code> deaktiviert außerdem das Caching von Binärzahlen in dieser Variable, was ihre Performance bei Berechnungen oder numerischen Vergleichen verringern kann. Sobald sich die Adresse einer Variable ändert, wird das Caching wieder aktiviert (z. B. via <a href="commands/VarSetCapacity.htm">VarSetCapacity()</a>).</p>
      <p><strong>Dereferenzierung (*)</strong>: <code>*Ausdruck</code> geht davon aus, dass <code>Ausdruck</code> in eine numerische Speicheradresse aufgelöst werden kann; dieser Operator ermittelt das Byte auf dieser Adresse, was eine Zahl zwischen 0 und 255 ist (es wird immer 0 abgerufen, wenn die Adresse 0 ist; jede andere ungültige Adresse sollte man lassen, weil das Skript ansonsten abstürzen könnte). Allerdings ist <a href="commands/NumGet.htm">NumGet()</a> deutlich besser darin, Binärzahlen abzurufen.</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>*<br>
    
    /<br>
    
    //
    
    </strong></td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingabewerte Integer sind; ansonsten ist es eine Gleitkommazahl.</p>
      <p id="divide"><strong>Echtes Dividieren (/)</strong>: Im Gegensatz zu <a href="commands/EnvDiv.htm">EnvDiv</a> wird die echte Division immer eine Gleitkommazahl liefern, sogar wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>3/2</code> gleich 1.5 statt 1, und <code>4/2</code> gleich 2.0 statt 2.</p>
      <p id="FloorDivide"><strong>Floor-Dividieren (//)</strong>: Der Doppelschrägstrich-Operator greift auf die hoch-performante Integer-Division zurück, wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>5//3</code> gleich 1 und <code>5//-3</code> gleich -1. Wenn einer der beiden Eingabewerte eine Gleitkommazahl ist, wird die Gleitkomma-Division erfolgen und das Ergebnis auf den nächstmöglichen links befindlichen Integer gekürzt. Zum Beispiel wäre <code>5//3.0</code> gleich 1.0 und <code>5.0//-3</code> gleich -2.0. Obwohl das Ergebnis dieser Gleitkomma-Division ein Integer ist, wird es in nachfolgenden Operationen als Gleitkommazahl behandelt. Um mehr über Modulo zu erfahren, siehe <a href="commands/Math.htm#Mod">Mod()</a>.</p>
    <p>Die Operatoren <a href="commands/EnvMult.htm">*=</a> und <a href="commands/EnvDiv.htm">/=</a> sind eine Kurzschreibweise zum Multiplizieren oder Dividieren eines Variablenwertes mit einem anderen Wert. <code>Var *= 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var * 2</code> (obwohl die erste Methode performanter ist).</p>
    <p>Eine Division durch 0 erzeugt ein leeres Ergebnis (leere Zeichenkette).</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>+<br>
    
    -</strong></td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Die Operatoren <a href="commands/EnvAdd.htm"><strong>+=</strong></a> und <a href="commands/EnvSub.htm"><strong>-=</strong></a> sind eine Kurzschreibweise zum Erhöhen oder Verringern eines Variablenwertes. <code>Var += 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var + 2</code> (obwohl die erste Methode performanter ist). Desweiteren kann eine Variable mit <a href="#IncDec">Var++, Var--, ++Var oder --Var</a> schrittweise um 1 erhöht oder verringert werden.</p>
    </td>
  </tr>
  <tr id="bitwise">
    <td style="text-align:center"><strong>&lt;&lt;<br>
    
    &gt;&gt;</strong></td>
    <td><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong> und <strong>nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &lt;&lt; Wert2</code>. Jeder Eingabewert im Gleitkommaformat wird vor der Berechnung zu einem Integer gekürzt. Die bitweise Verschiebung nach links (<strong>&lt;&lt;</strong>) wäre das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" multiplizieren. Die bitweise Verschiebung nach rechts (<strong>&gt;&gt;</strong>) wäre das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" dividieren und dann das Ergebnis auf den nächstmöglichen links befindlichen Integer runden; zum Beispiel wäre <code>-3&gt;&gt;1</code> gleich -2.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>&amp;<br>
      
      ^<br>
      
      |
    
    </strong></td>
    <td><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von diesen drei Operatoren hat <strong>&amp;</strong> die höchste Priorität und <strong>|</strong> die niedrigste Priorität. Jeder Eingabewert im Gleitkommaformat wird vor der Berechnung zu einem Integer gekürzt.</td>
  </tr>
  <tr id="concat">
    <td style="text-align:center"><strong>.</strong></td>
    <td><p><strong>Verkettung</strong>. Mit dem Punkt-Operator können zwei Elemente zu einer Zeichenkette kombiniert werden (auf beiden Seiten des Punktes muss mindestens ein Leerzeichen vorhanden sein). Sie können diesen Punkt auch weglassen, um dasselbe Ergebnis zu erzielen (außer bei Zweideutigkeiten wie <code>x <strong>-</strong>y</code>, oder wenn das rechts befindliche Element ein ++ oder -- davor hat). Fehlt der Punkt, müssen die Elemente, die zusammengeführt werden sollen, mit mindestens einem Leerzeichen getrennt werden.<br>
      Beispiel (Ausdrucksmethode): <code>Var := "Die Farbe ist " <strong>.</strong> GefundeneFarbe</code><br>
      Beispiel (traditionelle Methode): <code>Var = Die Farbe ist %GefundeneFarbe%</code></p>
        <p>Teilausdrücke können auch verkettet werden. Zum Beispiel: <code>Var := "Der Nettopreis ist " <strong>.</strong> Preis * (1 - Rabatt/100)</code>.</p>
        <p>Eine Zeile, die mit einem Punkt (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p></td>
  </tr>
  <tr id="regex">
    <td style="text-align:center"><strong>~=</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> Kurzschreibweise für <a href="commands/RegExMatch.htm">RegExMatch</a>. <code>"abc123" ~= "\d"</code> würde beispielsweise ErrorLevel auf 0 setzen und eine 4 liefern (die Position des ersten numerischen Zeichens). Früher vor <span class="ver">[v1.1.03]</span> hatte dieser Operator die gleiche Priorität wie der <em>Gleichheitsoperator (=)</em> und war unvollständig dokumentiert.</td>
  </tr>
  <tr id="compare">
    <td style="text-align:center"><strong>&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    
    &gt;= &lt;=</strong></td>
    <td><strong>Größer (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>größer gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. Wenn einer der beiden Eingabewerte keine Zahl ist, werden sie alphabetisch verglichen (eine in Anführungszeichen gesetzte Zeichenkette wie "55" gilt in diesem Zusammenhang immer als nicht-numerisch). Der Vergleich unterscheidet nur zwischen Groß- und Kleinschreibung, wenn <a href="commands/StringCaseSense.htm">StringCaseSense</a> aktiviert ist. Siehe auch: <a href="commands/Sort.htm">Sort</a></td>
  </tr>
  <tr id="equal">
    <td style="text-align:center"><strong>=<br>
      
      ==<br>
    
    &lt;&gt; !=</strong></td>
    <td>
      <p><strong>Gleich (=)</strong>, <strong>Groß-/Kleinschreibung-sensitiv gleich (==)</strong> und <strong>ungleich (&lt;&gt; oder !=)</strong>. Die Operatoren <strong>!=</strong> und <strong>&lt;&gt;</strong> sind funktional identisch. Die Operatoren <strong>==</strong> und <strong>=</strong> verhalten sich gleich, wenn beide Eingabewerte numerisch sind. Wenn dies nicht der Fall ist, wird <strong>==</strong> immer Groß-/Kleinschreibung-sensitiv sein und <strong>=</strong> immer nicht-Groß-/Kleinschreibung-sensitiv sein (die Methode der Nicht-Sensitivität ist abhängig von <a href="commands/StringCaseSense.htm">StringCaseSense</a>). Die Operatoren <strong>&lt;&gt;</strong> und <strong>!=</strong> berücksichtigen hingegen <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</p>
      <p class="note"><strong>Hinweis</strong>: Eine in Anführungszeichen gesetzte Zeichenkette wie "55" gilt in diesem Zusammenhang immer als nicht-numerisch.</p>
    </td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>NOT</strong></td>
    <td><strong>Logisches NICHT</strong>. Abgesehen von seiner geringeren Priorität ist dieser Operator funktional identisch zum <strong>!</strong>-Operator. <code>not (x = 3 or y = 3)</code> wäre zum Beispiel das gleiche wie <code><strong>!</strong>(x = 3 or y = 3)</code>.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>AND<br>
    
    &amp;&amp;</strong></td>
    <td>Beide Operatoren sind ein <strong>logisches UND</strong>. Zum Beispiel: <code>x &gt; 3 and x &lt; 10</code>. Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet. Eine Zeile, die mit AND/OR/&amp;&amp;/|| (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>OR<br>
    
    ||</strong></td>
    <td>Beide Operatoren sind ein <strong>logisches ODER</strong>. Zum Beispiel: <code>x &lt;= 3 or x &gt;= 10</code>. Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet.</td>
  </tr>
  <tr id="ternary">
    <td style="text-align:center"><strong>?:</strong></td>
    <td><strong>Ternärer Operator</strong> <span class="ver">[v1.0.46+]</span>. Dieser Operator ist eine Kurzschreibweise zum Durchführen einer <a href="commands/IfExpression.htm">if-else-Anweisung</a>. Der Operator wertet die Bedingung auf der linken Seite aus, um festzustellen, welche der beiden Verzweigungen als Endergebnis dienen soll. <code>Var := x&gt;y ? 2 : 3</code> würde beispielsweise eine 2 in <em>Var</em> speichern, falls x größer als y ist; ansonsten wird eine 3 gespeichert. Zur Verbesserung der Performance wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>).</td>
  </tr>
  <tr id="AssignOp">
    <td style="text-align:center"><strong>:=<br>
        
        +=<br>
        
        -=<br>
        
        *=<br>
        
        /=<br>
        
        //=<br>
        
        .=<br>
        
        |=<br>
        
        &amp;=<br>
        
        ^=<br>
        
        &gt;&gt;=<br>
        
        &lt;&lt;=</strong>
    </td>
    <td><p><strong>Zuweisung</strong>. Führt eine Operation auf den Inhalt einer Variable aus und speichert das Ergebnis wieder in die gleiche Variable (früher vor v1.0.46 konnte dieser Operatoren nur der am weitesten links befindlichen Operator sein, außerdem wurden nur die ersten fünf Operatoren unterstützt). Der einfachste Zuweisungsoperator ist der <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>, der verwendet wird, um das Ergebnis eines Ausdrucks in eine Variable zu speichern. Eine Beschreibung der anderen Operatoren finden Sie in den entsprechenden Einträgen dieser Tabelle. <code>Var //= 2</code> führt beispielsweise eine <a href="#FloorDivide">Floor-Division</a> durch, um <em>Var</em> durch 2 zu teilen, und speichert dann das Ergebnis wieder in <em>Var</em>. Ein weiteres Beispiel ist <code>Var <strong>.=</strong> "abc"</code>, das die Kurzschreibweise für <code>Var := Var <strong>.</strong> "abc"</code> wäre.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Eine Zeile wie <code>Var1 := Var2 := 0</code> würde also erst eine 0 in <em>Var2</em> speichern und dann <em>Var2</em> in <em>Var1</em> speichern.</p>
    <p>Verwendet man eine Zuweisung im Eingabewert eines anderen Operators, wird die Variable selbst als Eingabewert genommen. Der Ausdruck <code>(Var += 2) &gt; 50</code> wäre beispielsweise wahr, wenn der gerade eben erhöhte Wert in <em>Var</em> größer als 50 ist. Eine auf diese Weise verwendete Zuweisung kann auch via Verweis (<a href="Functions.htm#ByRef">ByRef</a>) übergeben werden, oder ihre <a href="#amp">Adresse</a> zurückgeben; zum Beispiel: <code>&amp;(x:="abc")</code>.</p>
    <p>Die Priorität der Zuweisungsoperatoren erhöht sich automatisch, wenn dadurch ein Syntaxfehler verhindert oder ein besseres Verhalten bereitgestellt werden kann. Zum Beispiel: <code>not x := y</code> würde als <code>not (x := y)</code> ausgewertet werden. <code>++Var := X</code> würde als <code>++(Var := X)</code> ausgewertet werden; und <code>Z &gt; 0 ? X := 2 : Y := 2</code> würde als <code>Z &gt; 0 ? (X := 2) : (Y := 2)</code> ausgewertet werden.</p>
    <p>Bekannte Einschränkungen durch Abwärtskompatibilität (die eventuell in einer zukünftigen Version behoben werden): 1) Wenn <strong>/=</strong> der am weitesten links befindliche Operator in einem Ausdruck ist und nicht zu einer <a href="#comma">Mehrfachanweisung</a> gehört, führt er eine <a href="#FloorDivide">Floor-Division</a> durch, es sei denn, einer der Eingabewerte ist eine Gleitkommazahl (in allen anderen Fällen wird <strong>/=</strong> eine <a href="#divide">echte Division</a> durchführen); 2) <a href="commands/EnvAdd.htm">Datum/Zeit-Berechnung</a> wird von <strong>+=</strong> und <strong>-=</strong> nur unterstützt, wenn dieser Operator der am weitesten links befindliche Operator auf der Zeile ist; 3) Die Operatoren <strong>+=</strong>, <strong>-=</strong> und *= behandeln leere Variablen als 0, aber nur, wenn sie einzeln auf einer Zeile stehen; <code>y := 1, x += 1</code> als auch <code>MsgBox % x -= 3</code> würden beispielsweise ein leeres Ergebnis erzeugen, falls x leer ist.</p></td>
  </tr>
  <tr id="comma">
    <td style="text-align:center"><strong>,</strong></td>
    <td><p><strong>Komma (Mehrfachanweisung)</strong> <span class="ver">[v1.0.46+]</span>. Kommas können genutzt werden, um mehrere Teilausdrücke auf einer Zeile zu schreiben. Diese Vorgehensweise wird häufig angewendet, um mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren. Zum Beispiel: <code>x := 1<strong>,</strong> y += 2<strong>,</strong> ++index, func()</code>. Solche Anweisungen werden von links nach rechts ausgeführt.</p>
      <p class="note"><strong>Hinweis</strong>: Eine Zeile, die mit einem Komma (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>. Siehe auch: <a href="#CommaPerf">Komma-Performance</a>.</p>
      <p><span class="ver">[v1.0.46.01+]</span>: Wenn direkt nach einem Komma eine Variable und ein Gleichheitszeichen erfolgt, wird das Gleichheitszeichen automatisch als <a href="commands/SetExpression.htm">Zuweisung (:=)</a> behandelt. Alle Teilausdrücke in der folgenden Mehrfachanweisung sind beispielsweise Zuweisungen: <code>x:=1, y=2, a=b=c</code>. Neue Skripte sollten sich nicht auf dieses Verhalten verlassen, weil es eventuell noch geändert wird. Diese Regel gilt nur für reine Variablen und nicht für <a href="#ref">Doppeldereferenzierungen</a>; die folgende Mehrfachanweisung enthält beispielsweise nur eine Zuweisung: <code>x:=1, %y%=2</code></p></td>
  </tr>
</table>
<p>Die folgenden Arten von Teilausdrücken überschreiben die Priorität bzw. die Reihenfolge der Auswertung:</p>
<table class="info">
  <tr>
    <td style="text-align:center"><strong>(</strong><em>Ausdruck</em><strong>)</strong></td>
    <td><p>Ein beliebiger in Klammern gesetzter Teilausdruck. <code>(3 + 2) * 2</code> beispielsweise würde <code>3 + 2</code> zuerst auswerten.</p></td>
  </tr>
  <tr>
    <td style="text-align:center; white-space:nowrap"><p><strong>mod()<br>
        
        round()<br>
    
    abs()</strong></p></td>
    <td><strong>Funktionsaufruf</strong>. Der Name einer Funktion muss unmittelbar danach mit einer runden Startklammer beginnen, ohne Leer- oder Tabulatorzeichen dazwischen. Einzelheiten finden Sie unter <a href="Functions.htm">Funktionen</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center; white-space:nowrap"><p><strong>%</strong><em>func</em><strong>%()</strong></p></td>
    <td>Siehe <a href="Functions.htm#DynCall">Dynamisches Aufrufen einer Funktion</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center"><em>func</em><strong>.()</strong></td>
    <td><p><strong>Veraltet:</strong> Diese Syntax wird nicht empfohlen. Benutzen Sie stattdessen <code>%func%()</code> (für Funktionsnamen und Objekte) oder <code>func.Call()</code> (für Funktionsobjekte).</p>
    <p><span class="ver">[AHK_L 48+]:</span> Versucht, eine namenlose Methode des Objekts <i>func</i> aufzurufen. Üblicherweise ist das die Standardmethode des Objekts. Wenn <i>func</i> kein Objekt enthält, wird stattdessen das <a href="Objects.htm#Default_Base_Object">Standard-Base-Objekt</a> aufgerufen.</p>
    <p><span class="ver">[v1.0.95+]:</span> Enthält <i>func</i> einen Funktionsnamen, wird die benannte Funktion aufgerufen.</p></td>
  </tr>
  <tr>
    <td style="text-align:center">Fn(<strong><em>Parameter</em>*</strong>)</td>
    <td><p><span class="ver">[AHK_L 60+]:</span> <a href="Functions.htm#VariadicCall">Variadischer Funktionsaufruf</a>. <em>Parameter</em> ist ein Array (Objekt), das Parameterwerte enthält.</p></td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>x[y]<br>[a, b, c]</strong></td>
    <td>
      <p><span class="ver">[AHK_L 31+]:</span> <strong>Zugriff auf Objektelemente</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei muss <i>y</i> eine Parameterliste sein, oder ein Ausdruck, der einen Methodennamen zurückgibt.</p>
      <p><span class="ver">[v1.0.97+]:</span> <strong>Direkte Array-Schreibweise</strong>. Wenn vor der eckigen Startklammer kein Wert (oder Teilausdruck, der einen Wert zurückgibt) angegeben ist, wird sie stattdessen als Beginn eines direkt geschriebenen Arrays interpretiert. <code>[a, b, c]</code> beispielsweise ist das gleiche wie <code>Array(a, b, c)</code> (a, b und c sind Variablen).</p>
      <p>Siehe <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> und <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>, um mehr zu erfahren.</p>
    </td>
  </tr>
  <tr>
    <td style="text-align:center"><strong>{a: b, c: d}</strong></td>
    <td><p><span class="ver">[v1.0.97+]:</span> <strong>Direkte Objekt-Schreibweise</strong>. Erstellt ein Objekt oder assoziatives Array. <code>x := {a: b}</code> beispielsweise ist das gleiche wie <code>x := Object("a", b)</code> oder <code>x := Object(), x.a := b</code>. Siehe <a href="Objects.htm#Usage_Associative_Arrays">Assoziative Arrays</a>, um mehr zu erfahren.</p></td>
  </tr>
</table>
<br>
<p id="CommaPerf"><strong>Performance</strong>: <span class="ver">[v1.0.48+]</span>: Ausdrücke, die mit einem Komma getrennt werden, sind performanter als einzeln geschriebene Ausdrücke, besonders wenn es darum geht, eine Variable in eine andere Variable zu speichern (z. B. <code>x := y, a := b</code>). Je mehr Ausdrücke zu einem einzigen Ausdruck zusammengefasst werden, desto höher ist die Performance; zum Beispiel könnte man ein Geschwindigkeitszuwachs von 35 % erreichen, wenn man fünf oder zehn einfache Ausdrücke zu einem Ausdruck kombiniert.</p>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind fest in das Programm integriert und normal abrufbar.</p>
<p class="note">Allgemeine Informationen finden Sie unter <a href="Concepts.htm#built-in-variables">Interne Variablen</a>.</p>
<h3>Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Skript-Eigenschaften: <a href="#CommandLine">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Skript-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#BatchLines">A_BatchLines</a>, <a href="#ListLines">A_ListLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a></li>
  <li>Inaktive Zeit des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a>, <a href="#TimeIdleKeyboard">A_TimeIdleKeyboard</a>, <a href="#TimeIdleMouse">A_TimeIdleMouse</a></li>
  <li>GUI-Fenster und Menüleisten: <a href="#Gui">A_Gui</a>, <a href="#GuiControl">A_GuiControl</a>, <a href="#GuiEvent">A_GuiEvent</a>, <a href="#EventInfo">A_EventInfo</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#ThisMenuItem">A_ThisMenuItem</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#Caret">A_CaretX</a>, <a href="#Caret">A_CaretY</a>, <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3>Sonderzeichen</h3>
<table class="info">
  <tr id="Space">
    <td>A_Space</td>
    <td>Diese Variable enthält ein einzelnes Leerzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Diese Variable enthält ein einzelnes Tabulatorzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="prop">Skript-Eigenschaften</h3>
<table class="info">
  <tr id="CommandLine">
    <td>1, 2, 3, etc.</td>
    <td>Diese Variablen werden automatisch erstellt, wenn ein Skript mit Befehlszeilenparametern gestartet wird. Sie können wie normale Variablennamen geändert oder abgerufen werden (zum Beispiel: %1%), aber können nicht direkt in einem <a href="#Expressions">Ausdruck</a> verwiesen werden. Die Variable %0% enthält die Anzahl der Parameter, die übergeben worden sind (0 wenn keine). Einzelheiten finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter</a>.</td>
  </tr>
  <tr id="Args">
    <td>A_Args<br><span class="ver">[v1.1.27+]</span></td>
    <td><strong>Lesen/Schreiben:</strong> Enthält ein <a href="Objects.htm#Usage_Simple_Arrays">Array</a> mit Befehlszeilenparametern. Weitere Informationen finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a>.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td>Das aktuelle Arbeitsverzeichnis, von wo aus das Skript standardmäßig auf Dateien zugreift. Der letzte umgekehrte Schrägstrich ist nicht enthalten, es sein denn, es ist das Stammverzeichnis. Zwei Beispiele: C:\ und C:\Meine Dokumente. Mit <a href="commands/SetWorkingDir.htm">SetWorkingDir</a> kann das Arbeitsverzeichnis geändert werden.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>Der vollständige Pfad des Verzeichnisses, wo das aktuelle Skript zu finden ist. Der letzte umgekehrte Schrägstrich wird weggelassen (auch bei Stammverzeichnissen).</td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>Der Dateiname des aktuellen Skripts, ohne Pfad, z. B. MeinSkript.ahk.</td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>Eine Kombination von den zwei Variablen darüber, um den vollständigen Pfad des Skripts zu erhalten, z. B. C:\Meine Dokumente\MeinSkript.ahk</td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd<br><span class="ver">[v1.1.01+]</span></td>
    <td>Die Eindeutige ID (HWND/Handle) des versteckten Skript-<a href="Program.htm#main-window">Hauptfensters</a>.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile innerhalb des Skripts (oder die Zeile aus einer <a href="commands/_Include.htm">#Include-Datei</a>). Diese Zeilennummer stimmt mit der angezeigten Zeilennummer in <a href="commands/ListLines.htm">ListLines</a> überein; diese Variable ist zum Beispiel nützlich, um einen Fehler zu melden: <code>MsgBox, Eine Zeile konnte nicht in die Log-Datei geschrieben werden (Zeilennummer %A_LineNumber%)</code></p>
    <p>Da beim <a href="Scripts.htm#ahk2exe">Kompilieren eines Skripts</a> alle <a href="commands/_Include.htm">#Include-Dateien</a> zusammengefügt werden, sind die Zeilen eventuell anders nummeriert als im nicht-kompilierten Modus.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>Der vollständige Pfad der Datei, auf der sich <a href="#LineNumber">A_LineNumber</a> bezieht, und prinzipiell das gleiche ist wie <a href="#ScriptFullPath">A_ScriptFullPath</a>, es sei denn, die Zeile gehört zu einer <a href="commands/_Include.htm">#Include-Datei</a> eines nicht-kompilierten Skripts.</td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeineFunktion. Siehe auch: <a href="commands/IsFunc.htm">IsFunc()</a></td>
  </tr>
  <tr id="ThisLabel">
    <td>A_ThisLabel<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name des <a href="misc/Labels.htm">Labels</a> (Subroutine), das gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeinLabel. Diese Variable wird jedes Mal aktualisiert, wenn das Skript <a href="commands/Gosub.htm">Gosub</a>/<a href="commands/Return.htm">Return</a> oder <a href="commands/Goto.htm">Goto</a> ausführt. Sie wird auch aktualisiert, wenn ein Label automatisch durch <a href="commands/SetTimer.htm">Timer</a>, <a href="commands/Gui.htm#DefaultWin">GUI-Threads</a>, <a href="commands/Menu.htm">Menüpunkte</a>, <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/OnClipboardChange.htm">OnClipboardChange</a> (Label) und <a href="commands/OnExit.htm">OnExit</a> aufgerufen wird. A_ThisLabel wird jedoch nicht aktualisiert, wenn die Skriptausführung in eines der oben genannten Label "hineinfällt"; in diesem Fall behält A_ThisLabel ihren vorherigen Wert. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="commands/IsLabel.htm">IsLabel()</a></td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>In den Versionen vor 1.0.22 ist diese Variable leer. Sie enthält die Version des AutoHotkey-Programms, mit dem das Skript ausgeführt wird, z. B. 1.0.22. In einem <a href="Scripts.htm#ahk2exe">kompilierten Skript</a> wird die Version des AutoHotkey-Programms gemeldet, mit der das Skript ursprünglich kompiliert worden ist. Aufgrund der Struktur der Versionsnummer kann ein Skript mithilfe von "&gt;" oder "&gt;=" überprüfen, ob A_AhkVersion größer als eine bestimmte Versionsnummer ist. Zum Beispiel: <code>if A_AhkVersion &gt;= 1.0.25.07</code>.</td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td><p>Bei nicht-kompilierten Skripten: Der vollständige Pfad der EXE-Datei, mit der das aktuelle Skript gerade ausgeführt wird. Zum Beispiel: C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
    <p>Bei <a href="Scripts.htm#ahk2exe">kompilierten Skripten</a>: Das gleiche wie oben, allerdings wird das AutoHotkey-Verzeichnis mithilfe des Registry-Eintrags <em>HKLM\SOFTWARE\AutoHotkey\InstallDir</em> ermittelt. Wenn dieser Eintrag nicht gefunden wird, ist A_AhkPath leer.</p></td>
  </tr>
  <tr id="IsUnicode">
    <td>A_IsUnicode</td>
    <td>Enthält eine 1, wenn Zeichenketten im Unicode-Format (16-Bit) sind, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn Zeichenketten im ANSI-Format (8-Bit) sind. Das Format der Zeichenketten ist abhängig davon, mit welcher AutoHotkey-Version das Skript ausgeführt wird oder mit welcher BIN-Datei es kompiliert wurde.</td>
  </tr>
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td>Enthält eine 1, wenn das Skript als <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn das nicht der Fall ist.</td>
  </tr>
  <tr id="ExitReason">
    <td>A_ExitReason</td>
    <td>Der aktuellste Grund, warum das Skript beendet werden soll. Diese Variable enthält nur einen Wert, wenn das Skript eine <a href="commands/OnExit.htm">OnExit</a>-Subroutine hat, die entweder gerade läuft oder durch einen Exitversuch mindestens einmal aufgerufen wurde. Siehe <a href="commands/OnExit.htm">OnExit</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>
      <p>Das aktuelle 4-stellige Jahr (z. B. 2004). A_Year enthält denselben Wert.</p>
      <p class="note"><strong>Hinweis</strong>: Um die Zeit oder das Datum in einem Format darzustellen, das Ihrem Gebietsschema oder Ihrer Sprache entspricht, verwendet man <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar</code> (Zeit und langes Datum) oder <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar,, LongDate</code> (ermittelt ein Datum im langen Format).</p>
    </td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Der aktuelle zweistellige Monat (01-12). A_Mon enthält denselben Wert.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Der aktuelle zweistellige Tag des Monats (01-31). A_MDay enthält denselben Wert.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Der aktuelle vollständige Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Der aktuelle abgekürzte Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Der aktuelle vollständige Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Der aktuelle abgekürzte Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Der aktuelle einstellige Wochentag (1-7). 1 ist Sonntag in allen Gebietsschemen.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Der aktuelle Tag im Jahr (1-366). Der Wert enthält keine führenden Nullen, z. B. wird 9 abgerufen, nicht 009. Das folgende Beispiel zeigt, wie ein Wert mit führenden Nullen abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , YDay0</code>.</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Das aktuelle Jahr + Wochennummer (z. B. 200453) gemäß ISO 8601. Um das Jahr von der Woche zu trennen, verwendet man <code><a href="commands/StringLeft.htm">StringLeft</a>, Jahr, A_YWeek, 4</code> und <code><a href="commands/StringLeft.htm">StringRight</a>, Woche, A_YWeek, 2</code>. Genaue Definition von A_YWeek: Wenn die Woche mit dem 1. Januar mindestens vier Tage im neuen Jahr hat, ist sie Woche 1. Ansonsten ist sie die letzte Woche des vorherigen Jahres, und die nachfolgende Woche die erste Woche des neuen Jahres.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Die aktuelle zweistellige Stunde (00-23) im 24-Stunden-Format. Das folgende Beispiel zeigt, wie die Zeit im 12-Stunden-Format mit den Indikatoren AM bzw. PM abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , h:mm:ss tt</code></td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Die aktuelle zweistellige Minute (00-59).</p></td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Die aktuelle zweistellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Die aktuelle dreistellige Millisekunde (000-999). Das folgende Beispiel zeigt, wie die führenden Nullen entfernt werden können: <code>Millisekunden := A_MSec + 0</code>.</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>
      <p>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format.</p>
      <p class="note"><strong>Hinweis</strong>: Mit <a href="commands/EnvAdd.htm">EnvAdd</a> und <a href="commands/EnvSub.htm">EnvSub</a> können beliebige Datum- und Zeitwerte berechnet werden. Mit <a href="commands/FormatTime.htm">FormatTime</a> können außerdem beliebige Datum- und Zeitwerte in einem Format dargestellt werden, das Ihrem Gebietsschema oder Ihrer Sprache entspricht.</p>
    </td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die Coordinated Universal Time (UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich das gleiche wie Greenwich Mean Time (GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Ruft die Zeit in Millisekunden ab, die seit dem Systemstart verstrichen ist. Wenn man A_TickCount in eine Variable speichert und später mit dem neuesten A_TickCount-Wert subtrahiert, erhält man einen Wert, der eine verstrichene Zeit repräsentiert. Zum Beispiel:</p>
        <pre>Startzeit := A_TickCount
Sleep, 1000
Laufzeit := A_TickCount - Startzeit
MsgBox,  %Laufzeit% Millisekunden sind verstrichen.</pre>
<p>Schauen Sie sich <a href="commands/DllCall.htm#QPC">QueryPerformanceCounter()</a> an, wenn Sie eine höhere Genauigkeit als die 10 ms von A_TickCount benötigen.</p>
</td>
  </tr>
</table>
<h3 id="settings">Skript-Einstellungen</h3>
<table class="info">
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält eine 1, wenn das Skript via <a href="commands/Suspend.htm">Suspend</a> gesperrt wurde, ansonsten 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält eine 1, wenn der <a href="misc/Threads.htm">Thread</a>, der sich direkt unter dem aktuellen Thread befindet, <a href="commands/Pause.htm">pausiert</a> wurde. Ansonsten enthält sie eine 0.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält eine 0, wenn <a href="commands/Critical.htm">Critical</a> im <a href="misc/Threads.htm">aktuellen Thread</a> ausgeschaltet ist. Ansonsten enthält sie einen Integer-Wert größer als 0, der die aktuell gesetzte <a href="commands/Critical.htm#Interval">Meldungsüberprüfungsfrequenz</a> von Critical repräsentiert. Da <code>Critical 0</code> den kritischen Status eines Threads ausschaltet, kann der aktuelle Status von Critical mithilfe von <code>Alt_IsCritical := A_IsCritical</code> gespeichert und später mit <code>Critical %Alt_IsCritical%</code> wiederhergestellt werden.</td>
  </tr>
  <tr id="BatchLines">
    <td>A_BatchLines</td>
    <td>(oder A_NumBatchLines) Der aktuell gesetzte Wert von <a href="commands/SetBatchLines.htm">SetBatchLines</a>. Beispiele: 200 oder 10ms (je nach Format).</td>
  </tr>
  <tr id="ListLines">
    <td>A_ListLines<br><span class="ver">[v1.1.28+]</span></td>
    <td>Enthält 1, wenn <a href="commands/ListLines.htm">ListLines</a> eingeschaltet ist. Ansonsten enthält sie eine 0.</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td>Der aktuell gesetzte Modus von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>: 1, 2, 3 oder RegEx.</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td>Die aktuell gesetzte Übereinstimmungsgeschwindigkeit (fast oder slow) von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr id="AutoTrim">
    <td>A_AutoTrim</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/AutoTrim.htm">AutoTrim</a>.</td>
  </tr>
  <tr id="StringCaseSense">
    <td>A_StringCaseSense</td>
    <td>Der aktuell gesetzte Modus (On, Off oder Locale) von <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td><span class="ver">[AHK_L 46+]</span>: Enthält die Codierung, die standardmäßig für alle Befehle gilt; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="FormatInteger">
    <td>A_FormatInteger</td>
    <td>Das aktuell gesetzte Integer-Format (H oder D) von <a href="commands/SetFormat.htm">SetFormat</a>. <span class="ver">[AHK_L 42+]:</span> Ein kleingeschriebenes h kann auch enthalten sein.</td>
  </tr>
  <tr id="FormatFloat">
    <td>A_FormatFloat</td>
    <td>Das aktuell gesetzte Gleitkommazahlenformat von <a href="commands/SetFormat.htm">SetFormat</a>.</td>
  </tr>
  <tr id="SendMode">
    <td>A_SendMode</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (Event, Input, Play oder InputThenPlay) von <a href="commands/SendMode.htm">SendMode</a>.</td>
  </tr>
  <tr id="SendLevel">
    <td>A_SendLevel</td>
    <td><span class="ver">[v1.1.23+]:</span> Die aktuelle Einstellung von <a href="commands/SendLevel.htm">SendLevel</a> (ein Integer zwischen 0 und 100).</td>
  </tr>
  <tr id="StoreCapslockMode">
    <td>A_StoreCapsLockMode</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (On oder Off) von <a href="commands/SetStoreCapslockMode.htm">SetStoreCapsLockMode</a>.</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay<br>
    
    A_KeyDuration</td>
    <td>Die aktuell gesetzte Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> (immer dezimal, niemals hexadezimal). A_KeyDuration benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="KeyDelayPlay">
    <td>A_KeyDelayPlay<br>
    
    A_KeyDurationPlay</td>
    <td>Die aktuell gesetzte Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> für den <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Modus (immer dezimal, niemals hexadezimal). Benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetWinDelay.htm">SetWinDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetControlDelay.htm">SetControlDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay<br>
    
    A_MouseDelayPlay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetMouseDelay.htm">SetMouseDelay</a> (immer dezimal, nicht hexadezimal). A_MouseDelay ist für den traditionellen SendEvent-Modus, und A_MouseDelayPlay für <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>. A_MouseDelayPlay benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td>Die aktuell gesetzte Geschwindigkeit von <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="CoordMode">
    <td>A_CoordModeToolTip<br>
    
    A_CoordModePixel<br>
    
    A_CoordModeMouse<br>
    
    A_CoordModeCaret<br>
    
    A_CoordModeMenu</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (Window, Client oder Screen) von <a href="commands/CoordMode.htm">CoordMode</a>.</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td><span class="ver">[v1.1.08+]:</span> Die aktuell gesetzte Registry-Ansicht von <a href="commands/SetRegView.htm">SetRegView</a>.</td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td>Enthält eine 1, wenn das <a href="Program.htm#tray-icon">Tray-Symbol</a> gerade versteckt ist, ansonsten 0. Mit der <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a>-Direktive oder dem <a href="commands/Menu.htm">Menu</a>-Befehl kann das Symbol versteckt werden.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td>Enthält den Text des ToolTips, den man via <code><a href="commands/Menu.htm">Menu</a>, Tray, Tip</code> für das <a href="Program.htm#tray-icon">Tray-Symbol</a> definiert hat. Ansonsten ist diese Variable leer.</td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Enthält den vollständigen Pfad der Symboldatei, die man via <code><a href="commands/Menu.htm">Menu</a>, Tray, Icon</code> für das <a href="Program.htm#tray-icon">Tray-Symbol</a> definiert hat. Ansonsten ist diese Variable leer.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Ansonsten enthält diese Variable die Nummer des A_IconFile-Symbols (üblicherweise 1).</td>
  </tr>
</table>
<h3>Inaktive Zeit des Benutzers</h3>
<table class="info">
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>Ruft die Zeit in Millisekunden ab, die seit der letzten Eingabe (Tastatur, Maus usw.) verstrichen ist. Diese Variable ist nützlich, um herauszufinden, ob der Benutzer abwesend ist. Physische Benutzereingaben sowie künstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Skripten (z. B. der <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Befehl) werden diesen Wert wieder auf 0 setzen. Da dieser Wert tendenziell um 10 erhöht wird, ist es ratsam, ihn nicht zu überprüfen, ob er mit einem anderen Wert exakt übereinstimmt. Überprüfen Sie stattdessen, ob dieser Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel: <code>IfGreater, A_TimeIdle, 600000, MsgBox, Die letzte Eingabeaktivität erfolgte vor ca. 10 Minuten</code>.</td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td>Ähnlich wie oben, allerdings werden künstliche Tastatureingaben und/oder Mausklicks ignoriert, wenn der entsprechende Hook (<a href="commands/_InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/_InstallMouseHook.htm">Maus</a>) installiert ist; das heißt, dass diese Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastatureingaben und Mausklicks fälschlicherweise die Aktivität des Benutzers vortäuschen. Wenn kein einziger Hook installiert ist, enthält diese Variable denselben Wert wie A_TimeIdle. Wenn nur ein Hook installiert ist, wird A_TimeIdlePhysical nur von dieser Art von physischer Eingabe beeinflusst (die Eingabe des anderen/nicht-installierten Hooks, hat sowohl physisch als auch künstlich keine Auswirkung).</td>
  </tr>
  <tr id="TimeIdleKeyboard">
    <td>A_TimeIdleKeyboard<br><span class="ver">[v1.1.28+]</span></td>
    <td>Wenn der <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Tastatureingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
  <tr id="TimeIdleMouse">
    <td>A_TimeIdleMouse<br><span class="ver">[v1.1.28+]</span></td>
    <td>Wenn der <a href="commands/_InstallMouseHook.htm">Maus-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Mauseingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
</table>
<h3>GUI-Fenster und Menüleisten</h3>
<table class="info">
  <tr id="DefaultGui">
    <td>A_DefaultGui <span class="ver">[v1.1.23+]</span></td>
    <td>Name oder Nummer der <a href="commands/Gui.htm#Default">Standard-GUI</a> im aktuellen Thread.</td>
  </tr>
  <tr id="DefaultListView">
    <td>A_DefaultListView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="commands/Gui.htm#Events">Variablenname</a> oder <a href="commands/Gui.htm#HwndOutputVar">HWND</a> des <a href="commands/ListView.htm">ListView-Steuerelements</a>, auf dem sich die <a href="commands/ListView.htm#BuiltIn">ListView-Funktionen</a> gerade beziehen. Wenn die Standard-GUI keine ListView hat, ist diese Variable leer.</td>
  </tr>
  <tr id="DefaultTreeView">
    <td>A_DefaultTreeView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="commands/Gui.htm#Events">Variablenname</a> oder <a href="commands/Gui.htm#HwndOutputVar">HWND</a> des <a href="commands/TreeView.htm">TreeView-Steuerelements</a>, auf dem sich die <a href="commands/TreeView.htm#BuiltIn">TreeView-Funktionen</a> gerade beziehen. Wenn die Standard-GUI keine TreeView hat, ist diese Variable leer.</td>
  </tr>
  <tr id="Gui">
    <td>A_Gui</td>
    <td>Name oder Nummer der <a href="commands/Gui.htm">GUI</a>, die den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Diese Variable enthält nur einen Wert, wenn ein GUI-Steuerelement, Menüleistenelement oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat.</td>
  </tr>
  <tr id="GuiControl">
    <td>A_GuiControl</td>
    <td>Der zugeordnete Variablenname des GUI-Steuerelements, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Wenn dieses Steuerelement keine <a href="commands/Gui.htm#Events">zugeordnete Variable</a> hat, enthält A_GuiControl stattdessen die ersten 63 Zeichen seines Textes/seiner Beschriftung (besonders nützlich, um auf eine Schaltfläche zu verweisen). A_GuiControl ist leer, wenn: 1) A_Gui leer ist; 2) ein GUI-Menüleistenpunkt oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat; 3) das Steuerelement keine zugeordnete Variable und Beschriftung hat; oder 4) das Steuerelement, das den aktuellen Thread ursprünglich gestartet hat, nicht mehr existiert (z. B. aufgrund von <a href="commands/Gui.htm#Destroy">Gui Destroy</a>).</td>
  </tr>
  <tr id="GuiWidth">
    <td>A_GuiWidth<br>
    
    A_GuiHeight</td>
    <td>Diese Variablen enthalten die Breite und Höhe des GUI-Fensters, sofern sie innerhalb einer <a href="commands/Gui.htm#GuiSize">GuiSize-Subroutine</a> abgerufen werden. Sie beziehen sich auf den Clientbereich des GUI-Fensters, also der Bereich ohne Titelleiste, Menüleiste und Rahmen. <span class="ver">[v1.1.11+]:</span> Diese Werte werden von der <a href="commands/Gui.htm#DPIScale">DPI-Skalierung</a> beeinflusst.</td>
  </tr>
  <tr>
    <td><span id="GuiX"></span><span id="GuiY"></span>A_GuiX<br>
    
    A_GuiY</td>
    <td>Diese Variablen enthalten die X- und Y-Koordinaten, wenn sie in Verbindung mit <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>- und <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>-Ereignissen verwendet werden. Die Koordinaten sind relativ zur linken oberen Ecke des Fensters. <span class="ver">[v1.1.11+]:</span> Diese Werte werden von der <a href="commands/Gui.htm#DPIScale">DPI-Skalierung</a> beeinflusst.</td>
  </tr>
  <tr>
    <td><span id="GuiEvent"></span><span id="GuiControlEvent"></span>A_GuiEvent<br><span class="small80">oder A_GuiControlEvent</span></td>
    <td><p>Die Art des Ereignisses, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Wenn der Thread nicht durch eine <a href="commands/Gui.htm">GUI-Aktion</a> gestartet wurde, ist diese Variable leer. Ansonsten enthält sie eine der folgenden Zeichenketten:</p>
      <p><strong>Normal</strong>: Das Ereignis wurde durch einen Linksklick oder durch Tastatureingaben ausgelöst (Pfeiltasten, Tabulatortaste, Leertaste, unterstrichene Tastenkürzel und so weiter). Dieser Wert wird auch für Menüleistenelemente und Sonderereignisse wie GuiClose und GuiEscape verwendet.</p>
      <p><strong>DoubleClick</strong>: Das Ereignis wurde durch einen Doppelklick ausgelöst. Hinweis: Der erste Klick des Doppelklicks bewirkt, dass zuerst ein <em>Normal</em>-Ereignis ausgelöst wird. Mit anderen Worten wird die Subroutine zweimal gestartet: zuerst durch den ersten Klick und dann durch den zweiten Klick.</p>
      <p><strong>RightClick</strong>: Tritt nur bei <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/ListView.htm">ListViews</a> und <a href="commands/TreeView.htm">TreeViews</a> auf.</p>
      <p><strong>Kontextabhängige Werte:</strong> Um mehr zu erfahren, siehe <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#Slider">Slider</a>, <a href="commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="commands/ListView.htm">ListView</a> und <a href="commands/TreeView.htm">TreeView</a>.</p>
    </td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li>Das <a href="commands/OnClipboardChange.htm">OnClipboardChange-Label</a></li>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="commands/OnMessage.htm">OnMessage()</a></li>
        <li><a href="commands/RegisterCallback.htm">RegisterCallback()</a></li>
        <li><a href="misc/RegExCallout.htm">Callouts in Regulären Ausdrücken</a></li>
        <li><a href="commands/Gui.htm#label">GUI-Ereignisse</a>, also <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#ListBox">ListBox</a>, <a href="commands/ListView.htm">ListView</a>, <a href="commands/TreeView.htm">TreeView</a> und <a href="commands/GuiControls.htm#StatusBar">StatusBar</a>. Wenn ein Ereignis keine zusätzlichen Informationen hat, enthält A_EventInfo eine 0.</li>
      </ul></td>
  </tr>
</table>
<p class="note"><strong>Hinweis</strong>: Jeder <a href="misc/Threads.htm">Thread</a> verwaltet seine eigenen Werte für A_Gui, A_GuiControl, A_GuiX/Y, A_GuiEvent und A_EventInfo (im Gegensatz zu Variablen wie A_ThisHotkey). Das heißt beispielsweise, dass auch dann noch die ursprünglichen/richtigen Werte in diesen Variablen enthalten sind, wenn ein Thread zwischendurch von einem anderen Thread unterbrochen werden musste.</p>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte</h3>
<table class="info">
  <tr id="ThisMenuItem">
    <td>A_ThisMenuItem</td>
    <td>Der Name des zuletzt ausgewählten <a href="commands/Menu.htm">benutzerdefinierten Menüpunkts</a> (ansonsten leer).</td>
  </tr>
  <tr id="ThisMenu">
    <td>A_ThisMenu</td>
    <td>Der Name des Menüs, in dem A_ThisMenuItem ausgewählt wurde.</td>
  </tr>
  <tr id="ThisMenuItemPos">
    <td>A_ThisMenuItemPos</td>
    <td>Eine Nummer, die die <u>aktuelle</u> Position von A_ThisMenuItem innerhalb von A_ThisMenu repräsentiert. Der erste Menüpunkt ist 1, der Zweite ist 2 und so weiter. Menütrennlinien zählen mit. Wenn A_ThisMenuItem leer ist oder nicht mehr in A_ThisMenu existiert, wird diese Variable leer gemacht. Sie ist auch leer, wenn A_ThisMenu selbst nicht mehr existiert.</td>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der zuletzt ausgeführte <a href="Hotkeys.htm">Hotkey</a> oder <a href="Hotstrings.htm">nicht-automatisch-ersetzende Hotstring</a> (ansonsten leer), z. B. #z. Dieser Wert ändert sich, wenn der <a href="misc/Threads.htm">aktuelle Thread</a> von einem anderen Hotkey unterbrochen wird, deshalb ist es ratsam, diesen Wert sofort in eine andere Variable zu speichern, wenn der originale Wert später noch in einer Subroutine benötigt wird.</p>
      <p>Wenn ein Hotkey zum ersten Mal erstellt wird -- entweder mit dem <a href="commands/Hotkey.htm">Hotkey-Befehl</a> oder einem <a href="Hotkeys.htm">Doppelpunkt-Label</a> -- wird seine aktuelle Taste und die aktuelle Reihenfolge seiner Modifikatorzeichen verwendet, um einen permanenten Namen für diesen Hotkey zu bestimmen, der für alle <a href="commands/_IfWinActive.htm#variant">Varianten</a> des Hotkeys gelten wird.</p>
      <p>Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Das gleiche wie oben, aber für den vorherigen Hotkey. Wenn es diesen Hotkey nicht gibt, wird die Variable leer gemacht.</td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td><span class="ver">[v1.1.01+]:</span> Der Name der Taste, die vor dem Drücken oder Loslassen der letzten Taste gedrückt wurde, oder leer, wenn kein geeigneter Tastendruck im Tastenverlauf gefunden werden kann. Alle via Skript erzeugten Eingaben werden ignoriert. Damit diese Variable genutzt werden kann, muss der <a href="commands/_InstallKeybdHook.htm">Tastatur</a>- oder <a href="commands/_InstallMouseHook.htm">Maus-Hook</a> installiert und der <a href="commands/KeyHistory.htm">Tastenverlauf</a> aktiviert sein.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Ruft die Zeit in Millisekunden ab, die seit dem Drücken von A_ThisHotkey verstrichen ist. Dieser Wert wird -1 sein, wenn A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Ruft die Zeit in Millisekunden ab, die seit dem Drücken von A_PriorHotkey verstrichen ist. Dieser Wert wird -1 sein, wenn A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Das <a href="Hotstrings.htm#EndChars">Endungszeichen</a>, das der Benutzer zuletzt gedrückt hat, um einen <a href="Hotstrings.htm">nicht-automatisch-ersetzenden Hotstring</a> auszulösen. Wenn kein Endungszeichen notwendig war (wegen der *-Option), wird diese Variable leer gemacht.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen</h3>
<table class="info">
  <tr id="ComSpec">
    <td>ComSpec <span class="ver">[v1.0.43.08+]</span>
    A_ComSpec <span class="ver">[v1.1.28+]</span></td>
    <td>
      <p>Enthält, wie die ComSpec-Umgebungsvariable auch, den Pfadnamen des Befehlszeileninterpreters (z. B. C:\Windows\system32\cmd.exe). Diese Variable wird oft in Verbindung mit <a href="commands/Run.htm">Run/RunWait</a> genutzt.</p>
    </td>
  </tr>
  <tr id="Temp">
    <td>A_Temp<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfadname des Ordners, der zum Speichern von temporären Dateien auserkoren wurde (z. B. C:\DOCUME~1\&lt;Benutzername&gt;\LOCALS~1\Temp). Folgende Standorte werden der Reihenfolge nach durchsucht, um den Pfadnamen zu ermitteln: 1) <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) Windows-Verzeichnis.</td>
  </tr>
  <tr id="OSType">
    <td>A_OSType</td>
    <td>Der aktuelle Typ des Betriebssystems. Da AutoHotkey 1.1 nur NT-basierte Betriebssysteme unterstützt, wird diese Variable immer WIN32_NT enthalten. Ältere Versionen von AutoHotkey geben WIN32_WINDOWS zurück, wenn Windows 95/98/ME als Betriebssystem verwendet wird.</td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td><p>Enthält je nach Windows-Version eine der folgenden Zeichenketten: WIN_7 <span class="ver">[benötigt AHK_L 42+]</span>, WIN_8 <span class="ver">[benötigt v1.1.08+]</span>, WIN_8.1 <span class="ver">[benötigt v1.1.15+]</span>, WIN_VISTA, WIN_2003, WIN_XP, WIN_2000.</p>
    <p>Beachten Sie, dass das Betriebssystem eine andere Versionsnummer meldet bzw. dass A_OSVersion einen anderen Wert enthält, wenn der Kompatibilitätsmodus im Eigenschaftsfenster der AutoHotkey-Datei oder des kompilierten Skripts eingeschaltet ist.</p>
    <p><span class="ver">[v1.1.20+]:</span> Wenn die Version Ihres Betriebssystems nicht als eine der oben aufgelisteten Versionen erkannt wird, enthält die Variable eine Zeichenkette im Format "Haupt.Neben.Build". <code>10.0.14393</code> wäre beispielsweise Windows 10 Build 14393, auch bekannt als Version 1607.</p>
      <pre><em>; Das folgende Beispiel ist obsolet, da diese Betriebssysteme nicht mehr unterstützt werden.</em>
if A_OSVersion in WIN_NT4,WIN_95,WIN_98,WIN_ME  <em>; Hinweis: Keine Leerzeichen neben den Kommas.</em>
{
    MsgBox Dieses Skript benötigt Windows 2000/XP oder höher.
    ExitApp
}</pre>
    </td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td><span class="ver">[v1.1.08+]:</span> Enthält eine 1 (wahr), wenn das Betriebssystem eine 64-Bit-Version ist, oder 0 (falsch), wenn es eine 32-Bit-Version ist.</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td><span class="ver">[AHK_L 42+]:</span> Enthält die Größe eines Pointers in Bytes. Dieser Wert ist entweder eine 4 oder eine 8, abhängig davon, ob die verwendete AutoHotkey-Datei eine 32-Bit- oder 64-Bit-Datei ist.</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems als <a href="misc/Languages.htm">vierstelliger Code</a>.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der Netzwerkname des Computers.</td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der dieses Skript gestartet hat.</td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: C:\Windows</td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles<br>
    oder ProgramFiles</td>
    <td>
      <p>Der Programme-Ordner (z. B. <code>C:\Programme</code> oder <code>C:\Programme (x86)</code>). Die <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> <code>ProgramFiles</code> enthält in der Regel denselben Wert.</p>
      <p>Bei <a href="#Is64bitOS">64-Bit-Systemen</a> (nicht bei 32-Bit-Systemen) muss folgendes beachtet werden:</p>
      <ul>
        <li>Wenn die EXE-Datei, mit der das Skript ausgeführt wird, eine 32-Bit-Datei ist, enthält A_ProgramFiles den Pfadnamen des Ordners "Program Files (x86)".</li>
        <li>Bei 32-Bit-Prozessen kann die <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> <code>ProgramW6432</code> abgerufen werden, um den Pfadnamen des 64-Bit-Ordners "Program Files" zu erhalten. Ab Windows 7 kann diese Umgebungsvariable auch bei 64-Bit-Prozessen abgerufen werden.</li>
        <li>Die Umgebungsvariable <code>ProgramFiles(x86)</code> enthält den Pfadnamen des 32-Bit-Ordners "Program Files (x86)".</li>
      </ul>
      <p><span class="ver">[v1.0.43.08+]</span>: Das Präfix "A_" kann weggelassen werden, um den Übergang zu <a href="commands/_NoEnv.htm">#NoEnv</a> zu erleichtern.</p>
    </td>
  </tr>
  <tr id="AppData">
    <td>A_AppData<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad des Ordners mit anwendungsspezifischen Daten des aktuellen Benutzers. Zum Beispiel: C:\Dokumente und Einstellungen\Benutzername\Anwendungsdaten</td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad des Ordners mit anwendungsspezifischen Daten aller Benutzer.</td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>Der vollständige Pfad des Ordners mit den Desktop-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>Der vollständige Pfad des Ordners mit den Desktop-Dateien aller Benutzer.</td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>Der vollständige Pfad des Ordners mit den Startmenü-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>Der vollständige Pfad des Ordners mit den Startmenü-Dateien aller Benutzer.</td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>Der vollständige Pfad des Programmordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>Der vollständige Pfad des Programmordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>Der vollständige Pfad des Autostart-Ordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>Der vollständige Pfad des Autostart-Ordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>Der vollständige Pfad des Ordners "Eigene Dokumente" des aktuellen Benutzers. Wenn der Ordner das Stammverzeichnis eines Laufwerks ist, ist das letzte Zeichen in dieser Variable im Gegensatz zu anderen ähnlichen Variablen kein umgekehrter Schrägstrich. Zum Beispiel würde sie M: statt M:\ enthalten.</td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Wenn der aktuelle Benutzer Administratorrechte hat, enthält diese Variable eine 1. Ansonsten enthält sie eine 0.</p>
    <p id="RequireAdmin">Damit das Skript sich selbst neu starten kann, um Administratorrechte zu erhalten (oder um dem Benutzer mitzuteilen, dass das Skript Administratorrechte benötigt), benutzt man <a href="commands/Run.htm#RunAs">Run *RunAs</a>. Beachten Sie aber, dass ein mit Adminrechten gestartetes Skript dazu führt, dass alle Programme, die das Skript startet, auch Adminrechte haben werden. Eine mögliche Alternative finden Sie in <a href="FAQ.htm#uac">der FAQ</a>.</p>
    </td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    
    A_ScreenHeight</p></td>
    <td><p>Die Breite und Höhe des primären Anzeigegeräts in Pixel (z. B. 1024 und 768).</p>
      <p>Mit <a href="commands/SysGet.htm">SysGet</a> können die Abmessungen von anderen Anzeigegeräten abgerufen werden.</p>
      <p>Das folgende Beispiel zeigt, wie die Breite und Höhe des gesamten Desktops ermittelt werden kann (selbst wenn er sich über mehrere Anzeigegeräte erstrecken sollte):</p>
<pre>
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleBreite, 78
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleHöhe, 79
</pre>
    <p>Mit <a href="commands/SysGet.htm">SysGet</a> kann zudem der Arbeitsbereich eines Anzeigegeräts ermittelt werden. Dieser Bereich ist in der Regel kleiner als der Gesamtbereich des Anzeigegeräts, weil die Taskleiste und andere registrierte Desktopsymbolleisten nicht berücksichtigt werden.</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI <span class="ver">[v1.1.11+]</span></td>
    <td>Die Anzahl der Pixel pro logischem Zoll entlang der Bildschirmbreite. Bei einem System mit mehreren Anzeigegeräten ist dieser Wert bei jedem Anzeigegerät gleich. Bei den meisten Systemen ist dieser Wert eine 96; abhängig von der Textgrößeneinstellung (DPI) des Systems. Siehe auch <a href="commands/Gui.htm#DPIScale">Gui -DPIScale</a>.</td>
  </tr>
  <tr id="IPAddress">
    <td>A_IPAddress1 bis 4</td>
    <td>Die IP-Adressen der ersten 4 Netzwerkadaptern im Computer.</td>
  </tr>
</table>
<h3>Sonstiges</h3>
<table class="info">
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des aktuell angezeigten Mauszeigers. Die Variable kann eines der folgenden Wörter enthalten: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Großbuchstaben nach Size sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+Südwesten). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p></td>
  </tr>
  <tr id="Caret">
    <td>A_CaretX<br>
    
    A_CaretY</td>
    <td><p>Die aktuellen X- und Y-Koordinaten des Textcursors (Texteinfügemarke). Standardmäßig sind die Koordinaten relativ zum aktiven Fenster. Mit <a href="commands/CoordMode.htm">CoordMode</a> können die Koordinaten relativ zum gesamten Bildschirm gemacht werden. Wenn kein Fenster aktiv ist oder die Position des Textcursors nicht ermittelt werden kann, werden diese Variablen leer gemacht.</p>
      <p>Das folgende Skript zeigt die aktuellen Positionsdaten eines Textcursors mithilfe eines selbst-aktualisierenden ToolTips an. Beachten Sie, dass einige Fenster (z. B. bestimmte Versionen von MS Word) immer die gleichen Positionsdaten melden, wenn Sie den Textcursor verschieben.</p>
<pre>
#Persistent
SetTimer, TextcursorAbfragen, 100
return

TextcursorAbfragen:
ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20
return
</pre>
    </td>
  </tr>
  <tr>
    <td>Clipboard</td>
    <td>Enthält den Inhalt der system-internen Zwischenablage. Mit dieser Variable kann die Zwischenablage sowohl gelesen als auch geändert werden. Siehe <a href="misc/Clipboard.htm">Clipboard</a> für mehr Details.</td>
  </tr>
  <tr>
    <td>ClipboardAll</td>
    <td>Der gesamte Inhalt der Zwischenablage (z. B. Formatierung und Text). Siehe <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr>
    <td>ErrorLevel</td>
    <td>Siehe <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td>Das Ergebnis der GetLastError()-Systemfunktion oder des letzten COM-Objektaufrufs. Weitere Informationen finden Sie unter <a href="commands/DllCall.htm#LastError">DllCall()</a> und <a href="commands/Run.htm#LastError">Run/RunWait</a>.</td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr id="Index">
    <td>A_Index</td>
    <td>Enthält die Nummer des aktuellen Schleifendurchlaufs (ein 64-Bit-Integer). Wenn das Skript beispielsweise den Schleifenkörper zum ersten Mal ausführt, enthält diese Variable eine 1. Weitere Informationen finden Sie unter <a href="commands/Loop.htm">Loop</a> oder <a href="commands/While.htm">While-Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopFile.htm">Dateimuster-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopReg.htm">Registry-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopReadFile.htm">Datei-lesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">Parsende Schleife</a>.</td>
  </tr>
</table>

<h2 id="cap">Kapazität und Speicher einer Variable</h2>
<ul>
  <li>Jede Variable kann bis zu 64 MB Text enthalten (dieses Limit kann mit <a href="commands/_MaxMem.htm">#MaxMem</a> erhöht werden).</li>
  <li>Wenn eine Zeichenkette in eine Variable gespeichert wird, die ihre Länge überschreitet, wird ihr zugewiesener Systemspeicher automatisch erweitert.</li>
  <li>Um den Speicher einer großen Variable freizugeben, weist man ihr nichts zu (z. B. <code>Var := ""</code>).</li>
  <li>Es können beliebig viele Variablen erstellt werden. Das Programm unterstützt mehrere Millionen Variablen, ohne dass es signifikant an Performance einbüßt.</li>
  <li>Befehle, Funktionen und Ausdrücke, die numerische Eingaben akzeptieren, unterstützen in der Regel 15-stellige Gleitkommawerte. Integer können vorzeichenbehaftete 64-Bit-Werte sein, die einen Bereich von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) abdecken. Integer-Konstanten außerhalb dieses Bereichs werden nicht unterstützt und können zu inkonsistenten Ergebnissen führen. Arithmetische Operationen mit Integern werden bei Überlauf umgekehrt (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
