<!DOCTYPE HTML>
<html>
<head>
<title>AutoHotkey Skripte und Makros</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Skripte</h1>
<p>Verwandte Themen:</p>
<ul>
  <li><a href="Program.htm">Verwendung des Programms</a>: Wie man AutoHotkey grundsätzlich nutzt.</li>
  <li><a href="Concepts.htm">Konzepte und Konventionen</a>: Allgemeine Erklärung zu verschiedenen Konzepten, auf die AutoHotkey basiert.</li>
  <li><a href="Language.htm">Skriptsprache</a>: Spezifische Details zur Syntax (wie man Skripte schreibt).</li>
</ul>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung</a></li>
  <li><a href="#auto">Der obere Bereich des Skripts (automatischer Ausführungsbereich)</a>: Dieser Bereich wird beim Starten des Skripts automatisch ausgeführt.</li>
  <li><a href="#continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</a>: Verbessert die Lesbarkeit und Wartbarkeit eines Skripts.</li>
  <li><a href="#ahk2exe">Ein Skript in eine EXE-Datei umwandeln (ahk2exe)</a>: Ein .ahk-Skript in eine .exe-Datei umwandeln, die auf jedem PC ausgeführt werden kann.</li>
  <li><a href="#cmd">Befehlszeilenparameter an einem Skript übergeben</a>: Die Variablen %1%, %2% usw. enthalten die eingehenden Parameter.</li>
  <li><a href="#cp">Zeichensatz einer Skript-Datei</a>: ASCII-fremde Zeichen sicher in Skripten verwenden.</li>
  <li><a href="#debug">Ein Skript debuggen</a>: Wie die Fehler eines Skripts, das sich falsch verhält, gefunden werden können.</li>
</ul>
<h2 id="intro">Einführung</h2>
<p>Jedes Skript ist eine reine Textdatei mit mehreren Zeilen, die das Programm (AutoHotkey.exe) ausführen soll. Solche Skripte können <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten oder sogar nur aus diesen bestehen. Falls keine Hotkeys und Hotstrings vorhanden sind, wird ein Skript, sobald es gestartet wird, seine Befehle von oben nach unten und der Reihe nach ausführen.</p>
<p>Das Programm lädt das Skript zeilenweise in den Speicher. Jede Zeile kann bis zu 16.383 Zeichen lang sein. Während des Ladevorgangs wird das Skript <a href="misc/Performance.htm">optimiert</a> und überprüft, ob es gültig ist. Wenn das Programm auf ein Syntaxfehler stößt, wird er angezeigt. Solche Fehler müssen korrigiert werden, bevor das Skript ausgeführt werden kann.</p>
<h2 id="auto">Der obere Bereich des Skripts (automatischer Ausführungsbereich)</h2>
<p>Das Skript startet, sofern es erfolgreich geladen wurde, bei der ersten Zeile und endet, wenn es entweder ein <a href="commands/Return.htm">Return</a>, <a href="commands/Exit.htm">Exit</a>, <a href="Hotkeys.htm">Hotkey-/Hotstring-Label</a> oder das physische Ende des Skripts erreicht hat (je nachdem was zuerst kommt). Dieser obere Bereich des Skripts wird auch als <em>automatischer Ausführungsbereich</em> bezeichnet.</p>
<p class="warning"><strong>Hinweis:</strong> Während das <em>erste</em> Hotkey/Hotstring-Label im Skript die gleiche Wirkung wie <a href="commands/Return.htm">Return</a> hat, haben andere Hotkeys und Label dies nicht.</p>
<p>Ein Skript, das weder <a href="commands/_Persistent.htm">persistent</a> noch <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/OnMessage.htm">OnMessage</a> und <a href="commands/Gui.htm">GUI</a> enthält, wird beendet, sobald es den automatischen Ausführungsbereich durchgeführt hat. Ansonsten läuft das Skript im Leerlauf weiter, wo es nur noch auf Ereignisse wie Hotkeys, Hotstrings, <a href="commands/Gui.htm#label">GUI-Ereignisse</a>, <a href="commands/Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="commands/SetTimer.htm">Timer</a> reagieren kann.</p>
<p>Jeder neue <a href="misc/Threads.htm">Thread</a>, den ein <a href="Hotkeys.htm">Hotkey</a>, <a href="Hotstrings.htm">Hotstring</a>, <a href="commands/Menu.htm">Menüpunkt</a>, <a href="commands/Gui.htm#label">GUI-Ereignis</a> oder <a href="commands/SetTimer.htm">Timer</a> gestartet hat, greift auf die im automatischen Ausführungsbereich definierten Standardwerte der folgenden Attribute zurück. Ungesetzte Attribute benutzen ihre eigenen Standardwerte (welche das jeweils sind, finden Sie in den entsprechenden Dokumentationen): <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>, <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SetBatchLines.htm">SetBatchLines</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>, <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>, <a href="commands/SetWinDelay.htm">SetWinDelay</a>, <a href="commands/SetControlDelay.htm">SetControlDelay</a>, <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="commands/CoordMode.htm">CoordMode</a>, <a href="commands/SetStoreCapslockMode.htm">SetStoreCapsLockMode</a>, <a href="commands/AutoTrim.htm">AutoTrim</a>, <a href="commands/SetFormat.htm">SetFormat</a>, <a href="commands/StringCaseSense.htm">StringCaseSense</a>, <a href="commands/Thread.htm">Thread</a>, und <a href="commands/Critical.htm">Critical</a>.</p>
<p>Falls der automatische Ausführungsbereich zu lange dauert (oder nie das Ende erreicht), werden die Standardwerte der oben genannten Einstellungen automatisch nach 100 Millisekunden wirksam. Wenn der automatische Ausführungsbereich schließlich das Ende erreicht hat (wenn überhaupt), werden die Standardwerte mit den benutzerdefinierten Standardwerten aus dem automatischen Ausführungsbereich überschrieben. In der Regel ist es am besten, die Standardwerte von <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/SetTimer.htm">Timern</a> oder <a href="commands/Menu.htm">benutzerdefinierten Menüpunkten</a> im oberen Bereich des Skripts zu ändern. Beachten Sie außerdem, dass jedem <a href="misc/Threads.htm">Thread</a> eine eigene Sammlung von den oben genannten Einstellungen zugewiesen ist. Das heißt, dass Einstellungen, die in einem <a href="misc/Threads.htm">Thread</a> geändert werden, die Einstellungen von anderen Threads nicht beeinflussen können.</p>

<h2 id="continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</h2>
<p>Lange Zeilen können in mehreren kurzen Zeilen aufgeteilt werden, um sie besser lesbar und verwaltbar zu machen. Die Ausführungsgeschwindigkeit des Skripts wird dabei nicht reduziert, weil solche Zeilen bereits beim Starten des Skripts im Speicher zusammengeführt werden.</p>
<p id="continuation-line"><strong>Methode #1</strong>: Eine Zeile, die mit "and", "or", ||, &amp;&amp;, einem Komma oder einem <a href="Variables.htm#concat">Punkt</a> beginnt, wird automatisch mit der oberen Zeile zusammengeführt (in v1.0.46+ gilt das auch für alle anderen <a href="Variables.htm#Operators">Ausdrucksoperatoren</a>, außer ++ und --). Im folgenden Beispiel wird die zweite Zeile an die erste Zeile angefügt, weil sie mit einem Komma beginnt:</p>
<pre>FileAppend, Das ist der Text, der angefügt wird.`n   <em>; Kommentar hier möglich.</em>
    <strong>,</strong> %A_ProgramFiles%\BeliebigeAnwendung\Log-Datei.txt  <em>; Kommentar.</em></pre>
<p>Die Zeilen im nächsten Beispiel werden zu einer einzelnen Zeile zusammengeführt, weil die letzten beiden Zeilen mit "and" oder "or" beginnen:</p>
<pre>if (Farbe = "Rot" or Farbe = "Grün" or Farbe = "Blau"   <em>; Kommentar.</em>
    <strong>or</strong> Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß")   <em>; Kommentar.</em>
    <strong>and</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em></pre>
<p>Der <a href="Variables.htm#ternary">ternäre Operator</a> ist auch ein guter Kandidat:</p>
<pre>ProduktIstVerfügbar := (Farbe = "Rot")
    <strong>?</strong> false  <em>; Rote Produkte sind nicht verfügbar, daher ist der folgende Funktionsaufruf irrelevant.</em>
    <strong>:</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Obwohl die Einrückungen in den oberen Beispielen optional sind, machen sie eventuell deutlich, welche Zeilen zusammengehören. Außerdem müssen keine Leerzeichen bei Zeilen eingefügt werden, die mit den Wörtern "AND" und "OR" beginnen; das Programm macht das automatisch. In den Beispielen oben können leere Zeilen oder <a href="Language.htm#comments">Kommentare</a> zwischen oder am Ende jeder Zeile eingefügt werden.</p>
<p id="continuation-section"><strong>Methode #2</strong>: Diese Methode sollte verwendet werden, wenn sehr viele Zeilen zusammengeführt werden müssen oder wenn die Zeilen nicht für Methode #1 geeignet sind. Diese Methode kann sowohl bei <a href="Hotstrings.htm">automatisch-ersetzenden Hotstrings</a> als auch bei Befehlen oder <a href="Variables.htm#Expressions">Ausdrücken</a> angewendet werden. Zum Beispiel:</p>
<pre><em>; BEISPIEL #1:</em>
Var =
(
Zeile 1 vom Text.
Zeile 2 vom Text. Standardmäßig befindet sich ein Zeilenumbruchszeichen (`n) zwischen den Zeilen.
)

<em>; BEISPIEL #2:</em>
FileAppend<strong>,</strong>  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
Eine Textzeile.
<i>Standardmäßig</i> wird das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile als LF-Zeichen (`n) in die Datei geschrieben.
    <i>Standardmäßig</i> wird der Tabulator auf der linken Seite dieser Zeile auch in die Datei geschrieben (das gleiche gilt auch für Leerzeichen).
<i>Standardmäßig</i> werden Variablenverweise wie %Var% in den Variableninhalt aufgelöst.
), C:\Meine Datei.txt</pre>
<p>In den oberen Beispielen sieht man oben und unten runde Klammern, die mehrere Zeilen eingrenzen. Auch <em>Fortsetzungsbereich</em> genannt. Beachten Sie, dass in der untersten Zeile nach der runden Endklammer der letzte Parameter von <a href="commands/FileAppend.htm">FileAppend</a> enthalten ist. Diese Anwendungsart ist optional; das wird in solchen Fällen getan, um das Komma nicht als direkt geschriebenes Komma, sondern als Parametertrennung zu behandeln.</p>
<p>Das Standardverhalten eines Fortsetzungsbereichs kann überschrieben werden, indem man eine oder mehrere der folgenden Optionen auf der rechten Seite der runden Startklammer einfügt. Mehrere Optionen müssen mit Leerzeichen voneinander getrennt werden. Zum Beispiel: <code>( LTrim Join| %</code>.</p>
<p id="Join"><strong>Join</strong>: Gibt an, wie die Zeilen verbunden werden sollen. Wenn diese Option fehlt, erfolgt nach jeder Zeile, außer der letzten, ein Zeilenumbruchszeichen (`n). Wenn nur das Wort <em>Join</em> angegeben ist, werden die Zeilen ohne Zeichen miteinander verbunden. Ansonsten können unmittelbar nach dem Wort <em>Join</em> bis zu 15 Zeichen erfolgen. Zum Beispiel würde <code>Join`s</code> bewirken, dass nach jeder Zeile, außer der letzten, ein Leerzeichen erfolgt ("`s" kennzeichnet ein direkt geschriebenes Leerzeichen - eine spezielle Escapesequenz, die nur von <em>Join</em> erkannt wird). <code>Join`r`n</code> würde hingegen CR+LF zwischen den Zeilen einfügen, während <code>Join|</code> einen senkrechten Strich zwischen den Zeilen einfügen würde. Damit die letzte Zeile auch mit einem Trennungszeichen endet, ist es erforderlich, direkt über der runden Endklammer des Bereichs eine leere Zeile einzufügen.</p>
<p>Bekannte Einschränkung: Eine Join-Zeichenkette, die mit einem Doppelpunkt endet, darf nicht als letzte Option auf dieser Zeile angegeben werden. Dies würde dazu führen, dass <code>(Join:</code> beispielsweise als Label "(Join" behandelt oder dass <code>(LTrim Join:</code> nicht unterstützt wird, während <code>(Join: C</code> vollkommen in Ordnung wäre.</p>
<p id="LTrim"><strong>LTrim</strong>: Entfernt Leer- und Tabulatorzeichen am Anfang jeder Zeile. Diese Option erlaubt es, den Fortsetzungsbereich eingerückt zu lassen. Geben Sie <code>#LTrim</code> ohne Parameter an, um diese Option für mehrere Fortsetzungsbereiche einzuschalten. <code>#LTrim</code> ist von der Position abhängig; diese Direktive beeinflusst nur Fortsetzungsbereiche, die sich physisch darunter befinden. Die Einstellung kann via <code>#LTrim Off</code> wieder ausgeschaltet werden.</p>
<p><strong>RTrim0</strong> (RTrim gefolgt von einer 0): Verhindert, dass Leer- und Tabulatorzeichen am Ende jeder Zeile automatisch entfernt werden.</p>
<p id="CommentOption"><strong>Comments</strong> (oder <strong>Comment</strong> oder <strong>Com</strong> oder <strong>C</strong>) <span class="ver">[v1.0.45.03+]</span>: Ermöglicht <a href="Language.htm#comments">Semikolon-Kommentare</a> innerhalb des Fortsetzungsbereichs (aber nicht <code>/*..*/</code>). Solche Kommentare (sowie alle links vorkommenden Leer- und Tabulatorzeichen) werden im Endergebnis entfernt, anstatt als direkt geschriebener Text behandelt zu werden. Jeder Kommentar kann auf der rechten Seite einer Zeile oder auf einer neuen Zeile vorkommen.</p>
<p><strong>%</strong> (Prozentzeichen): Behandelt Prozentzeichen nicht als Variablenverweise, sondern als direkt geschriebene Zeichen. Dadurch wird verhindert, dass jedes einzelne Prozentzeichen mit einem <a href="commands/_EscapeChar.htm">Escapezeichen</a> versehen werden muss. Diese Option kann weggelassen werden, wenn der Fortsetzungsbereich an Stellen z. B. <a href="Hotstrings.htm">automatisch-ersetzende Hotstrings</a> verwendet wird, wo Prozentzeichen bereits als direkt geschriebener Text behandelt werden.</p>
<p><strong>,</strong> (Komma): Behandelt Kommas nicht als direkt geschriebener Text, sondern als Trennzeichen. Diese selten verwendete Option ist nur für die Kommas zwischen den Befehlsparametern notwendig, weil in <a href="Functions.htm">Funktionsaufrufen</a> der Typ des Kommas keine Rolle spielt. Zudem transformiert diese Option nur Kommas, die tatsächlich Parameter trennen. Das heißt, sobald der letzte Parameter des Befehls erreicht wird (oder wenn keine Parameter vorhanden sind), werden nachfolgende Kommas unabhängig von dieser Option als direkt geschriebener Text behandelt.</p>
<p id="accent"><strong>`</strong> (umgekehrtes Häkchen): Behandelt umgekehrte Häkchen nicht als <a href="commands/_EscapeChar.htm">Escapezeichen</a>, sondern als direkt geschriebene Zeichen. Dies hat auch den Effekt, dass Kommas und Prozentzeichen nicht direkt und individuell mit einem Escapezeichen versehen werden können, oder dass explizit angegebene Escapesequenzen wie `r und `t nicht umgewandelt werden.</p>
<p id="non-continuation"><strong>)</strong> <span class="ver">[v1.1.01+]</span>: Eine runde Endklammer in den Optionen des Fortsetzungsbereichs (außer als Parameter der <a href="#Join">Join</a>-Option) bewirkt, dass die Zeile nicht als Beginn eines Fortsetzungsbereichs, sondern als Ausdruck interpretiert wird. Auf diese Weise können Ausdrücke wie <code>(x.y)[z]()</code> funktionsfähig gemacht werden, ohne die runde Startklammer mit einem Escapezeichen versehen zu müssen.</p>
<p><u>Bemerkungen</u></p>
<p><a href="commands/_EscapeChar.htm">Escapesequenzen</a> wie `n (Zeilenumbruch) und `t (Tabulator) werden innerhalb des Fortsetzungsbereichs unterstützt, solange die <a href="#accent">Akzent-Option (`)</a> nicht vorhanden ist.</p>
<p>Wenn die <a href="#CommentOption">Comment-Option</a> fehlt, werden Semikolon- und /*..*/-Kommentare innerhalb eines Fortsetzungsbereichs als direkt geschriebener Text angesehen. Allerdings können Kommentare am untersten oder obersten Ende des Bereichs eingefügt werden. Zum Beispiel:</p>
<pre>FileAppend<strong>,</strong>   <em>; Kommentar.
; Kommentar.</em>
( LTrim Join    <em>; Kommentar.</em>
     ; Das ist <strong>kein</strong> Kommentar; es ist direkt geschrieben. Fügen Sie das Wort <i>Comments</i> in die Zeile darüber ein, um es zu einem Kommentar zu machen.
), C:\Datei.txt   <em>; Kommentar.</em></pre>
<p>Der oben genannte Punkt ist der Grund, warum Semikolons innerhalb eines Fortsetzungsbereichs nie mit einem <a href="commands/_EscapeChar.htm">Escapezeichen</a> versehen werden müssen.</p>
<p>Ein Fortsetzungsbereich kann keine Zeile erzeugen, deren Länge 16.383 Zeichen überschreitet (das Programm warnt Sie bei dem Versuch, sobald es gestartet wird). Diese Einschränkung kann zum Beispiel mit mehreren Verkettungen umgangen werden. Zum Beispiel:</p>
<pre>Var =
(
...
)
Var = %Var%`n  <em>; Füge mithilfe eines weiteren Fortsetzungsbereichs mehr Text hinzu.</em>
(
...
)
FileAppend, %Var%, C:\Meine Datei.txt</pre>
<p>Aufgrund der Tatsache, dass eine runde Endklammer das Ende eines Fortsetzungsbereichs kennzeichnet, muss eine direkt geschriebene runde Endklammer mit einem Escapezeichen (Akzent/umgekehrtes Häkchen) versehen werden: <code>`)</code>.</p>
<p>Unmittelbar nach einem Fortsetzungsbereich kann eine Zeile angegeben werden, die die runde Startklammer eines weiteren Fortsetzungsbereichs enthält. Auf diese Weise können unterschiedliche Optionen beim Konstruieren einer einzelnen Zeile angewendet werden.</p>
<p>Die stückweise Konstruktion eines Fortsetzungsbereichs via <a href="commands/_Include.htm">#Include</a> wird nicht unterstützt.</p>

<h2 id="ahk2exe">Ein Skript in eine EXE-Datei umwandeln (ahk2exe)</h2>
<p>Ein Skript-Compiler ist im Lieferumfang des Programms enthalten (zur Verfügung gestellt von fincs).</p>
<p>Ein kompiliertes Skript ist eine eigenständige ausführbare Datei; das heißt, dass das Skript ohne AutoHotkey.exe gestartet werden kann. Der Kompilierungsvorgang bestückt die ausführbare Datei mit folgenden Dingen: der AutoHotkey-Interpreter, das Skript, via <a href="commands/_Include.htm">#Include</a> definierte Dateien und via <a href="commands/FileInstall.htm">FileInstall</a> definierte Dateien.</p>
<p>Ahk2Exe kann auf folgenden Arten verwendet werden:</p>
<ol>
  <li><strong>GUI-Schnittstelle</strong>: Starten Sie die Verknüpfung "Convert .ahk to .exe" im Startmenü.</li>
  <li><strong>Rechtsklick</strong>: Klicken Sie mit der rechten Maustaste auf eine .ahk-Datei und wählen Sie "Compile Script" aus (nur verfügbar, wenn die Option "Script Compiler" in der Installation von AutoHotkey ausgewählt wurde). Nach einer kurzen Zeit wird im Verzeichnis des Skripts eine gleichnamige EXE-Datei erstellt. Hinweis: Das Erstellen der EXE-Datei erfolgt mit den Einstellungen (Symbol, .bin-Datei, <a href="#mpress">MPRESS</a>), die Sie zuletzt für Methode #1 benutzt hatten.</li>
  <li id="ahk2exeCmd"><strong>Befehlszeile</strong>: Der Compiler kann mit folgenden Parametern via Befehlszeile ausgeführt werden:
  <pre>Ahk2Exe.exe /in Skript.ahk [/out Skript.exe] [/icon Symbol.ico] [/bin AutoHotkeySC.bin] [/mpress 0oder1]</pre>
  Zum Beispiel:
<pre>Ahk2exe.exe /in "Skript.ahk" /icon "Symbol.ico"</pre>
Verwendung:
<ul>
<li>Parameter, die Leerzeichen enthalten, müssen in Anführungszeichen gesetzt werden.</li>
<li>Wenn der out-Parameter fehlt, wird die EXE-Datei mit dem Namen des Skripts erstellt.</li>
</ul></li>
</ol>
<p>Hinweise:</p>
<ul>
  <li>Die Performance des Skripts kann in der Regel nicht durch das Kompilieren verbessert werden.</li>
  <li>Der Passwortschutz und /NoDecompile wird seit v1.1.01 nicht mehr unterstützt.</li>
  <li>Die Befehle <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> und "<a href="commands/Menu.htm">Menu, Tray, ShowMainWindow</a>" beeinflussen das Verhalten von kompilierten Skripts.</li>
  <li>Um die Versionsinformation (siehe Eigenschaftsfenster des Explorers) Ihrer kompilierten Skripte zu ändern, muss die Datei "AutoHotkeySC.bin" mit Programmen wie Resource Hacker (Freeware) bearbeitet werden. Diese Datei ist im Unterordner "Compiler" enthalten, der im AutoHotkey-Verzeichnis zu finden ist. Mit <a href="http://www.autohotkey.com/forum/topic22975.html">Compile_AHK II</a> kann dieser Vorgang leichter durchgeführt werden. Seit v1.1.01 kann das kompilierte Skript anstelle von AutoHotkeySC.bin bearbeitet werden.</li>
  <li>Die obige Methode kann auch verwendet werden, um bestehende Symbole eines kompilierten Skripts zu ändern oder neue hinzuzufügen.</li>
  <li>Die interne Variable A_IsCompiled enthält eine 1, wenn das Skript in kompilierter Form ausgeführt wird. Ansonsten ist sie leer.</li>
  <li>Wenn Parameter an Ahk2Exe übergeben werden, wird eine Meldung über den Erfolg oder Misserfolg des Kompilierungsvorgangs in die Standardausgabe (stdout) geschrieben. Obwohl die Meldung nicht in der Eingabeaufforderung angezeigt wird, kann sie mit Mitteln wie z. B. durch Weiterleiten der Ausgabe an eine Datei "abgefangen" werden. <span class="ver">[v1.0.43+]</span></li>
  <li>Im Fall eines Fehlers kann Ahk2Exe eine Vielzahl von Exitcodes zurückgeben, die den Typ des Fehlers kennzeichnen. Solche Fehlercodes finden Sie auf <a href="https://github.com/fincs/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a>. <span class="ver">[v1.1.22.03+]</span></li>
</ul>
<p>Den Quellcode sowie neuere Versionen des Compilers finden Sie auf <a href="https://github.com/fincs/Ahk2Exe">GitHub</a>.</p>

<h3 id="mpress">Komprimieren von kompilierten Skripten</h3>
<p>Ahk2Exe kann optional MPRESS (ein Freeware-Programm von MATCODE Software) verwenden, um kompilierte Skripte zu komprimieren. MPRESS wird automatisch benutzt, wenn <strong>mpress.exe</strong> im AutoHotkey-Unterordner "Compiler" vorhanden ist. Diese Automatik kann mit <code>/mpress 0</code> oder GUI-Einstellung deaktiviert werden. </p>
<p>Offizielle Website (war im März 2016 offline): <a href="http://www.matcode.com/mpress.htm">http://www.matcode.com/mpress.htm</a></p>
<p>Mirror (Downloads und Information): <a href="https://autohotkey.com/mpress/">https://autohotkey.com/mpress/</a></p>
<p><strong>Hinweis:</strong> Eine auf diese Weise komprimierte EXE-Datei unterbindet eine einfache Einsicht in den Quellcode des Skripts mithilfe eines Texteditors wie z. B. Notepad oder PE-Resource-Editor. Allerdings kann es nicht verhindern, dass der Quellcode mit Tools extrahiert werden kann, die speziell dafür entwickelt worden sind.</p>

<h2 id="cmd">Befehlszeilenparameter an einem Skript übergeben</h2>
<p>Skripte unterstützen Befehlszeilenparameter. Das Format ist:</p>
<pre>AutoHotkey.exe [<i>Optionen</i>] [<i>Skript-Dateiname</i>] [<i>Skript-Parameter</i>]</pre>
<p>Bei kompilierten Skripten ist das Format:</p>
<pre>KompiliertesSkript.exe [<i>Optionen</i>] [<i>Skript-Parameter</i>]</pre>
<p><strong>Optionen:</strong> Folgende können angegeben werden:</p>
<table class="info">
  <tr><th>Option</th><th>Bedeutung</th><th>Kompiliert?</th></tr>
  <tr id="SlashF">
    <td>/f oder /force</td>
    <td>Skript bedingungslos starten und Warnmeldungen überspringen. Diese Option hat den gleichen Effekt wie <a href="commands/_SingleInstance.htm">#SingleInstance Off</a>.</td>
    <td>Ja</td>
  </tr>
  <tr id="SlashR">
    <td>/r oder /restart</td>
    <td>Gibt an, dass das Skript neu gestartet werden soll (das auch intern vom <a href="commands/Reload.htm">Reload</a>-Befehl verwendet wird).</td>
    <td>Ja</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut</td>
    <td>Sendet alle Syntaxfehler, die den Start eines Skripts verhindern, zur Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen. Siehe <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> für weitere Details. Diese Option kann mit /iLib kombiniert werden, um die Gültigkeit des Skripts zu überprüfen, ohne es auszuführen.</td>
    <td>Ja</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td><span class="ver">[AHK_L 11+]:</span> Stellt eine Verbindung zu einem Debugger-Client her. Weitere Informationen finden Sie unter <a href="#idebug">Interaktives Debuggen</a>.</td>
    <td>Nein</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td><span class="ver">[AHK_L 51+]:</span> Überschreibt den Standard-Zeichensatz, mit dem die Skript-Dateien gelesen werden. Weitere Informationen finden Sie unter <a href="#cp">Zeichensatz einer Skript-Datei</a>.</td>
    <td>Nein</td>
  </tr>
  <tr>
    <td>/iLib <em>"AusgabeDatei"</em></td>
    <td>
      <p><span class="ver">[v1.0.47+]:</span> AutoHotkey lädt das Skript, ohne es auszuführen. Für jedes Skript, das mithilfe des <a href="Functions.htm#lib">Library-Mechanismus</a> automatisch eingefügt wurde, werden zwei Zeilen in die <em>AusgabeDatei</em> geschrieben. Diese Zeilen werden im folgenden Format geschrieben - dabei ist <em>LibVerz</em> der vollständige Pfad des Library-Ordners und <em>LibDatei</em> der Dateiname der Library:</p>
<pre>#Include LibVerz\
#IncludeAgain LibVerz\LibDatei.ahk</pre>
      <p>Wenn die Ausgabedatei bereits existiert, wird sie überschrieben. <em>AusgabeDatei</em> kann <code>*</code> sein, um die Ausgabe in die Standardausgabe (stdout) zu schreiben.</p>
      <p>Enthält das Skript Syntaxfehler, wird die Ausgabedatei eventuell leer sein. Der Exitcode des Prozesses kann verwendet werden, um diesen Zustand zu erkennen; bei einem Syntaxfehler ist der Exitcode eine 2. Mit der /ErrorStdOut-Option kann die Fehlermeldung unterdrückt oder abgefangen werden.</p>
    </td>
    <td>Nein</td>
  </tr>
</table>

<p id="defaultfile"><strong>Skript-Dateiname</strong>: Dieser Parameter kann weggelassen werden, falls keine <em>Skript-Parameter</em> vorhanden sind. Fehlt dieser Parameter (z. B. wenn man AutoHotkey direkt über das Startmenü startet), wird das Programm in dieser Reihenfolge nach einer Skriptdatei namens <code><i>AutoHotkey</i>.ahk</code> an folgenden Standorten suchen:</p>
<ul>
  <li>Das Verzeichnis, das die <a href="Variables.htm#AhkPath">ausführbare AutoHotkey-Datei</a> enthält.</li>
  <li>Der Ordner "<a href="Variables.htm#MyDocuments">Dokumente</a>" des aktuellen Benutzers.</li>
</ul>
<p>Der Dateiname <code><i>AutoHotkey</i>.ahk</code> ist abhängig vom Namen der ausführbaren Datei, mit der das Skript gestartet wurde. Wenn Sie beispielsweise AutoHotkey.exe in MeinSkript.exe umbenennen, versucht das Programm <code>MeinSkript.ahk</code> zu finden. Starten Sie AutoHotkeyU32.exe ohne Parameter, sucht das Programm nach AutoHotkeyU32.ahk.</p>
<p>Hinweis: In den Versionen vor <a href="AHKL_ChangeLog.htm#L51">Revision 51</a> wurde AutoHotkey.ini im Arbeitsverzeichnis oder AutoHotkey.ahk in "Eigene Dokumente" gesucht.</p>
<p><span class="ver">[v1.1.17+]:</span> Geben Sie als Dateiname ein Sternchen (*) an, um den Skript-Text aus der Standardeingabe (stdin) zu lesen. Ein Beispiel dazu finden Sie unter <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p id="cmd_args"><strong>Skript-Parameter</strong>: Eine oder mehrere durch Leerzeichen getrennte Zeichenketten, die an das Skript übergeben werden sollen. Jeder Parameter, der Leerzeichen enthält, muss in Anführungszeichen gesetzt werden. Um ein direkt geschriebenes Anführungszeichen zu übergeben, muss ein umgekehrter Schrägstrich davor gesetzt werden (\"). Daraus folgt, dass jeder nachfolgende Schrägstrich innerhalb eines in Anführungszeichen gesetzten Parameters (z. B. "C:\Meine Dokumente<span class="red">\"</span>) als direkt geschriebenes Anführungszeichen behandelt wird (das heißt, dass das Skript die Zeichenkette C:\Meine Dokumente<span class="red">"</span> als Parameter erkennt). Mit <code><a href="commands/StringReplace.htm">StringReplace</a>, 1, 1, <span class="red">"</span>,, All</code> können solche Anführungszeichen entfernt werden.</p>
<p id="cmd_args"><span class="ver">[v1.1.27+]:</span> Eingehende Parameter, sofern vorhanden, werden als Array in die interne Variable <strong>A_Args</strong> gespeichert, und können mithilfe des <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntaxes</a> abgerufen werden. <code>A_Args[1]</code> enthält den ersten Parameter. Das folgende Beispiel zeigt, wie das Skript beendet werden kann, wenn zu wenig Parameter übergeben wurden:</p>
<pre>if A_Args.Length() &lt; 3
{
    MsgBox % "Das Skript benötigt mindestens 3 eingehende Parameter, aber es sind nur " A_Args.Length() " angekommen."
    ExitApp
}</pre>
<p>Wenn die Anzahl der Parameter variiert, die an das Skript übergeben werden sollen (z. B. wenn der Benutzer mit dem Mauszeiger mehrere Dateien auf ein Skript zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>for n, param in A_Args  <em>; Für jeden Parameter:</em>
{
    MsgBox Parameter Nr. %n% ist %param%.
}
</pre>
<p>Wenn die Parameter Dateinamen sind, kann das folgende Beispiel verwendet werden, um sie in lange Namen mit korrekter Groß-/Kleinschreibung (wie im Dateisystem gespeichert) und vollständigem/absolutem Pfad umzuwandeln:</p>
<pre>for n, ÜbergebenerPfad in A_Args  <em>; Für jeden Parameter (oder abgelegte Datei auf das Skript):</em>
{
    Loop Files, %ÜbergebenerPfad%, FD  <em>; Dateien und Verzeichnisse einbeziehen.</em>
        LangerPfad := A_LoopFileFullPath
    MsgBox Der lange Pfadname mit korrekter Groß-/Kleinschreibung der Datei`n%ÜbergebenerPfad%`nist:`n%LangerPfad%
}</pre>
<p><strong>Bekannte Einschränkung:</strong> Das Ziehen und Ablegen von Dateien auf eine .ahk-Datei kann fehlschlagen, wenn 8.3-Namen (Kurznamen) in einem NTFS-Dateisystem deaktiviert worden sind. Eine Möglichkeit zur Umgehung des Problems ist es, das Skript zu <a href="#ahk2exe">kompilieren</a> und die Dateien dann auf die resultierende EXE-Datei zu ziehen.</p>
<p id="cmd_args_old"><strong>Altmodisch:</strong> Die Befehlszeilenparameter sind auch in den <a href="Variables.htm">Variablen</a> %1%, %2% und so weiter enthalten, wie in den Versionen vor <span class="ver">[v1.1.27]</span>. Darüber hinaus enthält %0% die Anzahl der Parameter, die übergeben worden sind (0, wenn keine). Allerdings können diese Variablen nicht direkt in einem Ausdruck verwiesen werden, weil sie dort als Zahlen statt als Variablen interpretiert werden. Das folgende Beispiel zeigt, wie das Skript beendet werden kann, wenn zu wenig Parameter übergeben wurden:</p>
<pre>if 0 &lt; 3  <em>; Die linke Seite einer <a href="commands/IfEqual.htm">if-Anweisung ohne Ausdruck</a> ist immer der Name einer Variable.</em>
{
    MsgBox Das Skript benötigt mindestens 3 eingehende Parameter`, aber es sind nur %0% angekommen.
    ExitApp
}</pre>
<p>Wenn die Anzahl der Parameter variiert, die an das Skript übergeben werden sollen (z. B. wenn der Benutzer mit dem Mauszeiger mehrere Dateien auf ein Skript zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>Loop, %0%  <em>; Für jeden Parameter:</em>
{
    param := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    MsgBox, 4,, Parameternummer %A_Index% ist %param%.  Weiter?
    IfMsgBox, No
        break
}</pre>
<p>Wenn die Parameter Dateinamen sind, kann das folgende Beispiel verwendet werden, um sie in lange Namen mit korrekter Groß-/Kleinschreibung (wie im Dateisystem gespeichert) und vollständigem/absolutem Pfad umzuwandeln:</p>
<pre>Loop %0%  <em>; Für jeden Parameter (oder abgelegte Datei auf ein Skript):</em>
{
    Pfadangabe := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    Loop %Pfadangabe%, 1
        LangerPfad = %A_LoopFileLongPath%
    MsgBox Der lange Pfadname mit korrekter Groß-/Kleinschreibung der Datei `n%Pfadangabe%`n ist:`n%LangerPfad%
}</pre>

<h2 id="cp">Zeichensatz einer Skript-Datei <span class="ver">[AHK_L 51+]</span></h2>
<p>Die Zeichen, die eine Skript-Datei enthalten darf, sind vom Zeichensatz (Codepage) vorgegeben, mit der die Datei geladen wurde.</p>
<ul>
  <li>Beginnt die Datei mit einer UTF-8- oder UTF-16-Byte-Order-Markierung (BOM), wird der entsprechende Zeichensatz verwendet und die <a href="#CPn">/CP<i>n</i></a>-Option ignoriert.</li>
  <li>Wenn die <a href="#CPn">/CP<i>n</i></a>-Option via Befehlszeile übergeben wurde, wird der Zeichensatz <i>n</i> verwendet. Eine Liste von gültigen numerischen Zeichensatzidentifikatoren finden Sie unter <a href="https://msdn.microsoft.com/de-de/library/dd317756.aspx">MSDN</a>.</li>
  <li>In allen anderen Fällen wird der Standard-ANSI-Zeichensatz des Betriebssystems verwendet.</li>
</ul>
<p>Beachten Sie, dass die oben genannten Punkte nur für Skript-Dateien gelten, die AutoHotkey geladen hat, nicht für die Dateibearbeitung im Skript selbst. <a href="commands/FileEncoding.htm">FileEncoding</a> steuert die Standardcodierung von Dateien, die das Skript liest oder schreibt, während <a href="commands/IniRead.htm">IniRead</a> und <a href="commands/IniWrite.htm">IniWrite</a> immer auf Basis von UTF-16 oder ANSI arbeiten.</p>
<p>Da der gesamte Text (wo nötig) in das <a href="Compat.htm#Format">native Zeichenkettenformat</a> konvertiert wird, werden Zeichen, die im nativen Zeichensatz ungültig oder nicht vorhanden sind, durch einen Platzhalter ersetzt: ANSI '?' oder Unicode '�'. In Unicode-Builds passiert das nur, wenn in der Skript-Datei Codierungsfehler auftreten oder wenn der Zeichensatz, der zum Speichern oder Laden der Datei verwendet wird, nicht übereinstimmt.</p>
<p><a href="commands/RegWrite.htm">RegWrite</a> kann verwendet werden, um die Standardcodierung für Skripte festzulegen, die vom Explorer aus gestartet werden (z. B. per Doppelklick einer Datei):</p>
<pre><em>; Heben Sie die Kommentierung der entsprechenden Zeile auf oder lassen Sie sie alle kommentiert,
;   um den Standard des aktuellen Builds wiederherzustellen.  Je nach Bedarf anpassen:
; Zeichensatz = 0        ; Standard-ANSI-Zeichensatz des Systems
; Zeichensatz = 65001    ; UTF-8
; Zeichensatz = 1200     ; UTF-16
; Zeichensatz = 1252     ; ANSI-Latin-1; Westeuropäisch (Windows)</em>
if (Zeichensatz != "")
    Zeichensatz := " /CP" . Zeichensatz
Befehl="%A_AhkPath%"%Zeichensatz% "`%1" `%*
Key=AutoHotkeyScript\Shell\Open\Command
if A_IsAdmin    <em>; Für alle Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCR, %Key%,, %Befehl%
else            <em>; Nur für den aktuellen Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCU, Software\Classes\%Key%,, %Befehl%</pre>
<p>Das setzt natürlich voraus, dass AutoHotkey bereits installiert ist. Ansonsten wäre das Ergebnis alles andere als zufriedenstellend.</p>

<h2 id="debug">Ein Skript debuggen</h2>
<p>Befehle wie <a href="commands/ListVars.htm">ListVars</a> und <a href="commands/Pause.htm">Pause</a> können Ihnen dabei helfen, ein Skript zu debuggen (Fehler finden und beseitigen). Wenn Sie zum Beispiel die folgenden beiden Zeilen an sorgfältig ausgewählten Positionen einfügen, können im Skript sogenannte "Haltepunkte" erstellt werden:</p>
<pre>ListVars<br>Pause</pre>
<p>Sobald das Skript diese zwei Zeilen erreicht, zeigt es den aktuellen Inhalt aller Variablen an, die überprüft werden sollen. Wenn Sie bereit sind fortzufahren, kann die Pause via Datei- oder Tray-Menü aufgehoben werden. Das Skript wird dann bis zum nächsten "Haltepunkt" (falls vorhanden) fortgesetzt.</p>
<p>Generell empfiehlt es sich, diese "Haltepunkte" an Stellen einzufügen, wo das aktive Fenster für das Skript irrelevant ist, wie z. B. unmittelbar vor einem WinActivate-Befehl. Auf diese Weise kann das Skript wieder ordnungsgemäß fortgesetzt werden, sobald die Pause aufgehoben wird.</p>
<p>Die folgenden Befehle sind auch für das Debuggen geeignet: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> und <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>Häufig auftretende Fehler wie Tippfehler und fehlende "globale" Deklarationen können durch das <a href="commands/_Warn.htm">Einschalten von Warnungen</a> erkannt werden.</p>
<h3 id="idebug">Interaktives Debuggen <span class="ver">[AHK_L 11+]</span></h3>
<p>Interaktives Debuggen ist mit einem unterstützten <a href="AHKL_DBGPClients.htm">DBGp-Client</a> möglich. Üblicherweise sind folgende Aktionen möglich:</p>
<ul>
  <li>Haltepunkte auf Zeilen setzen oder entfernen - die Ausführung pausieren, wenn ein <a href="http://de.wikipedia.org/wiki/Haltepunkt_(Programmierung)">Haltepunkt</a> erreicht ist.</li>
  <li>Den Code zeilenweise durchgehen - Funktionen und Subroutinen betreten, überspringen oder verlassen.</li>
  <li>Alle oder eine bestimmte Variable überwachen.</li>
  <li>Den Stapel von laufenden Subroutinen und Funktionen anzeigen.</li>
</ul>
<p>Beachten Sie, dass diese Funktionalität für kompilierte Skripte deaktiviert ist.</p>
<p>Um interaktives Debuggen zu aktivieren, startet man zuerst einen unterstützten Debugger-Client und danach das Skript mit der <b>/Debug</b>-Befehlszeilenoption.</p>
<pre class="Syntax">AutoHotkey.exe /Debug<span class="optional">=<i>SERVER</i>:<i>PORT</i></span> ...</pre>
<p><i>SERVER</i> und <i>PORT</i> können weggelassen werden. Zum Beispiel sind die folgenden Zeilen funktionsgemäß identisch:</p>
<pre>AutoHotkey /Debug "MeinSkript.ahk"
AutoHotkey /Debug=localhost:9000 "MeinSkript.ahk"</pre>
<p id="debug_attach"><span class="ver">[AHK_L 59+]:</span> Um den Debugger nachträglich mit einem Skript zu verbinden, sendet man ihm wie folgt eine Meldung:</p>
<pre>Skriptpfad = <em>; SETZEN SIE HIER DEN VOLLSTÄNDIGEN PFAD DES SKRIPTS EIN</em>
DetectHiddenWindows On
IfWinExist %Skriptpfad% ahk_class AutoHotkey
    <em>; Optionale Parameter:
    ;   wParam  = IPv4-Adresse des Debugger-Clients als 32-Bit-Integer.
    ;   lParam  = Port, der vom Debugger-Client abgehört werden soll.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>Sobald eine Verbindung zum Debugger-Client aufgebaut ist, kann sie durch das Senden des DBGp-Befehls "detach" getrennt werden, ohne das Skript zu beenden.</p>

<h2>Skript-Beispiele</h2>
<p>Auf <a href="scripts/">dieser Seite</a> kann man einige nützliche Skripte finden.</p>
</body>
</html>
