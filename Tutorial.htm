<!DOCTYPE html>
<html lang="de">
	<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8"><!--Tutorial by tidbit, from http://ahkscript.github.io/AHK_Tutorial/
				Modified to fit with the AutoHotkey documentation.-->
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		
		<meta name="author" content="tidbit" />
		<meta name="description" content="Ein AutoHotkey-Tutorial, geschrieben von tidbit"/>
		<meta name="keywords" content="ahk, autohotkey, tutorial, anfänger guide"/>
		<title>AutoHotkey Anfänger-Tutorial</title>
		<link href="static/theme.css" rel="stylesheet" type="text/css" />
		<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
		<style type="text/css">
		.key
		{
			background-color: #f7f7f7;
			border: 1px solid #ccc;
			border-radius: 3px;
			box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px #fff inset;
			color: #333;
			display: inline-block;
			font-size: 90%;
			line-height: 1.4;
			margin: 0 0.1em;
			padding: 0.1em 0.5em;
			text-shadow: 0 1px 0 #fff;
			white-space: nowrap;
		}
		.indented {
			text-indent: 1.5em;
			margin-bottom: 1em;
		}
		</style>
	</head>
	<body>
		<div class="page">
			<h1>AutoHotkey Anfänger-Tutorial <span style="opacity:0.4">von tidbit</span></h1>
			<div id="toc" class="section">
				<h3>Inhaltsverzeichnis</h3>
				<ol>
					<li><a href="#s1" class="toci">Die Grundlagen</a>
						<ol>
							<li><a href="#s11" class="toci">AutoHotkey herunterladen</a></li>
							<li><a href="#s12" class="toci">Wie erstellt man ein Skript</a></li>
							<li><a href="#s13" class="toci">Befehle kann man nicht zusammenführen</a></li>
							<li><a href="#s14" class="toci">Sonstige grundlegende Informationen</a></li>
						</ol>
					</li>
					<li><a href="#s2" class="toci">Hotkeys &amp; Hotstrings</a>
						<ol>
							<li><a href="#s21" class="toci">Tasten und Symbole</a></li>
							<li><a href="#s22" class="toci">Fenster-spezifisch</a></li>
							<li><a href="#s23" class="toci">Mehrere Hotkeys pro Datei</a></li>
							<li><a href="#s24" class="toci">Beispiele</a></li>
						</ol>
					</li>
					<li><a href="#s3" class="toci">Senden von Tastatureingaben</a>
						<ol>
							<li><a href="#s31" class="toci">Spiele</a></li>
						</ol>
					</li>
					<li><a href="#s4" class="toci">Starten von Programmen &amp; Webseiten</a></li>
					<li><a href="#s5" class="toci">Befehle vs. Funktionen()</a>
						<ol>
							<li><a href="#s51" class="toci">Code-Blöcke</a></li>
						</ol>
					</li>
					<li><a href="#s6" class="toci">Variablen</a>
						<ol>
							<li><a href="#s61" class="toci">Wann und wo Prozentzeichen verwendet werden</a></li>
							<li><a href="#s62" class="toci">Abrufen von Benutzereingaben</a></li>
							<li><a href="#s63" class="toci">Weitere Beispiele</a></li>
						</ol>
					</li>
					<li><a href="#s7" class="toci">Objekte</a>
						<ol>
							<li><a href="#s71" class="toci">Erstellen von Objekten</a></li>
							<li><a href="#s72" class="toci">Verwenden von Objekten</a></li>
						</ol>
					</li>
					<li><a href="#s8" class="toci">Andere hilfreiche Goodies</a>
						<ol>
							<li><a href="#s81" class="toci">Die mysteriösen eckigen Klammern</a></li>
							<li><a href="#s82" class="toci">Herausfinden Ihrer AHK-Version</a></li>
							<li><a href="#s83" class="toci">Trial-and-Error-Prinzip</a></li>
							<li><a href="#s84" class="toci">Einrückung</a></li>
							<li><a href="#s85" class="toci">Um Hilfe bitten</a></li>
							<li><a href="#s86" class="toci">Andere Links</a></li>
						</ol>
					</li>
				</ol>
			</div>
			<div id="bodyContent">
				<div id="basics" class="section">
					<h2 id="s1">1 - Die Grundlagen</h2>
					<p class="note">
						Bevor wir mit unserer Reise beginnen, will ich Ihnen folgende Ratschläge geben. Über das ganze Tutorial hinweg werden Sie auf viel Text und Code treffen. Um AutoHotkey optimal zu lernen, ist es ratsam, den Text zu lesen und die Beispielcodes <b>auszuprobieren</b>. Erst danach sollten Sie versuchen, die Codes zu analysieren.
						<br />Die meisten Beispiele auf dieser Seite können Sie kopieren und in Ihrem Texteditor einfügen.
						<br />Wenn Sie einen Abschnitt nicht auf Anhieb verstehen, empfehle ich Ihnen, ihn nochmal durchzulesen.
					</p>

					<h3 id="s11">a. AutoHotkey herunterladen und installieren</h3>
					<p id="local_note" class="note" style="display: none">
						Da Sie diese Dokumentation auf lokaler Ebene anschauen, besteht die Wahrscheinlichkeit, dass Sie AutoHotkey bereits installiert haben, demzufolge können Sie alles bis Abschnitt b überspringen.
					</p>
					<script type="text/javascript">
					if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
						document.getElementById("local_note").removeAttribute("style");
					</script>
					<p>
						Bevor Sie überhaupt etwas mit AutoHotkey (AHK) machen können, müssen Sie das Programm herunterladen. Danach müssen Sie AHK eventuell installieren, je nachdem, welche Version Sie heruntergeladen haben. In diesem Guide verwenden wir den Installer, da er am einfachsten zu bedienen ist.
					</p>


					<h3>Anleitung:</h3>
					<ol>
						<li>Öffnen Sie die Hauptseite von AutoHotkey. <a href="https://autohotkey.com/">https://autohotkey.com/</a>
						</li>
						<li>Klicken Sie auf Download. <a href="https://autohotkey.com/download/ahk-install.exe">https://autohotkey.com/download/ahk-install.exe</a>
						</li>
						<li>
							Während der Installation von AutoHotkey werden Sie gefragt, ob UNICODE oder ANSI installiert werden soll. Ich würde Ihnen UNICODE empfehlen. Es unterstützt nicht-englische Buchstaben und Zahlen (Zeichen). Setzen Sie die Installation fort, bis Sie eine Schaltfläche sehen, mit der AutoHotkey schließlich installiert werden kann.
						</li>
						<li>Sobald das erledigt ist, großartig! Weiter zu Abschnitt b.</li>
					</ol>
					<p class="note">Video-Anleitung (englisch):<br />
						<a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">Install and Hello World</a> (englisch) von Frankie
					</p>

					<h3 id="s12">b. Wie erstellt man ein Skript</h3>
					<p>
						Die folgende Anleitung zeigt, wie man AutoHotkey dazu bringen kann, etwas zu tun. AutoHotkey ist keine Zauberei - wir alle wünschten, es wäre so, ist es aber nicht. Also müssen wir AutoHotkey sagen, was zu tun ist. Diesen Vorgang nennt man "Scripting".
					</p>

					<h3>Anleitung:</h3>
					<ul>
						<li>1. Machen Sie einen Rechtsklick auf Ihrem Desktop.</li>
						<li>2. Finden Sie "Neu" im Menü.</li>
						<li>3. Klicken Sie auf "AutoHotkey Script" innerhalb des "Neu"-Menüs.</li>
						<li>4. Geben Sie dem Skript einen neuen Namen. Hinweis: Der Name muss mit .ahk enden. Zum Beispiel: MeinSkript.ahk</li>
						<li>5. Finden Sie die neu erstellte Datei auf Ihrem Desktop und machen Sie einen Rechtsklick darauf.</li>
						<li>6. Klicken Sie auf "Edit Script".</li>
						<li>7. Ein Fenster, vermutlich der Texteditor, sollte sich geöffnet haben. Wenn ja, ERFOLG!
						<hr />
						<p>
							Nun, da Sie ein Skript erstellt haben, müssen wir noch etwas in die Datei einfügen. Eine Liste aller internen Befehle, Funktionen und Variablen finden Sie in <a href="#s5">Abschnitt 5</a>.<br />
						</p>
						<p>
							Hier ein sehr einfaches Skript mit einem Hotkey, das, sobald man den Hotkey drückt, Text mithilfe des <a href="commands/Send.htm">Send</a>-Befehls schreiben kann.
						</p>

<pre>
^j::
   Send, Mein erstes Skript
Return
</pre>
						<p>
							Später werden wir tiefer in die Materie einsteigen. Bis dahin erkläre ich Ihnen, was der obige Code macht.<br />

							- Die erste Zeile. <code>^j::</code> ist der Hotkey. <code>^</code> symbolisiert <span class="key">STRG</span>, <code>j</code> ist die Taste <span class="key">j</span>. Alles <b>links</b> neben <code>::</code> sind die Tasten, die Sie drücken müssen.<br />

							- Die zweite Zeile. <code>Send, Mein erstes Skript</code> ist der Vorgang zum SENDEN von Tastatureingaben. <code>SEND</code> ist der Befehl. Alles nach dem Komma (,) wird geschrieben.<br />

							- Die dritte Zeile. <code>Return</code>. Return wird Ihr bester Freund. Es STOPPT Ihr Code an dieser Stelle und ignoriert nachfolgende Zeilen. Dadurch können viele Probleme verhindert werden, besonders wenn Sie damit anfangen, eine Menge Dinge in Ihrem Skript einzufügen.
						</p>
						<hr />
						</li><li>8. Speichern Sie die Datei.</li>
						<li>9. Machen Sie einen Doppelklick auf die Datei bzw. auf das Symbol im Desktop, um das Skript zu starten. Öffnen Sie den Texteditor (oder wo auch immer Sie etwas schreiben können) und drücken Sie <span class="key">STRG</span> und <span class="key">J</span>.</li>
						<li>10. Hip Hip Hurra! Ihr erstes Skript ist fertig. Holen Sie sich ein paar Snacks als Belohnung und kommen Sie zurück, um den Rest dieses Tutorials zu lesen.</li>
					</ul>

					<p class="note">
						Video-Anleitung (englisch):<br />
						<a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">Install and Hello World</a> (englisch) von Frankie

					</p>
					<h3 id="s13">c. Befehle kann man nicht zusammenführen</h3>
					<p>
						Beim Erstellen Ihres Codes haben Sie vielleicht schon den Drang verspürt, mehrere Befehle auf eine Zeile oder sogar ineinander zu setzen - lassen Sie es. In <a href="#s5">Abschnitt 5</a> werden wir darüber sprechen, warum es nicht wie erwartet funktioniert und was Sie stattdessen tun können.
					</p>

					<h3 id="s14">d. Sonstige grundlegende Informationen</h3>
					<div>
						So finden Sie die englische Hilfedatei auf Ihrem Computer:<br />
						Es gibt dafür mehrere Wege. Ich setze voraus, dass Sie das standardmäßige Installationsverzeichnis verwendet haben.<br /><br />
						Methode 1:
						<ol>
							<li>Finden Sie das Startmenü oder Windows-Symbol auf Ihrem Bildschirm, üblicherweise unten links.</li>
							<li>Klicken Sie auf <b>Programme</b> oder <b>Alle Programme</b>.</li>
							<li>Finden Sie <b>AutoHotkey</b> in der Liste.</li>
							<li>Nun müssten Sie <b>AutoHotkey Help File</b> sehen. Klicken Sie darauf.</li>
							<li>Fertig!</li>
						</ol>
						Methode 2:
						<ol>
							<li>Schauen Sie auf Ihrem Desktop.</li>
							<li>Finden Sie <b>Arbeitsplatz</b> oder <b>Computer</b>. Öffnen Sie es.</li>
							<li>Navigieren Sie zu Ihrer Festplatte, die <b>AutoHotkey</b> enthält. Meistens das Laufwerk <b>C:\</b>.</li>
							<li>Suchen Sie in allen "<b>Program Files</b>"-Ordnern nach <b>AutoHotkey</b>.</li>
							<li>Suchen Sie nach <b>AutoHotkey.chm</b> oder einer Datei, die AutoHotkey heißt und ein gelbes Fragezeichen hat.</li>
							<li>Fertig!</li>
						</ol>
					</div>
					<p class="note">
						Online-Links:<br />
						<a href="https://ahkde.github.io/docs/">Dokumentation</a><br />
						<a href="https://ahkde.github.io/docs/commands/">Befehlsliste</a><br />
						<a href="https://ahkde.github.io/docs/Functions.htm#BuiltIn">Funktionen</a><br />
						<a href="https://ahkde.github.io/docs/Variables.htm">Variablen</a>
					</p>
				</div>
				<div id="hotkeys_and_hotstrings" class="section">
					<h2 id="s2">2 - Hotkeys &amp; Hotstrings</h2>

					<p>
						Was ist ein Hotkey? Ein Hotkey ist eine Taste, die sich heiß anfühlt. ... kleiner Scherz. Ein Hotkey ist eine Taste oder Tastenkombination, die der Benutzer auf der Tastatur drücken kann, um einige Aktionen auszulösen.<br />
						Was ist ein Hotstring? Hotstrings werden hauptsächlich verwendet, um Abkürzungen bei Eingabe zu erweitern (Auto-Ersetzen); sie können auch verwendet werden, um eine geskriptete Aktion zu starten.
					</p>

					<p>Hier ein Hotkey:</p>

<pre>
^j::
   Send, Mein erstes Skript
Return
</pre>

					<p>Hier ein Hotstring:</p>

<pre>
::ftw::Free the whales
</pre>

					<p>Der Unterschied zwischen den beiden Beispielen besteht darin, dass der Hotkey durch Drücken von <span class="key">STRG+J</span> ausgelöst werden kann, während der Hotstring Ihr geschriebenes "ftw" in "Free the whales" umwandelt.</p>
					<p>
						<i>"Also, wie genau kann ein Hotkey erstellt werden?"</i> Gute Frage. Ein Hotkey erstellt man mithilfe von zwei Doppelpunkten. Die Taste oder Tastenkombination kommt auf die <b>linke</b> Seite von <code>::</code>. Der Inhalt muss darunter stehen, gefolgt von einem <code>Return</code>.<br />
					</p>
					<p class="note">Hinweis: Es gibt Ausnahmen, aber diese neigen häufig dazu, Verwirrung zu stiften. Daher werden sie erst einmal im Tutorial nicht erwähnt.</p>
<pre>
esc::
   MsgBox Escape!!!!
Return
</pre>
					<p>Ein Hotstring hat auf jeder Seite des Textes, der ersetzt werden soll, jeweils zwei Doppelpunkte. Der Text, der Ihren geschriebenen Text ersetzen soll, muss auf der <b>rechten</b> Seite des zweiten Doppelpunktpaares erfolgen.</p>
					<p>Hotstrings können, wie bereits erwähnt, auch geskriptete Aktionen starten. Eine ausgefallene Bezeichnung für <i>"tue so ziemlich alles"</i>. Das gleiche gilt für Hotkeys.</p>
<pre>
::bzw::
MsgBox Sie haben "bzw" eingegeben.
Return
</pre>

					<p>
						Außerdem sollten Sie wissen, dass jeder Hotkey, Hotstring, Label und andere Dinge, über die wir noch nicht geredet haben, viele Codezeilen enthalten kann.
					</p>

<pre>
^j::
   MsgBox Wow!
   MsgBox Das sind
   Run, Notepad.exe
   WinActivate, Unbenannt - Editor
   WinWaitActive, Unbenannt - Editor
   Send, 7 Zeilen{!}{enter}
   SendInput, innerhalb des STRG{+}J-Hotkeys
Return
</pre>

					<h3 id="s21">a. Tasten und ihre mysteriösen Symbole</h3>

					<div>
						Sie fragen sich vielleicht: <i>"Woher soll ich denn wissen, dass das Zirkumflex (^) die STRG-Taste symbolisiert?!"</i>. Nun, gute Frage. Wenn Sie erfahren möchten, was ^ und andere Symbole bedeuten, sollten Sie einen Blick auf diese Tabelle werfen:<br />
						<table class="info">
							<tr><th>Symbol</th><th>Beschreibung</th></tr>
							<tr><td><strong>#</strong></td><td>WIN-Taste (Windows-Logo-Taste)</td></tr>
							<tr><td><strong>!</strong></td><td>ALT-Taste</td></tr>
							<tr><td><strong>^</strong></td><td>STRG-Taste</td></tr>
							<tr><td><strong>+</strong></td><td>UMSCHALT-Taste</td></tr>
							<tr>
								<td>
									<strong>&amp;</strong>
								</td>
								<td>
									Mit einem Und-Zeichen können zwei beliebige Tasten oder Maustasten zu einem benutzerdefinierten Hotkey kombiniert werden.
								</td>
							</tr>
						</table>
						<p>
							<strong>
								(Die vollständige Liste der Symbole finden Sie auf der <a href="Hotkeys.htm">Hotkey</a>-Seite)
							</strong>
						</p>
					</div>
					<p>
						Desweiteren finden Sie hier eine Liste von allen / der meisten Hotkey-Namen, die auf der <b>linken</b> Seite des Doppelpunktpaares verwendet werden können:<br /><a href="KeyList.htm">KeyList.htm</a>
					</p>
					<p>
						Mithilfe von <b>&amp;</b> kann eine benutzerdefinierte Kombination aus zwei (und nur zwei) Tasten (außer Joystick-Tasten) definiert werden. Im folgenden Beispiel kann der Hotkey nur ausgelöst werden, wenn Sie <span class="key">Numpad0</span> gedrückt halten und dann die zweite Taste drücken:
					</p>

<pre>
Numpad0 &amp; Numpad1::
   MsgBox, Sie haben Numpad1 gedrückt`, während Sie Numpad0 gedrückt hielten.
Return

Numpad0 &amp; Numpad2::
	Run Notepad
Return
</pre>

					<p>
						Sie fragen sich bestimmt jetzt, ob Hotstrings auch irgendwelche coole Modifikatoren haben. Ja, das haben sie!<br />
						Hotstring-Modifikatoren werden in dem ersten Doppelpunktpaar eingefügt. Zum Beispiel:
					</p>

<pre>
:*:ftw::Free the whales
</pre>

					<p class="note">
						Weitere Hotkey- und Hotstring-Modifikatoren, Informationen und Beispiele finden Sie unter:<br />
						<a href="Hotkeys.htm">Hotkeys</a><br />
						<a href="Hotstrings.htm">Hotstrings</a>
					</p>
					<h3 id="s22">b. Fenster-spezifische Hotkeys/Hotstrings</h3>

					<p>Manchmal möchten Sie vielleicht, dass ein Hotkey oder Hotstring nur in einem bestimmten Fenster funktioniert (oder deaktiviert ist). Um dies zu tun, müssen Sie auf Befehle zurückgreifen, die ein #-Zeichen davor haben.</p>
					<p>#IfWinActive<br />
					
					#IfWinExist</p>
					<p>
						Diese speziellen Befehle (auch "Direktiven" genannt) erstellen kontextabhängige Hotkeys und Hotstrings. Geben Sie einfach einen Fenstertitel an. In einigen Fällen kann es jedoch sinnvoll sein, ein HWND, eine Gruppe oder eine Klasse anzugeben. Diese Dinge erfordern fortgeschrittenes Wissen und werden auf der folgenden Seite ausführlicher behandelt: <a href="commands/_IfWinActive.htm">#IfWinActive</a>.
					</p>
<pre>
#IfWinActive Unbenannt - Editor
#space::
   MsgBox Sie haben WIN+LEERTASTE im Texteditor gedrückt.
Return
#IfWinActive
</pre>
					<p>Um die Kontextabhängigkeit auszuschalten, gibt man einen beliebigen #IfWin-Befehl an und lässt seine Parameter weg. Zum Beispiel:</p>
<pre>
<em>; Texteditor</em>
#IfWinActive unbenannt - Editor
!q::
   MsgBox, Sie haben ALT+Q im Texteditor gedrückt.
Return
#IfWinActive

<em>; Jedes andere Fenster, das nicht "Unbenannt - Editor" ist</em>
!q::
   MsgBox, Sie haben ALT+Q in einem beliebigen Fenster gedrückt.
Return
</pre>
					<p>Wenn alle #IfWin-Befehle ausgeschaltet sind (oder nie in einem Skript verwendet werden), können Hotkeys und Hotstrings in allen Fenstern ausgelöst werden.</p><br />
					<p>Die #IfWin-Befehle sind von der Position abhängig: sie beeinflussen nur Hotkeys und Hotstrings, die sich im Skript physisch darunter befinden.</p>

<pre>
<em>; Texteditor</em>
#IfWinActive ahk_class Notepad
#space::
   MsgBox, Sie haben WIN+LEERTASTE im Texteditor gedrückt.
Return
::msg::Sie haben msg in den Texteditor geschrieben
#IfWinActive

<em>; MSPaint</em>
#IfWinActive unbenannt - Paint
#space::
   MsgBox, Sie haben WIN+LEERTASTE in MSPaint gedrückt!
Return
::msg::Sie haben msg in MSPaint eingegeben!
#IfWinActive
</pre>
					<p class="note">Weitere Informationen und ähnliche Befehle finden Sie unter:<br />
					<a href="commands/_IfWinActive.htm">#IfWinActive</a></p>
					<h3 id="s23">c. Mehrere Hotkeys/Hotstrings pro Datei</h3>			   
					<p>Aus irgendeinem Grund bereitet dies bei einigen Leuten Kopfzerbrechen. Also werde ich es klarstellen: AutoHotkey bietet Ihnen die Möglichkeit, <i>so viele</i> Hotkeys und Hotstrings in einer Datei zu haben, wie Sie wollen. Ob es nun 1 oder 3253 sind (oder mehr).</p>
<pre>
#i::
   Run, http://www.google.com/
Return

^p::
   Run, notepad.exe
Return

~j::
   Send, ack
Return

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America
</pre>

					<p>Der obige Code ist durchaus akzeptabel. Mehrere Hotkeys, mehrere Hotstrings. Alle in einer großen glücklichen Skript-Datei.</p>


					<h3 id="s24">d. Beispiele</h3>
<pre>::bzw::beziehungsweise                          <em>; Ersetzt "bzw" mit "beziehungsweise", sobald Sie ein <a href="commands/_Hotstring.htm">Endungszeichen</a> drücken.</em>
:*:bzw::beziehungsweise                         <em>; Ersetzt "bzw" mit "beziehungsweise", ohne dass ein Endungszeichen notwendig ist.</em>

^n::                                       <em>; STRG+N-Hotkey</em>
   Run, notepad.exe                        <em>; Startet das Programm notepad.exe, sobald Sie STRG+N drücken.</em>
Return                                     <em>; Dies endet den Hotkey. Der Code darunter wird nicht ausgelöst.</em>

^b::                                       <em>; STRG+B-Hotkey</em>
   Send, {ctrl down}c{ctrl up}             <em>; Kopiert den markierten Text. ^c könnte man auch verwenden, allerdings ist diese Methode sicherer.</em>
   SendInput, [b]{ctrl down}v{ctrl up}[/b] <em>; Umschließt den markierten Text mit BBCode-Bold-Tags (Forum).</em>
Return                                     <em>; Dies endet den Hotkey. Der Code darunter wird nicht ausgelöst.</em>
</pre><!-- PAGE 2 --><!-- PAGE 2 --><!-- PAGE 2 -->

					
					
					
				</div>
				<div id="sending_keystrokes" class="section">
					<h2 id="s3">3 - Senden von Tastatureingaben</h2>
					<p>
						Sie haben sich also entschieden, Tasten in einem Programm auszulösen bzw. zu schreiben. Das können wir machen. Verwenden Sie den <a href="commands/Send.htm">Send</a>-Befehl. Dieser Befehl sendet Tastatureingaben, um das Schreiben oder Drücken von Tasten zu simulieren.<br /><br />
						Bevor wir uns den Dingen zuwenden, sollten Sie folgende Probleme in Erfahrung bringen, auf die einige Leute häufig stoßen:<br />
						So wie Hotkeys auch, hat Send spezielle Tasten. <a href="commands/Send.htm">Sehr, sehr viele davon.</a><br />
						Hier die 4 bekanntesten Symbole:
					</p>
					<div>
						<hr />
						<p><span class="red">!</span>: Sendet die ALT-Taste. Zum Beispiel würde <em>Send Das ist ein Text!a</em> die Tasten "Das ist ein Text" senden und dann ALT+A drücken. <strong>Hinweis</strong>: !A hat in einigen Programmen einen anderen Effekt als !a. Das liegt daran, dass !A die Tastenkombination ALT+UMSCHALT+A und !a die Tastenkombination ALT+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p><p><span class="red">+</span>: Sendet die UMSCHALT-Taste. Zum Beispiel würde <em>Send +abC</em> den Text "AbC" senden, und <em>Send !+a</em> würde ALT+UMSCHALT+A drücken.</p><p><span class="red">^</span>: Sendet die STRG-Taste. Zum Beispiel würde <em>Send ^!a</em> die Tastenkombination STRG+ALT+A drücken, und <em>Send ^{Home}</em> würde STRG+POS1 senden. <strong>Hinweis</strong>: ^A hat in einigen Programmen einen anderen Effekt als ^a. Das liegt daran, dass ^A die Tastenkombination STRG+UMSCHALT+A und ^a die Tastenkombination STRG+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p><p><span class="red">#</span>: Sendet die WIN-Taste (die Taste mit dem Windows-Logo), demzufolge würde <em>Send #e</em> die WIN-Taste gedrückt halten und dann den Buchstaben "e" drücken.</p>
					</div>
					<p><i><strong>Die nächsten Absätze beziehen sich auf die <a href="commands/Send.htm">Tabelle der Send-Seite</a>.</strong><br /></i></p>
					<p class="note">
						Hinweis:<br />Diese Tabelle gilt <b>nicht</b> für <a href="Hotkeys.htm">Hotkeys</a>. Das heißt, dass Sie <span class="key">CTRL</span> oder <span class="key">ENTER</span> (oder jede andere Taste) nicht mit geschweiften Klammern umschließen sollen, während Sie ein Hotkey erstellen.
					</p><br />

					<div>
						Das folgende Beispiel zeigt, was man mit einem Hotkey nicht machen sollte:
<pre>
<em>; Beim Erstellen eines Hotkeys...
; FALSCH</em>
{LCtrl}::
   Send, AutoHotkey
Return

<em>; RICHTIG</em>
LCtrl::
   Send, AutoHotkey
Return
</pre>
					</div>
					<hr />
					<div>
						<p>Die gigantische Tabelle oben zeigt so ziemlich jede spezielle Taste, die in AHK integriert ist. Zum Beispiel: <code>{enter}</code> und <code>{space}</code>.<br />
						Viele Leute denken, dass die geschweiften Klammern in den Dokumentationen nur zum Spaß gesetzt sind. Aber tatsächlich <b>sind sie notwendig</b>. Nur so kann AHK wissen, dass z. B. <code>{!}</code> als "Ausrufezeichen" und nicht als "drücke die <span class="key">ALT</span>-Taste" interpretiert werden soll. Vergessen Sie nicht, dass Sie sich die Tabelle auf der <a href="commands/Send.htm">Send</a>-Seite anschauen können, um zu überprüfen, ob alle Klammern richtig gesetzt sind.</p>
<pre>
<em>; Sind Ihnen die geschweiften Klammern um das Zeichen herum aufgefallen? Wenn sie nicht da wären, würde AHK
; die ALT-Taste drücken.</em>
Send, Dieser Text wurde geschrieben{!}
</pre>

<pre>
<em>; Das gleiche wie oben, aber mit der ENTER-Taste. AHK würde "enter" schreiben, wenn ...
; ... es nicht mit geschweiften Klammern umschlossen wäre.</em>
Send, Mehrere enter Zeilen wurden enter gesendet. <em>; FALSCH</em>
Send, Mehrere{enter}Zeilen wurden{enter}gesendet. <em>; RICHTIG</em>
</pre>
						<div>
							Viele Leute denken auch, dass <b>jedes einzelne Zeichen</b> in geschweiften Klammern gesetzt werden muss. Das ist FALSCH. Wenn das Zeichen nicht in der Tabelle angegeben ist, muss es nicht in Klammern gesetzt werden. Normale Buchstaben, Zahlen oder sogar einige Symbole (wie z. B. der Punkt) müssen <b>nicht</b> von geschweiften Klammern umschlossen sein.<br /> 
							Außerdem können Sie pro Send-Befehl mehr als 1 Buchstabe, Zahl oder Symbol senden. Send-Befehle mit je 1 Buchstabe sind unnötig.

<pre>
<em>; Umschließen Sie nur Wörter oder einzelne Buchstaben, die in der oben erwähnten Tabelle vorkommen.</em>
Send, {a}       <em>; FALSCH</em>
Send, {b}       <em>; FALSCH</em>
Send, {c}       <em>; FALSCH</em>
Send, {a}{b}{c} <em>; FALSCH</em>
Send, {abc}     <em>; FALSCH</em>
Send, abc       <em>; RICHTIG</em>
</pre>
						</div>
						<div>
							Um eine Taste gedrückt zu halten oder loszulassen, umschließt man den Tastennamen mit geschweiften Klammern und fügt das Wort UP oder DOWN ein.

<pre>
<em>; Hier wird gezeigt, wie Sie eine Taste gedrückt halten und eine weitere Taste (oder mehrere) drücken.
; Sollte eine Methode nicht funktionieren, können Sie eine andere ausprobieren.</em>
Send, ^s                     <em>; Beide Zeilen senden STRG+S</em>
Send, {ctrl down}s{ctrl up}  <em>; Beide Zeilen senden STRG+S</em>
Send, {ctrl down}c{ctrl up}
Send, {b down}{b up}
Send, {TAB down}{TAB up}
Send, {Up down}  <em>; Drückt die NACH-OBEN-Taste nach unten.</em>
Sleep, 1000      <em>; Hält sie eine Sekunde lang gedrückt.</em>
Send, {Up up}    <em>; Lässt die NACH-OBEN-Taste los.</em>
</pre>
						</div>
					</div>
					<div>
							Aber nun fragen Sie sich vielleicht <i>"Wie kann ich meine wirklich langen Send-Befehle besser lesbar machen?"</i>. Einfach. Benutzen Sie einen so genannten Fortsetzungsbereich. Schreiben Sie einfach auf einer neuen Zeile eine runde Startklammer, dann Ihren Inhalt, und zum Schluss eine runde Endklammer. Weitere Informationen finden Sie unter <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a>.
<pre>
Send,
(
Zeile 1
Zeile 2
Äpfel sind Früchte.
)
</pre>

					</div>
					<p class="note">
						Hinweis: Es gibt verschiedene Formen von Send. Jede hat ihre eigenen Besonderheiten. Wenn eine Form von Send nicht wie gewollt funktioniert, können Sie einen anderen Typ von Send ausprobieren. Ersetzen Sie einfach den Befehlsnamen "Send" mit "SendPlay" oder was auch immer Sie möchten.<br />
						Hier die üblichen Wege zum Senden von Text:<br />
						
						Send<br />
						
						SendRaw<br />
						
						SendInput<br />
						
						SendPlay<br />
						
						SendEvent<br />
						Um mehr über die verschiedenen Methoden zu erfahren, <a href="commands/Send.htm">siehe hier</a>.
					</p>
					<h3 id="s31">a. Spiele </h3>
					<p>
						<b><span style="color:red;">Das ist wichtig!</span></b><br />
						Viele Spiele, vorallem die modernen, haben Software zur Abwehr von Cheats. Dinge wie GameGuard, Hackshield, PunkBuster und einige andere. Bei einigen Spielen mit Cheat-Abwehr werden Sie feststellen, dass Ihre Hotkeys, Hotstrings und Send-Befehle nicht funktionieren werden.<br />
						Das Umgehen solcher Systeme verletzt die Richtlinien des Spiels und kann dazu führen, dass Sie gebannt werden. Außerdem ist es ziemlich schwierig, solche Systeme zu umgehen. Es gibt Methoden, um die Erfolgschance in einigen Spielen zu erhöhen, aber es gibt keinen magischen <i>"Funktioniere sofort!!!"</i> Button. Probieren Sie also <b>JEDE</b> Methode aus, bevor Sie aufgeben.<br />
					</p>

					<p>
						Es gibt auch bekannte Probleme mit DirectX. Wenn Sie Probleme haben und wissen, dass das Spiel DirectX verwendet, können Sie folgende Dinge ausprobieren. Wenn möglich, sollten Sie das Spiel auch im Fenstermodus starten. Dies behebt einige DirectX-Probleme.<br />
						Weitere DirectX-Probleme können auftreten, wenn Pixel- oder Image-Befehle verwendet werden. Farben werden als schwarz (0x000000) erkannt, egal welche Farbe Sie versuchen abzurufen. Das ist eine weitere knifflige Sache, die es zu beheben gilt. Versuchen Sie das Spiel im Fenstermodus auszuführen, sofern möglich.
					</p>
					<p>
						Es gibt keine einheitliche Lösung, um AutoHotkey für alle Programme lauffähig zu machen. Wenn alles, was Sie versuchen, fehlschlägt, ist AutoHotkey eventuell für Ihre Anforderung nicht geeignet.
					</p>
					<div>
						<hr />
						Aus der <a href="FAQ.htm#games">FAQ</a>-Seite:<br />
						Einige Spiele verwenden ausschließlich DirectInput. Der Nebeneffekt davon ist, dass sie möglicherweise alle künstlichen Tastatureingaben und Mausklicks ignorieren. Um das zu umgehen, können folgende Möglichkeiten ausprobiert werden:
						<ul>
							<li>Verwenden Sie <a href="commands/Send.htm#SendPlayDetail">SendPlay</a> via: 1) SendPlay-Befehl; 2) <a href="commands/SendMode.htm">SendMode</a> Play; und/oder 3) <a href="Hotstrings.htm#SendMode">Hotstring</a>-Option SP.</li>
							<li>Erhöhen Sie <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>. Zum Beispiel:</li>
							<li><code>SetKeyDelay, 0, 50</code></li>
							<li><code>SetKeyDelay, 150, 150, Play</code></li>
							<li>Versuchen Sie <a href="commands/ControlSend.htm">ControlSend</a>, das dort funktionieren könnte, wo andere Sendemethoden versagen.</li>
						</ul>
					</div><!-- PAGE 3 --><!-- PAGE 3 --><!-- PAGE 3 -->
					
					
					
				</div>
				<div id="running_programs_and_websites" class="section">
					<h2 id="s4">4 - Öffnen von Programmen &amp; Webseiten</h2>
					<div>
						Um ein Programm wie <i>mspaint.exe, calc.exe, script.ahk</i> oder sogar einen Ordner zu starten, verwendet man den <a href="commands/Run.htm">Run</a>-Befehl. Mit diesen Befehl kann man auch URLs wie <a href="https://autohotkey.com/">https://autohotkey.com/</a> öffnen. Wenn Ihr Computer Ihren gewünschten Typ eines Programms starten kann, ist das sehr einfach:

<pre>
<em>; Startet ein Programm. Hinweis: Die meisten Programme benötigen einen VOLLSTÄNDIGEN Dateipfad.</em>
Run, %A_ProgramFiles%\Beliebiges_Programm\Programm.exe

<em>; Öffnet eine Webseite</em>
Run, https://autohotkey.com
</pre>
					</div>
					<div>
						Es gibt noch ein paar weitere Features, wie z. B. Befehlszeilenparameter und CLSID.<br />
						Wenn Sie mehr darüber erfahren wollen, besuchen Sie die <a href="commands/Run.htm">Run-Seite</a>.
						<br />
						Hier ein paar weitere Beispiele:
<pre>
<em>; Einige Programme benötigen keinen vollständigen Pfad, wie z. B. die Standardprogramme von Windows.</em>
Run, notepad.exe
Run, mspaint.exe

<em>; Öffnet den Ordner "Eigene Dokumente" mithilfe der internen <a href="Variables.htm#BuiltIn">AHK-Variable</a></em>
Run, %A_MyDocuments%

<em>; Öffnet einige Webseiten</em>
Run, https://autohotkey.com
Run, http://www.google.com
</pre>
						<br />
						<p class="note">Weiterführende Informationen und Beispiele finden Sie unter:<br /><a href="commands/Run.htm">commands/Run.htm</a>.</p>
					</div><!-- PAGE 4 --><!-- PAGE 4 --><!-- PAGE 4 -->


					
					
					
				</div>
				<div id="commands_vs_functions" class="section">
					<h2 id="s5">5 - Befehle vs. Funktionen()</h2>
					<div>
						AutoHotkey hat zwei Typen von Dingen, die der Scripter zum Erstellen des Codes verwenden kann:<br />
						Befehle und Funktionen()<br />
						<p class="note">Hilfreiche Links:<br />
							Eine Liste aller Befehle: <a href="commands/index.htm">commands/index.htm</a><br />
							Eine Liste aller internen Funktionen: <a href="Functions.htm#BuiltIn">Functions.htm#BuiltIn</a></p>
					</div>
					<h3>Befehle</h3>
					<p>
						Ein Befehl können Sie anhand seiner Syntax (Schreibweise) erkennen. Im Gegensatz zu Funktionen werden die Parameter von Befehlen nicht in runden Klammern gesetzt. Ein Befehl würde also wie folgt aussehen:<br />
						<code>Befehl, Parameter1, Parameter2, Parameter3</code><br />

						<br />Es ist nicht möglich, mehrere Befehle auf einer Zeile zu setzen (Ausnahme: <a href="commands/IfEqual.htm">IfEqual</a>).<br />
						Sie können keine Befehle in den Parametern anderer Befehle setzen.
					</p>

<pre>
MsgBox, Hello Run, Notepad.exe   <em>; Falsch</em>
MsgBox, Hello, Run, Notepad.exe  <em>; Falsch</em>

MsgBox, Hello      <em>; Richtig</em>
Run, Notepad.exe
</pre>

					Befehle unterscheiden sich von Funktionen auch dadurch, dass sie eine "traditionelle Syntax" verwenden. Das bedeutet: Wenn Sie eine <code>Variable</code> verwenden, MÜSSEN Sie ihren Namen mit Prozentzeichen umschließen. <code>%Variable%</code>. Text und Zahlen müssen nicht in "Anführungszeichen" gesetzt werden. <code>Das ist ein Text</code>. Außerdem können Sie im Gegensatz zu Funktionen in den Parametern keine Berechnungen durchführen.
					<p class="note">
						Allerdings gibt es die Möglichkeit, mit einem einzelnen <code>%</code> einen Ausdruck zu erzwingen, um trotzdem Berechnungen in Parametern durchführen zu können.
					</p>
					<h3>Funktionen</h3>
					<div>
						Wie bereits erwähnt sind Funktionen anders aufgebaut, weil sie runde Klammern verwenden. Eine typische Funktion sieht wie folgt aus:<br />
						<code>Funktion(Parameter1, Parameter2, Parameter3)</code><br /><br />
						Die Hauptunterschiede der Funktionen sind:
						<ol>
							<li>
								Sie können Berechnungen in ihnen durchführen.<br />
								
								-- <code>SubStr(37*12, 1, 2)</code><br />
								
								-- <code>SubStr(A_Hour-12, 2)</code>
							</li>
							<li>
								Variablen müssen nicht in Prozentzeichen gesetzt werden.<br />
								
								-- <code>SubStr(A_Now, 7, 2)</code>
							</li>
							<li>
								Funktionen können innerhalb von anderen Funktionen erfolgen.<br />
								
								-- <code>SubStr(A_AhkPath, InStr(A_AhkPath, "AutoHotkey"))</code>
							</li>
							<li>
								Text muss in Anführungszeichen gesetzt werden.<br />
								-- <code>SubStr("Ich programmiere, genial!", 16)</code>
							</li>
						</ol>

						Die Art und Weise, wie Funktionen einen Wert zurückgeben, unterscheidet sich von Befehlen. Befehle benötigen den <i>AusgabeVar</i>-Parameter, Funktionen nicht. Die gängigste Methode, den Wert einer Funktion in eine Variable zu speichern, sieht wie folgt aus:<br />
						<code><span style="color:#ff4400"><b>MeineVariable</b></span>:=Funktion(Parameter)</code>

<pre>
<span style="color:#ff4400"><b>MeineVariable</b></span>:=SubStr("Ich programmiere, genial!", 16)
</pre>
					<p class="note">Dies ist nicht der einzige Weg, aber der häufigste. Man speichert den Wert der Funktion (in diesem Fall <code>SubStr(...)</code>) in <code>MeineVariable</code>, das auf der rechten Seite von := erfolgt.<br />
					<a href="Functions.htm">Mehr zu Funktionen</a></p>
					</div>
					<div>
						Kurz gesagt:

<pre>
<em>; Das sind Befehle</em>
MsgBox, Dies ist etwas Text.
StringReplace, Ausgabe, Eingabe, AutoHotkey, AutoHotkey, ALL
SendInput, Das ist genial{!}{!}{!}

<em>; Das sind Funktionen</em>
SubStr("Ich programmiere, genial!", 16)
FileExist(VariableMitPfad)
Output:=SubStr("Ich programmiere, genial!", 16)
</pre>

					</div>
					<h3 id="s51">a. Code-Blöcke</h3>
					<p>
						<a href="commands/Block.htm">Code-Blöcke</a> sind kleine geschweifte Klammern (<b>{</b> und <b>}</b>), die einen Abschnitt des Codes gruppieren. Nur so kann AutoHotkey wissen, dass die gruppierten Codezeilen zu einer großen Familie gehören, die zusammenbleiben müssen. Code-Blöcke werden häufig in Verbindung mit <i>If</i> und <i>Loop</i> eingesetzt. Lässt man die Klammern weg, wird nur die erste Zeile des Blocks aufgerufen.<br /><br />
					</p>
					<div>
						Im folgenden Code werden die beiden Zeilen nur ausgeführt, wenn Var gleich 5 ist.
<pre>
if (var=5)
{
   MsgBox, var ist gleich %var%!!
   ExitApp
}
</pre><br />

						Im folgenden Code wird das Mitteilungsfenster nur angezeigt, wenn var gleich 5 ist. Das Skript wird immer beendet, selbst wenn Var <b>nicht</b> 5 ist.

<pre>
if (var=5)
   MsgBox, var ist gleich %var%!!
   ExitApp
</pre><br />

						Diese Vorgehensweise ist völlig in Ordnung, da dem If nur eine Codezeile zugeordnet ist. Es ist genau das gleiche wie oben, allerdings habe ich die zweite Zeile nicht eingerückt, um zu zeigen, dass sie nicht dem if gehört.

<pre>
if (var=5)
   MsgBox, Var ist gleich %var%!!
MsgBox, Wir sind nun 'außerhalb' von if. Geschweifte Klammern waren nicht notwendig, weil nur eine Zeile dazugehört.
</pre>
					</div><!-- PAGE 5 --><!-- PAGE 5 --><!-- PAGE 5 -->
					
					
					
				</div>
				<div id="variables" class="section">
					<h2 id="s6">6 - Variablen</h2>
					<p>
						<a href="Variables.htm">Variablen</a> sind quasi kleine Klebezettel, die wichtige Informationen enthalten. Sie können verwendet werden, um Text, Zahlen, Daten von Funktionen/Befehlen oder mathematischen Gleichungen zu speichern. Ohne sie wäre das Programmieren &amp; Scripting sehr viel anstrengender.
					</p>
					<hr />
					<div>
						Es gibt mehrere Wege, wie man einer Variable etwas zuweisen kann; allerdings befassen wir uns nur mit den bekanntesten Formen. Bitte achten Sie auf das Gleichheitszeichen (=).
						<ol>
							<li><code>variable=text</code><br />
								<div class="indented">Dies ist die einfachste Form für eine Variable - die traditionelle Zuweisung. Einfach Text eingeben und fertig.</div>
							</li>
							<li><code>variable=%variable2%</code><br />
								<div class="indented">Das gleiche wie oben, außer dass Sie den Wert einer Variable einer anderen Variable zuweisen.</div>
							</li>
							<li><code>variable:="text"</code><br />
								<div class="indented">Dies ist eine Ausdruckszuweisung, wegen dem : vor dem =. Jeder Text muss in "Anführungszeichen" gesetzt werden.</div>
							</li>
							<li><code>variable:=variable2</code><br />
								<div class="indented">Im Ausdrucksmodus brauchen Variablen keine Prozentzeichen.</div>
							</li>
							<li><code>variable:=6+8/3*2-sqrt(9)</code><br />
								<div class="indented">Dank des Ausdrucks können Sie Berechnungen durchführen!</div>
							</li>
						</ol>
						Nummer 1 &amp; 2 können kombiniert werden. <code>var=%var2% etwas Text %var3%.</code><br />
						3, 4 &amp; 5 können auch kombiniert werden. <code>var:="Das Ergebnis von 5+ " Variable " ist: " 5+Variable</code>
					</div>
					<hr />

					<p class="note">
						Jedes Gleichheitszeichen (<b>=</b>) mit vorangestelltem Symbol wird als <b>Zuweisungsoperator</b> bezeichnet und ist immer ein Ausdruck. Das heißt also, dass <code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> usw. immer Ausdrücke verwenden.
					</p>
					<h3 id="s61">a. Wann und wo Prozentzeichen verwendet werden</h3>
					<p>
						Viele haben Probleme damit zu erkennen, wann und wo sie die Variablen mit Prozentzeichen (<b>%</b>) umschließen sollen. Ich hoffe, dass die folgende Übersicht Unklarheiten beseitigen kann.
					</p>
					<div>
						Wann und wo %'s verwendet werden:
						<ol>
							<li>Bei Befehlen (siehe oben).<br />
							-- Außer wenn der Parameter AusgabeVar oder EingabeVar ist.</li>
							<li>Beim Speichern eines Wertes in eine Variable via traditionellem Modus (ein Gleichheitszeichen ohne Symbol davor).</li>
						</ol>

						Wann und wo %'s <b>nicht</b> verwendet werden:
						<ol>
							<li>In Parametern, die Eingabe- oder Ausgabevariablen sind, zum Beispiel: <code>StringLen, <span style="color:red">OutputVar</span>, <span style="color:red">InputVar</span></code></li>
							<li>Auf der linken Seite einer Zuweisung: <code><span style="color:red">Var</span> = 123abc</code></li>
							<li>Auf der linken Seite von traditionellen (nicht-ausdrucksartigen) if-Anweisungen: <code>If <span style="color:red">Var1</span> &lt; %Var2%</code></li>
							<li>Überall in Ausdrücken. Zum Beispiel:
<pre>
If (<span style="color:red">Var1</span> != <span style="color:red">Var2</span>)
   <span style="color:red">Var1</span> := <span style="color:red">Var2</span> + 100
</pre>
							</li>
						</ol>
					</div>



					<h3 id="s62">b. Abrufen von Benutzereingaben</h3>
					<div>
						Manchmal ist es notwendig, Informationen eines Benutzers einzufordern. Es gibt mehrere Möglichkeiten, dies zu tun, aber der einfachste Weg ist die <a href="commands/InputBox.htm">InputBox</a>. Hier ein einfaches Beispiel, wie man dem Benutzer ein paar Fragen stellen kann und die eingegebenen Dinge verarbeitet.

<pre>
InputBox, AusgabeVar, Frage 1, Wie heißen Sie mit Vornamen?
if (AusgabeVar="Bill")
   MsgBox, Sie haben einen tollen Namen`, %AusgabeVar%.

InputBox, AusgabeVar2, Frage 2, Mögen Sie AutoHotkey?
if (AusgabeVar2="ja")
   MsgBox, Danke`, dass Sie mit %AusgabeVar2% geantwortet haben`, %AusgabeVar%! Wir werden gute Freunde.
else
   MsgBox, %AusgabeVar%`, das macht mich traurig.
</pre>
					</div>

					<h3 id="s63">c. Weitere Beispiele</h3>
					<div>
<pre>
<a href="commands/MsgBox.htm">MsgBox</a>, 4, , Möchten Sie fortfahren?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
    Return                <em>; Bei Nein wird der Code genau hier gestoppt.</em>
MsgBox Sie haben JA gedrückt.  <em>; Ansonsten hat der Benutzer Ja ausgewählt.</em>
</pre>
<pre>
<em>; Einige Beispiele, die zeigen, wo Prozentzeichen möglich sind und wo nicht</em>
Variable=text                      <em>; Speichert etwas Text in eine Variable via traditioneller Zuweisung.</em>
VariableZahl:=6                  <em>; Speichert eine Zahl in eine Variable via Ausdruckszuweisung.</em>
Variable2=%Variable%               <em>; Speichert eine Variable in eine andere Variable via traditioneller Zuweisung.</em>
Variable3:=Variable                <em>; Speichert eine Variable in eine andere Variable via Ausdruckszuweisung.</em>
Variable4.=Variable                <em>; Fügt eine Variable an das Ende einer anderen Variable an, via Ausdruckszuweisung.</em>
Variable5+=VariableZahl          <em>; Addiert den Wert einer Variable mit einer anderen Variable via Ausdruckszuweisung.</em>
Variable5-=VariableZahl          <em>; Subtrahiert den Wert einer Variable mit einer anderen Variable via Ausdruckszuweisung.</em>
Variable6:=SubStr(Variable, 2, 2)  <em>; Variable innerhalb einer Funktion. Dies ist immer ein Ausdruck.</em>
Variable7=%Variable% Text          <em>; Speichert eine Variable plus etwas Text in eine andere Variable via traditioneller Zuweisung.</em>
Variable8:=Variable " Text"        <em>; Speichert eine Variable plus etwas Text in eine andere Variable via Ausdruckszuweisung.</em>
MsgBox, %Variable%                 <em>; Variable innerhalb eines Befehls. </em>
StringSplit, Variable, Variable, x <em>; Variable innerhalb eines Befehls, der EingabeVar und AusgabeVar verwendet.</em>
if (VariableZahl=6)              <em>; Immer wenn ein IF runde Klammern hat, wird es ein Ausdruck sein. Also keine %'s.</em>
If (Variable != VariableZahl)    <em>; Immer wenn ein IF runde Klammern hat, wird es ein Ausdruck sein. Also keine %'s.</em>
if VariableZahl=6                <em>; Ohne runde Klammern ist das if traditionell. Allerdings benötigen nur die Variablen auf der 'rechten Seite' %'s. </em>
If Var1 &lt; %Var2%                   <em>; Ohne runde Klammern ist das if traditionell. Allerdings benötigen nur die Variablen auf der 'rechten Seite' %'s. </em>
</pre>
					</div><!-- PAGE 6 --><!-- PAGE 6 --><!-- PAGE 6 -->
				
				
				
				</div>
				<div id="objects" class="section">
					<h2 id="s7">7 - Objekte</h2>
					<p>
						<a href="Objects.htm">Objekte</a> sind eine Möglichkeit, Ihre Daten auf eine effizientere Weise zu organisieren. Manchmal werden Objekte auch als Arrays bezeichnet. Beachten Sie aber, dass alle Arrays eigentlich nur Objekte sind. Wir geben den Objekten je nach Verwendungszweck unterschiedliche Namen, aber in der Regel sind alle Objekte gleich.
					</p>
					<hr />
					Ein Objekt ist im Grunde genommen eine Sammlung von Variablen. Die Variablennamen werden als "Keys" bezeichnet und der Inhalt der Variablen ist "Values".<br />
					<br />
					Wenn Sie Leute hören, die ein Objekt als <i>Array</i> oder <i>indiziertes Array</i> bezeichnen, bedeutet das in der Regel, dass alle Keys fortlaufende Nummern sind, beginnend bei 1.<br />
					Wenn Sie Leute hören, die ein Objekt als <i>assoziatives Array</i> bezeichnen, bedeutet das, dass die Keys entweder Zeichenketten (Text) oder nicht-fortlaufende Nummern sind. Manchmal ist es auch eine Mischung aus beidem, einschließlich fortlaufende Nummern!<br />
					<br />
					Es gibt keine Einschränkungen, was ein Key oder Value sein kann - sie können sogar andere Arrays sein!
					<br />
					Ein Array, das Arrays enthält, wird als <i>Mehrdimensionales Array</i> bezeichnet, aber dazu später mehr.
					<hr />
					<div>
						Es gibt eine Reihe von Gründen, warum ein Objekt nützlich sein kann. Einige Beispiele:<br />
						<ol>
							<li>Sie wollen eine nummerierte Liste von Dingen, z. B. eine Einkaufsliste (dies wäre ein indiziertes Array)</li>
							<li>Sie möchten etwas gitterförmig darstellen, z. B. für ein Brettspiel (dies würde mit mehrdimensionalen Objekten erfolgen)</li>
							<li>Sie haben eine Liste von Dingen, in der jedes Ding eine Bezeichnung hat, wie z. B. die Merkmale einer Frucht (dies wäre ein assoziatives Array)</li>
						</ol>
					</div>
					<h3 id="s71">a. Erstellen von Objekten</h3>
					<div>
						Es gibt mehrere Möglichkeiten, ein Objekt zu erstellen, die gängigsten davon sind unten aufgelistet<br />
						<ol>
							<li><code>MeinObjekt := ["eins", "zwei", "drei", 17]</code><br />
								<div class="indented" >
									Syntax mit eckigen Klammern. Auch bekannt als "indiziertes Array". Ein indiziertes Array ist ein Objekt, das eine Liste von Elementen mit der Nummerierung 1 und höher repräsentiert. In diesem Beispiel wird der Wert <code>"eins"</code> in den Objekt-Key <code>1</code> (aka Index 1) und der Wert <code>17</code> in den Objekt-Key <code>4</code> (aka Index 4) gespeichert.
								</div>
							</li>
							<li><code>Banane := {"Form": "Länglich", "Farbe": "Gelb", "Geschmack": "Köstlich", "Preis": 3}</code><br />
								<div class="indented" >
									Syntax mit geschweiften Klammern. Auch bekannt als "assoziatives Array". Ein assoziatives Array ist eine Sammlung von Daten, wo jedes Element einen Namen hat. In diesem Beispiel wird der Wert <code>"Gelb"</code> in den Objekt-Key <code>"Farbe"</code> gespeichert. Außerdem wird der Wert <code>3</code> in den Objekt-Key <code>"Preis"</code> gespeichert.
								</div>
							</li>
							<li><code>MeinObjekt := Array("eins", "zwei", "drei", 17)</code><br />
								<div class="indented" >
									Die Funktion zum Erstellen eines Arrays. Identisch zur Syntax mit eckigen Klammern, aber in einer Funktion verpackt.
								</div>
							</li>
							<li><code>Banane := Object("Form", "Länglich", "Farbe", "Gelb", "Geschmack", "Köstlich", "Preis", 3)</code><br />
								<div class="indented" >
									Die Funktion zum Erstellen eines Objekts. Identisch zur Syntax mit geschweiften Klammern, aber in einer Funktion verpackt.
								</div>
							</li>
						</ol>

						Vergessen Sie nicht, dass all diese Definitionen das gleiche erstellen (Objekte), nur mit unterschiedlichen Keys.

					</div>

					<h3 id="s72">b. Verwenden von Objekten</h3>
					Objekte können vielfältig eingesetzt werden. Sie können Werte abrufen, Werte setzen, neue Werte hinzufügen und so weiter.
					<div>
						<br />
						<strong>Setzen von Werten:</strong>
						<div class="indented">
							Das Setzen von Werten in einem Objekt ist so einfach wie das Setzen des Wertes einer Variable.<br />
							Sie müssen lediglich die Klammer- oder Punktschreibweise (wie im Abschnitt zum Abrufen eines Wertes gezeigt) auf die linke Seite eines Ausdruckszuweisungssymbols <code>:=</code> setzen.<br />
							<br />
							Zum Beispiel:<br />
							<code>Banane.Konsistenz := "Matschig"</code><br />
							<code>Banane["Verfault"] := True <em>; Diese Banane ist verfault. Bäh.</em></code>
						</div>
						<br />
						<strong>Abrufen von Werten:</strong>
						<ol>
							<li><code>Wert := Banane["Farbe"]</code><br />
								<div class="indented" >Klammerschreibweise. Mit dieser Schreibweise ist es möglich, ein Ausdruck als Key zu verwenden, um an den Wert Ihres Objekts zu kommen. In diesem Fall habe ich den einfachen Ausdruck <code>"Farbe"</code> verwendet, das (wenig überraschend) der Key <code>Farbe</code> ist. Es wird ein Mitteilungsfenster mit dem Wort "Gelb" angezeigt, weil wir im <a href="#s71">vorherigen Abschnitt</a> den Key <code>Farbe</code>  auf "Gelb" gesetzt haben.
								</div>
							</li>
							<li><code>Wert := Banane.Farbe</code><br />
								<div class="indented" >
									Punktschreibweise. Diese Schreibweise lässt Sie nur direkt geschriebene Zeichenketten als Keys verwenden. In den Keys können keine Variablen angegeben werden.
								</div>
							</li>
						</ol>
						<br />
						<strong>Hinzufügen neuer Keys und Werte:</strong>
						<ol>
							<li>Direktes Hinzufügen von Werten
								<div class="indented" >
									Um einen Wert oder Key direkt hinzuzufügen, legt man einfach einen Key an, der noch nicht existiert. Zum Beispiel:<br />
									<code>MeinObjekt.NeuerKey := "Glänzend"</code><br />
									<code>MeinObjekt["NeuerKey"] := 3.1415</code>
								</div>
							</li>
							<li>Einfügen von Werten
								<div class="indented" >
									Schauen Sie sich die folgenden Methoden an, wie Keys und Werte noch eingefügt werden können.<br />
									<br />
									<code>MeinObjekt.InsertAt(Index, Wert1, Wert2, Wert3...)</code><br />
									<i>Index</i> ist ein beliebiger Integer-Key. Diese Methode wird ALLE höheren Integer-Keys um die Anzahl der eingefügten Werte nach oben verschieben, selbst wenn Lücken vorhanden sind (fügen Sie beispielsweise zwischen den Keys 1 und 100 einen Wert in Key 50 ein, wird der Key 100 auf 101 verschoben).<br />
									<br />
									<code>MeinObjekt.Push(Wert1, Wert2, Wert3...)</code><br />
									Diese Methode bewirkt, dass die Werte an das Ende des Arrays <i>MeinObjekt</i>  "angefügt" werden. Das heißt, dass die Werte bei dem höchsten Integer-Key plus eins eingefügt werden.<br />
								</div>
							</li>
						</ol>
						<br />
						<strong>Entfernen von Keys und Werten:</strong>
						<ol>
							<li>Leermachen des Wertes.<br />
								<div class="indented" >
									Der einfachste Weg, einen Wert zu entfernen, besteht darin, ihn leer zu machen. Setzen Sie den Wert einfach auf "", auch bekannt als <i>leere Zeichenkette</i>. Der Key wird dadurch nicht entfernt, aber es wird die Illusion erzeugt, als wäre sein Wert noch nicht gesetzt.<br />
									Anhand der <code>HasKey</code>-Methode kann man erkennen, dass der Key noch vorhanden ist. Außerdem taucht der Key weiterhin in einer <code>For</code>-Schleife auf. (For-Schleifen werden später erklärt)
								</div>
							</li>
							<li>Entfernen des Keys<br />
								<div class="indented" >
									Es gibt mehrere Wege, wie der Key <i>und gleichzeitig auch</i> sein Wert entfernt werden kann. Da gibt es:
								</div>
								<ol>
									<li><code>EntfernterWert := MeinObjekt.Delete(BeliebigerKey)</code>
										<div class="indented">
											Der vorherige Wert von <code>MeinObjekt[BeliebigerKey]</code> wird in <i>EntfernterWert</i> gespeichert.
										</div>
									</li>
									<li><code>AnzahlEntfernterKeys := MeinObjekt.Delete(ErsterKey, LetzterKey)</code>
										<div class="indented">
											Mit dieser Methode kann ein Bereich von Integer- (nummerierten) oder Zeichenketten-Keys zwischen ErsterKey und LetzterKey entfernt werden.<br />
											<br />
											Der zurückgegebene Wert ist die Anzahl der Keys, die entfernt wurden - dieser Wert ist nützlich, wenn Sie eine Lücke zwischen Ihren Keys haben (wenn Sie z. B. die Keys 1, 3 und 4 angegeben haben, wird AnzahlEntfernterKeys eine 3 sein, weil nur 3 Keys entfernt werden konnten)
										</div>
									</li>
									<li><code>MeinObjekt.Pop()</code>
										<div class="indented">
											Entfernt den höchsten Integer-Key, und gibt den Wert zurück. Höhere Keys als diesen gibt es nicht.
										</div>
									</li>
									<li><code>EntfernterWert := MeinObjekt.RemoveAt(Index)</code><br />
									<code>AnzahlEntfernterKeys := MeinObjekt.RemoveAt(Index, Länge)</code>
										<div class="indented">
											Diese Methode entfernt alle Keys von <i>Index</i> bis <i>Index + Länge - 1</i>. Wenn <i>Länge</i> fehlt, gilt standardmäßig 1. Nach dem Entfernen der Keys werden alle höheren Integer-Keys (nummerierten) nach unten verschoben, um die Lücke zu füllen, so dass der Wert bei <i>Index + Länge</i>, sofern vorhanden, nun bei <i>Index</i> sein wird. Dieser Sachverhalt entspricht der Funktionsweise der InsertAt-Methode mit mehreren angegebenen Werten.
										</div>
									</li>
								</ol>
							</li>
						</ol>
					</div><!-- PAGE 7 --><!-- PAGE 7 --><!-- PAGE 7 -->

					
					
					
				</div>
				<div id="helpful_goodies" class="section">
					<h2 id="s8">8 - Andere hilfreiche Goodies</h2>
					<p>
						Wir haben das Ende unserer Reise erreicht, werter Freund. Ich hoffe, Sie haben etwas gelernt. Aber bevor wir gehen, zeige ich Ihnen noch ein paar Dinge, die Sie wissen sollten. Viel Spaß!
					</p>
					<h3 id="s81">a. Die mysteriösen eckigen Klammern</h3>
					<div>
						Auf fast allen Seiten sind zwei Symbole (<b>[</b> und <b>]</b>) zu sehen, die innerhalb der gelben Syntax-Box etwas Bestimmtes umschließen. Alles, was sich innerhalb dieser eckigen Klammern befindet, ist <b><i>OPTIONAL</i></b>. Das bedeutet, dass Sie das Zeug darin weglassen können, wenn Sie es nicht benötigen. Beim Schreiben Ihres Codes ist es sehr wichtig, <b>NICHT</b> die eckigen Klammern in Ihrem Code zu verwenden.<br /><br />
						Auf der <a href="commands/ControlGetText.htm">ControlGetText</a>-Seite können Sie folgendes sehen (ohne Farben):<br />
						<code>ControlGetText, AusgabeVar <span style="color:red"><b>[</b></span><span style="color:navy">, Steuerelement, Fenstertitel, Fenstertext, Titelausnahme, Textausnahme</span><span style="color:red"><b>]</b></span></code><br /><br />
						Also könnten Sie folgendes tun:<br />
						<code>ControlGetText, AusgabeVar</code><br /><br />

						Oder weitere Details einfügen:<br />
						<code>ControlGetText, AusgabeVar, Steuerelement, Fenstertitel</code><br /><br />

						Was ist zu tun, wenn Sie nur Titelausnahme angeben wollen? Einfach!<br />
						<code>ControlGetText, AusgabeVar, Steuerelement,,, Titelausnahme</code><br /><br />
						<p class="Note">
							Bitte beachten Sie, dass die Parameter nicht IGNORIERT, sondern nur leer gelassen werden können.<br />
							Wenn Sie "Fenstertitel, Fenstertext" ignorieren würden, würde es wie folgt aussehen und zu Problemen führen:<br />
							<code>ControlGetText, AusgabeVar, Steuerelement, Titelausnahme</code><br />
							Dies wäre gültig.<br />
							<code>ControlGetText, AusgabeVar, Steuerelement,,, Titelausnahme</code>
						</p>
					</div>
					<h3 id="s82">b. Herausfinden Ihrer AHK-Version</h3>
					<div>
						Führen Sie den folgenden Code aus, um Ihre aktuelle AHK-Version anzeigen zu lassen:
<pre>
MsgBox, %A_AhkVersion%
</pre>

						Oder suchen Sie im Startmenü oder Installationsverzeichnis nach "AutoHotkey Help File" oder "AutoHotkey.chm".
					</div>

					<h3 id="s83">c. Trial-and-Error-Prinzip</h3>
					<p>
						Trial-and-Error (Versuch und Irrtum) ist eine sehr verbreitete und effektive Möglichkeit des Lernens. Statt bei jeder Kleinigkeit nachzufragen, kann es manchmal hilfreich sein, wenn man etwas Zeit für sich alleine verbringt (manchmal Stunden oder Tage) und versucht, etwas selbst auf die Reihe zu bekommen.
					</p>
					<p>
						Wenn Sie etwas ausprobieren und eine Fehlermeldung erhalten, sollten Sie diesen Fehler analysieren. Versuchen Sie dann, Ihren Code zu korrigieren. Führen Sie ihn nochmals aus. Wenn Sie weiterhin einen Fehler erhalten, sollte er auch korrigiert werden. Setzen Sie dieses Verfahren fort, bis Ihr Code funktioniert. Auf diese Weise lernen Sie viel, weil Sie die Dokumentation lesen, Fehler analysieren und kennenlernen, was funktioniert und was nicht. <span class="InlineCode">Versuchen, scheitern, versuchen, scheitern, versuchen, versuchen, versuchen, scheitern, scheitern, <b>erfolgreich sein!</b></span>
					</p>
					<p>
						So haben viele "Profis" gelernt. Aber haben Sie keine Angst zu fragen, wir beißen nicht. Das Lernen ist ein langwieriger Prozess; Die "Profis" haben AutoHotkey auch nicht in einem Tag gemeistert.
					</p>
					<p class="Note">"Wenn es beim ersten Mal nicht klappt, versuchen, versuchen Sie es erneut." - William E. Hickson</p>
					<h3 id="s84">d. Einrückung</h3>
					<div>
						Diese Sache (Einrücken) ist sehr wichtig! Ihr Code läuft auch ohne Einrücken einwandfrei, aber es hilft Ihnen und anderen, Ihr Code zu lesen. Ein kleines Skript (25 Zeilen oder weniger) ohne eingerücktem Code kann vermutlich ohne Probleme gelesen werden, aber je größer es wird, desto unübersichtlicher wird es. Am besten lernen Sie so schnell wie möglich, wie Sie Ihr Code einrücken können.<br />
						Auf welche Weise Sie Ihren Code einrücken, spielt keine Rolle, aber achten Sie darauf, dass es gleichmäßig aussieht.<br />
						"<b>Was ist Einrückung?</b>", fragen Sie sich? Man entflechtet den Code einfach mit Leerräumen, um sehen zu können, was zu was gehört. Normalerweise werden 3 oder 4 Leerzeichen oder ein Tabulatorzeichen pro "Stufe" verwendet.<br /><br />
						Ohne Einrückung:

<pre>
if (Auto="alt")
{
MsgBox, Das Auto ist wirklich alt.
if (Räder="platt")
{
MsgBox, Das Auto ist nicht zum Fahren geeignet.
Return
}
else
{
MsgBox, Seien Sie vorsichtig! Dieses alte Auto ist zu gefährlich`, um es zu fahren.
}
}
else
{
MsgBox, Meine Güte`, wie Ihr neues Fahrzeug glänzt.
}
</pre>

						Eingerückt:

<pre>
if (Auto="alt")
{
   MsgBox, Das Auto ist wirklich alt.
   if (Räder="platt")
   {
      MsgBox, Das Auto ist nicht zum Fahren geeignet.
      Return
   }
   else
   {
      MsgBox, Seien Sie vorsichtig! Dieses alte Auto ist zu gefährlich`, um es zu fahren.
   }
}
else
{
   MsgBox, Meine Güte`, wie Ihr neues Fahrzeug glänzt.
}
</pre>
						Wiki zeigt Ihnen verschiedene Stile und Beispiele. Entscheiden Sie selbst, was oder wie Sie einrücken wollen bzw. wie Ihr Code am einfachsten gelesen werden kann.<br />
						<a href="https://de.wikipedia.org/wiki/Einr%C3%BCckungsstil">https://de.wikipedia.org/wiki/Einr%C3%BCckungsstil</a>
					</div>

					<h3 id="s85">e. Um Hilfe bitten</h3>
					Zuallererst sollten Sie selbst versuchen, Nachforschungen zu betreiben oder den Code zu schreiben. Wenn Sie mit den Ergebnissen nicht zufrieden sind, können Sie die Community fragen, aber beachten Sie dabei folgende Punkte:
					<ul>
						<li>Haben Sie keine Hemmungen um Hilfe zu bitten, selbst die klügsten Menschen tun das.</li>
						<li>Zeigen Sie uns Ihre Versuche, auch wenn Sie der Ansicht sind, dass sie lächerlich sind.</li>
						<li>Schicken Sie uns all Ihre Versuche.</li>
						<li>Tun Sie so, als wäre <i>jeder außer Sie</i> dumm wie Brot, der von nichts weiß. Geben Sie uns so viele Informationen wie möglich, damit wir wissen, was Sie vorhaben. Helfen Sie uns, Ihnen zu helfen.</li>
						<li>Seien Sie geduldig.</li>
						<li>Seien Sie höflich.</li>
						<li>Seien Sie offen.</li>
						<li>Seien Sie nett.</li>
						<li>Haben Sie Spaß.</li>
					</ul>

					Erwarten Sie nicht, dass Sie sofort eine Antwort bekommen - warten Sie wenigstens 1 Tag (24 Stunden), bevor Sie nachhaken. Wir helfen gerne, aber bedenken Sie, dass wir unsere Hilfe kostenlos anbieten und unsere Freizeit dafür opfern. Wir könnten gerade arbeiten, schlafen, spielen, mit der Familie zusammen sein, oder einfach zu beschäftigt sein, um zu helfen.<br />
					Während Sie auf Hilfe warten, könnten Sie selbst versuchen, das Problem zu lösen. Es ist ein tolles Gefühl, etwas ohne Hilfe geschafft zu haben.

					<h3 id="s86">f. Andere Links</h3>
					<p>
						<a href="FAQ.htm">Häufig gestellte Fragen (FAQ)</a>
					</p>
				</div>
			</div>
		</div>
	</body>
</html>
