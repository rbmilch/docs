<!DOCTYPE HTML>
<html>
<head>
<title>Reguläre Ausdrücke (RegEx) - Kurzübersicht</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<style type="text/css">
<!--
.regex {background-color: #FFEED3; font-weight: bold; word-break: break-all}
.subj {background-color: #DDFFDD}
-->
</style>
</head>
<body>
<h1>Reguläre Ausdrücke (RegEx) - Kurzübersicht</h1>

<h2>Grundlagen</h2>
<p><strong>Mehrere Treffer</strong>: Mit einem regulären Ausdruck, kurz RegEx, sucht man ein bestimmtes Muster innerhalb einer Zeichenkette, das in der Regel <em>mehrmals</em> gefunden werden kann. Zum Beispiel kann der reguläre Ausdruck <span class="regex">abc</span> in den Zeichenketten <span class="subj">abc</span>123, 123<span class="subj">abc</span> und 123<span class="subj">abc</span>xyz gefunden werden. Der reguläre Ausdruck kann um einen <a href="#anchor">Anker</a> ergänzt werden, wenn das Suchmuster nur am Anfang oder Ende einer Zeichenkette gefunden werden soll.</p>
<p><strong>Escapezeichen</strong>: Die meisten Zeichen wie abc123 können direkt in einem regulären Ausdruck verwendet werden. Wenn man aber eines der Funktionszeichen <strong>\.*?+[{|()^$</strong> suchen muss, ist es notwendig, einen umgekehrten Schrägstrich davorzusetzen. Zum Beispiel wäre <span class="regex">\.</span> ein normaler Punkt und <span class="regex">\\</span> ein normaler umgekehrter Schrägstrich. Mithilfe von \Q...\E kann eine komplette Zeichenkette angegeben werden, ohne darin ein Zeichen mit einem umgekehrten Schrägstrich versehen zu müssen. Zum Beispiel: \QNormaler Text\E.</p>
<p><strong>Groß-/Kleinschreibung</strong>: Standardmäßig beachten reguläre Ausdrücke die Groß-/Kleinschreibung. Mit der "i"-Option kann das geändert werden. Das Muster <span class="regex">i)abc</span> würde beispielsweise nach "abc" suchen, egal ob es klein oder groß geschrieben ist.  </p>

<h2 id="Options">Optionen (Groß-/Kleinschreibung beachten)</h2>
<p>Die folgenden Optionen müssen am Anfang eines regulären Ausdrucks stehen, gefolgt von einer runden Endklammer. Wenn keine Optionen vorhanden sind, kann diese Klammer weggelassen werden. Zum Beispiel würde "<span class="red">im)</span>abc" nach <em>abc</em> suchen, wo die Groß-/Kleinschreibung egal ist und die Suche über mehrere Zeilen erfolgt. Im Vergleich zu anderen Programmiersprachen ist diese Schreibweise ziemlich ungewöhnlich. Sie hat aber den Vorteil, dass keine speziellen Trennzeichen (z. B. der Schrägstrich) notwendig sind, um einen regulären Ausdruck von einem normalen Text zu unterscheiden, und demzufolge solche Trennzeichen innerhalb des Musters nicht mit einem Escapezeichen versehen werden müssen. Darüber hinaus sind die Optionen mit dieser Schreibweise einfacher vom Programm zu parsen, was sich positiv auf die Performance auswirkt.</p>
<table class="info">
  <tr id="opt_i">
    <td><strong>i</strong></td>
    <td>Wenn diese Option aktiv ist, stimmen Buchstaben im Suchmuster sowohl mit Groß- als auch Kleinbuchstaben überein.</td>
  </tr>
  <tr id="Multiline">
    <td><strong>m</strong></td>
    <td><p>Multiline-Modus. Die zu durchsuchende <em>Zeichenkette</em> wird nicht als durchgehende Zeile, sondern als Ansammlung einzelner Zeilen angesehen (sofern Zeilenumbrüche enthalten sind). Folgende Änderungen treten dabei in Kraft:</p>
      <p>1) Zirkumflex (^) ist nicht nur der Anfang der <em>Zeichenkette</em>, sondern auch der Anfang jeder neuen Zeile, also direkt nach jedem Zeilenumbruch (aber nicht nach einem Zeilenumbruch <em>ganz am Ende</em> der <em>Zeichenkette</em>).</p>
      <p>2) Dollar-Zeichen ($) ist nicht nur das Ende der <em>Zeichenkette</em>, sondern auch das Ende jeder neuen Zeile, also direkt vor jedem Zeilenumbruch.</p>
      <p>Zum Beispiel kann das Muster "<span class="red">m)</span>^abc$" nur mit der <em>Zeichenkette</em> "xyz`r`nabc" übereinstimmen, wenn die "m"-Option vorhanden ist.</p>
      <p>Die "D"-Option wird ignoriert, wenn "m" vorhanden ist.</p></td>
  </tr>
  <tr id="opt_s">
    <td><strong>s</strong></td>
    <td>DotAll-Modus. Bewirkt, dass ein Punkt (.) mit allen Zeichen übereinstimmt, einschließlich Zeilenumbrüche (normalerweise stimmt er nicht mit Zeilenumbrüchen überein). Beachten Sie, dass ein Zeilenumbruch üblicherweise aus zwei Zeichen besteht (`r`n), demzufolge sind zwei Punkte für eine Übereinstimmung erforderlich. Diese Option hat keinen Einfluss auf negative Klassen wie z. B. [^a] - diese Art von Klassen stimmen immer mit Zeilenumbrüchen überein.</td>
  </tr>
  <tr id="opt_x">
    <td><strong>x</strong></td>
    <td>Wenn diese Option aktiv ist, werden Leerraumzeichen im regulären Ausdruck ignoriert, es sei denn, sie haben ein Escapezeichen davor oder befinden sich in einer Zeichenklasse. Die Zeichen `n und `t werden auch ignoriert, weil sie in einem regulären Ausdruck bereits als normale Leerraumzeichen behandelt werden (im Gegensatz zu \n und \t, die PCRE-Escapesequenzen sind). Die <strong>x</strong>-Option ignoriert zudem Zeichen außerhalb einer Zeichenklasse, die sich zwischen einer Raute (#) ohne Escapezeichen und einem Zeilenumbruchszeichen befinden. Auf diese Weise kann man Kommentare in ein kompliziertes Muster einfügen. Beachten Sie aber, dass dies nur für Datenzeichen gilt. Leerraumzeichen dürfen niemals innerhalb einer Folge spezieller Zeichen auftreten, wie z. B. (?(, die einen bedingten Teilausdruck einleiten würde.</td>
  </tr>
  <tr id="opt_A">
    <td><strong>A</strong></td>
    <td>Erzwingt die Verankerung des Suchmusters; das heißt, dass das Suchmuster mit dem Anfang der <em>Zeichenkette</em> übereinstimmen muss. Diese Option ist prinzipiell das gleiche wie, als würde man das Suchmuster explizit mit "^" verankern.</td>
  </tr>
  <tr id="opt_D">
    <td><strong>D</strong></td>
    <td>Bewirkt, dass das Dollar-Zeichen ($) mit dem Ende der <em>Zeichenkette</em> übereinstimmen muss, selbst wenn das letzte Zeichen in der <em>Zeichenkette</em> ein Zeilenumbruch ist. Wenn diese Option nicht vorhanden ist, erfolgt die Übereinstimmung vor dem letzten Zeilenumbruch (falls vorhanden). Hinweis: Diese Option wird ignoriert, wenn "m" vorhanden ist.</td>
  </tr>
  <tr id="opt_J">
    <td><strong>J</strong></td>
    <td>Erlaubt <a href="../commands/RegExMatch.htm#NamedSubPat">benannte Teilsuchmuster</a> mit gleichem Namen. Diese Option ist in einem Suchmuster nützlich, wo nur eines von mehreren gleichnamigen Teilsuchmustern übereinstimmen kann. Hinweis: Wenn mehrere gleichnamige Teilsuchmuster eine Übereinstimmung finden, wird nur der gefundene Treffer ganz links gespeichert. Groß-/Kleinschreibung spielt bei Variablennamen keine Rolle.</td>
  </tr>
  <tr id="opt_U">
    <td><strong>U</strong></td>
    <td>Ungreedy-Modus. Bringt die Quantoren *+?{} dazu, so wenig Zeichen wie möglich zu verbrauchen, um einen Treffer zu erzeugen. Die restlichen noch verfügbaren Zeichen gelten für den nächsten Teil des Suchmusters. Normalerweise kann man, wenn die U-Option inaktiv ist, einen einzelnen Quantor ungreedy machen, indem man direkt danach ein Fragezeichen einfügt. Bei <em>aktivierter</em> U-Option bewirkt das Fragezeichen genau das Gegenteil - es macht einen einzelnen Quantor greedy.</td>
  </tr>
  <tr id="opt_extra">
    <td><strong>X</strong></td>
    <td>PCRE_EXTRA. Aktiviert PCRE-Features, die mit Perl nicht kompatibel sind. Aktuell gibt es nur ein Feature. Dieses Feature bewirkt, dass jeder umgekehrter Schrägstrich, gefolgt von einem Buchstaben ohne besondere Bedeutung, eine Übereinstimmung fehlschlagen lässt, woraufhin ErrorLevel gesetzt wird. Mit dieser Option können ungenutzte Backslash-Sequenzen für die zukünftige Verwendung reserviert werden. Wenn diese Option fehlt, wird der umgekehrte Schrägstrich vor einem normalen Buchstaben einfach ignoriert (das heißt beispielsweise, dass sowohl \g als auch g ein normales g ist). Der umgekehrte Schrägstrich vor einem normalen nicht-alphabetischen Zeichen wird immer ignoriert (das heißt beispielsweise, dass sowohl \/ als auch / ein gewöhnlicher Schrägstrich ist).</td>
  </tr>
  <tr id="opt_P">
    <td><strong>P</strong></td>
    <td>Positionsmodus. Wenn diese Option aktiv ist, wird RegExMatch() nicht die gefundenen Teilzeichenketten, sondern die Position und Länge der gefundenen Übereinstimmung und ihrer Teilsuchmuster zurückgeben. Für weitere Details, siehe <a href="../commands/RegExMatch.htm#PosMode">AusgabeVar</a>.</td>
  </tr>
  <tr id="Study">
    <td><strong>S</strong></td>
    <td>Untersucht, ob die Performance des Suchmusters verbessert werden kann. Diese Option ist bei einem Suchmuster nützlich, das sehr oft ausgeführt wird (besonders wenn es komplex aufgebaut ist). Wenn PCRE einen Weg gefunden hat, die Performance zu verbessern, wird PCRE diese Entdeckung zusammen mit dem Suchmuster in den Cache speichern, um sie später auf nachfolgende Suchmuster gleicher Art anzuwenden (auch diese Suchmuster sollten die S-Option enthalten, weil sie nur im Cache gefunden werden können, wenn die Optionsbuchstaben vorhanden und in gleicher Reihenfolge sind).</td>
  </tr>
  <tr id="opt_Callout">
    <td><strong>C</strong></td>
    <td>Aktiviert den Auto-Callout-Modus. Siehe <a href="../misc/RegExCallout.htm#auto">Callouts in regulären Ausdrücken</a> für weitere Informationen.</td>
  </tr>
  <tr id="opt_esc_n">
    <td><strong>`n</strong></td>
    <td>Wechselt vom Standard-Zeilenumbruch (`r`n) auf ein einzelnes LF-Zeichen (`n), welches üblicherweise auf UNIX-Systemen von Bedeutung ist. Ein anderes Zeilenumbruchszeichen beeinflusst das Verhalten von <a href="../misc/RegEx-QuickRef.htm#anchor">Verankerungen (^ und $)</a> und <a href="../misc/RegEx-QuickRef.htm#dot">Suchmuster mit Punkten</a>.</td>
  </tr>
  <tr id="opt_esc_r">
    <td><strong>`r</strong></td>
    <td>Wechselt vom Standard-Zeilenumbruch (`r`n) auf ein einzelnes CR-Zeichen (`r).</td>
  </tr>
  <tr id="NEWLINE_ANY">
    <td><strong>`a</strong></td>
    <td><span class="ver">[v1.0.46.06+]</span>: `a erkennt jede Art von Zeilenumbruch, konkret `r, `n, `r`n, `v/VT/vertical tab/chr(0xB), `f/FF/formfeed/chr(0xC) und NEL/next-line/chr(0x85). <span class="ver">[v1.0.47.05+]</span>: Um Zeilenumbrüche nur auf CR, LF und CRLF zu beschränken, gibt man stattdessen (*ANYCRLF) in Großbuchstaben am Anfang eines Suchmusters an (nach den Optionen); zum Beispiel: <code>im)(*ANYCRLF)^abc$</code>.</td>
  </tr>
</table>
<p class="note"><strong>Hinweis</strong>: Bei Bedarf kann man die Optionen mit Leer- und Tabulatorzeichen voneinander trennen.</p>

<h2 id="Common">Häufig verwendete Symbole und Syntax</h2>
<table class="info">
	<tr id="dot">
		<td style="align:center"><strong>.</strong></td>
		<td>Der Platzhalter für ein beliebiges einzelnes Zeichen. Zeilenumbrüche (`r`n) werden nur erkannt, wenn man <a href="#opt_s">DotAll (s)</a>, <a href="#opt_esc_n">LF (`n)</a>, <a href="#opt_esc_r">CR (`r)</a>, <a href="#NEWLINE_ANY">`a oder (*ANYCRLF)</a> benutzt. Zum Beispiel würde <span class="regex">ab.</span> mit <span class="subj">abc</span> und <span class="subj">abz</span> und <span class="subj">ab_</span> übereinstimmen.</td>
	</tr>
	<tr>
		<td style="align:center"><strong>*</strong></td>
		<td><p>Ein Platzhalter, der überprüft, ob das voherige Element (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>) gar nicht oder mehrmals vorkommt. Zum Beispiel würde <span class="regex">a*</span> mit <span class="subj">a</span>b und <span class="subj">aaa</span>b übereinstimmen. Eine Übereinstimmung würde auch erfolgen, wenn die Zeichenkette überhaupt kein "a" enthält.</p>
	      <p><strong>Punkt-Sternchen-Platzhalter</strong>: <span class="regex">.*</span> ist eines der tolerantesten Suchmuster, weil es keine oder mehrere Vorkommen eines <em>beliebigen</em> Zeichens finden kann (außer Zeilenumbruch: `r und `n). Zum Beispiel würde <span class="regex">abc.*123</span> sowohl mit <span class="subj">abcIrgendetwas123</span> als auch mit <span class="subj">abc123</span> übereinstimmen.</p>		  </td>
	</tr>
	<tr>
	  <td style="align:center"><strong>?</strong></td>
	  <td>Ein Platzhalter, der überprüft, ob das vorherige Element (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>) vorkommt oder nicht. Oder auch: "Das voranstehende Element ist optional". Zum Beispiel würde <span class="regex">colou?r</span> sowohl mit <span class="subj">color</span> als auch mit <span class="subj">colour</span> übereinstimmen, weil das "u" optional gemacht wurde.</td>
  </tr>
	<tr>
	  <td style="align:center"><strong>+</strong></td>
	  <td>Ein Platzhalter, der überprüft, ob das vorherige Element (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>) mehr als einmal vorkommt. Zum Beispiel würde <span class="regex">a+</span> mit <span class="subj">a</span>b und <span class="subj">aaa</span>b übereinstimmen. Im Gegensatz zu <span class="regex">a*</span> und <span class="regex">a?</span> kann <span class="regex">a+</span> nur eine Übereinstimmung finden, wenn "a" in der Zeichenkette vorkommt.</td>
  </tr>
	<tr>
	  <td style="align:center">{min,max}</td>
	  <td><p>Ein Platzerhalter, der überprüft, ob das vorherige Element (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>) <em>min</em>-mal bis <em>max</em>-mal vorkommt. Zum Beispiel würde <span class="regex">a{1,2}</span> mit <span class="subj">a</span>b übereinstimmen, aber mit <span class="subj">aa</span>ab nur die ersten zwei a's.</p>
        <p>Zudem kann man beispielsweise {3} angeben, um genau 3 Vorkommen finden zu lassen, oder {3<strong>,</strong>} für 3 oder mehr Vorkommen. Hinweis: Die angegebenen Werte müssen kleiner als 65.536 sein. Außerdem muss der Minimalwert entweder kleiner oder genauso groß wie der Maximalwert sein.</p></td>
  </tr>
	<tr id="class">
	  <td style="align:center"><strong>[...]</strong></td>
	  <td><p><strong>Zeichenklassen</strong>: Ein Platzhalter, der überprüft, ob das aktuelle Zeichen mit eines der definierten Zeichen in den eckigen Klammern übereinstimmt. Zum Beispiel bedeutet <span class="regex">[abc]</span>: "jedes Zeichen, das entweder ein a, b oder c ist". Mithilfe eines Bindestrichs kann ein Bereich definiert werden; zum Beispiel bedeutet <span class="regex">[a-z]</span>: "jedes Zeichen von a bis z". Listen und Bereiche können kombiniert werden; zum Beispiel bedeutet <span class="regex">[a-zA-Z0-9_]</span>: "jedes Zeichen, das alphanumerisch oder ein Unterstrich ist".</p>
	    <p>Nach einer Zeichenklasse kann *, ?, + oder {min,max} erfolgen. <span class="regex">[0-9]+</span> überprüft beispielsweise, ob eine Ziffer mehr als einmal vorkommt; somit würde es mit xyz<span class="subj">123</span> übereinstimmen, aber nicht mit abcxyz.</p>            
        <p>Desweiteren kann man vordefinierte Zeichenbereiche (POSIX) in Form von [[:xxx:]] angeben; xxx ist dabei eines der folgenden Wörter: alnum, alpha, ascii (0-127), blank (Leerzeichen oder Tabulator), cntrl (Steuerzeichen), digit (0-9), xdigit (hexadezimale Ziffern), print, graph (print ohne space), punct, lower, upper, space (Leerraumzeichen), word (das gleiche wie <a href="#word">\w</a>).</p>
        <p>Innerhalb einer Zeichenklasse müssen nur Zeichen mit einem Escapezeichen versehen werden, die innerhalb der Klasse eine besondere Bedeutung haben; z. B. <span class="regex">[\^a]</span>, <span class="regex">[a\-b]</span>, <span class="regex">[a\]]</span> und <span class="regex">[\\a]</span>.</p></td>
  </tr>
	<tr>
	  <td style="align:center"><strong>[^...]</strong></td>
	  <td>Ein Platzhalter, der überprüft, ob das aktuelle Zeichen mit <strong>keines</strong> der definierten Zeichen in den eckigen Klammern übereinstimmt. <span class="regex">[^/]*</span> findet beispielsweise nur nebeneinanderliegende Zeichen, die <em>kein</em> Schrägstrich sind, wie z. B. <span class="subj">http:</span>//. Ein weiteres Beispiel wäre <span class="regex">[^0-9xyz]</span>, das nur einzelne Zeichen finden kann, die weder Zahlen noch die Buchstaben x, y oder z sind.</td>
  </tr>
	<tr>
	  <td style="align:center"><strong>\d</strong></td>
	  <td>Der Platzhalter für eine einzelne Ziffer (entspricht der Klasse <span class="regex">[0-9]</span>). Ein großgeschriebenes \D ist hingegen der Platzhalter für ein einzelnes Zeichen, das <em>keine</em> Ziffer ist. Dieser und die anderen zwei Platzhalter darunter können innerhalb einer <a href="#class">Klasse</a> verwendet werden; zum Beispiel bedeutet <span class="regex">[\d.-]</span>: "jede Ziffer, jeder Punkt oder jedes Minuszeichen".</td>
  </tr>
	<tr>
	  <td style="align:center"><strong>\s</strong></td>
	  <td>Der Platzhalter für ein einzelnes Leerraumzeichen, wie z. B. Leerzeichen, Tabulator oder Zeilenumbruch (`r und `n). Ein großgeschriebenes \S ist hingegen der Platzhalter für ein einzelnes Zeichen, das <em>kein</em> Leerraumzeichen ist.</td>
  </tr>
	<tr id="word">
	  <td style="align:center"><strong>\w</strong></td>
	  <td>Der Platzhalter für ein einzelnes Zeichen, das in der Regel in einem Wort zu finden ist, also alphanumerisch oder Unterstrich. Das ist das gleiche wie <span class="regex">[a-zA-Z0-9_]</span>. Ein großgeschriebenes \W ist hingegen der Platzhalter für ein einzelnes Zeichen, das <em>nicht</em> in einem Wort zu finden ist.</td>
  </tr>
	<tr id="anchor">
	  <td style="align:center"><strong>^<br>
        
        $</strong></td>
	  <td><p>Zirkumflex (^) und Dollar-Zeichen ($) werden <em>Anker</em> genannt, weil sie das Suchmuster an den Anfang oder Ende der zu durchsuchenden Zeichenkette binden. Sie verbrauchen keine Zeichen.</p>
	    <p><span class="regex">^</span> kann am Anfang eines Musters stehen, um die Übereinstimmung direkt am Anfang einer Zeile erfolgen zu lassen. Zum Beispiel würde <span class="regex">^abc</span> mit <span class="subj">abc</span>123 übereinstimmen, aber nicht mit 123abc.</p>
	    <p><span class="regex">$</span> kann am Ende eines Musters stehen, um die Übereinstimmung direkt am Ende einer Zeile erfolgen zu lassen. Zum Beispiel würde <span class="regex">abc$</span> mit 123<span class="subj">abc</span> übereinstimmen, aber nicht mit abc123.</p>
      <p>Beide Anker können gleichzeitig verwendet werden. Zum Beispiel kann <span class="regex">^abc$</span> nur mit <span class="subj">abc</span> übereinstimmen (das heißt, dass sich keine Zeichen davor oder dahinter befinden dürfen).</p>
      <p>Wenn der zu durchsuchende Text mehrere Zeilen enthält, kann man die <a href="#Multiline">m-Option</a> benutzen, um die Anker nicht für den gesamten Text, sondern für jede Zeile geltend zu machen. Zum Beispiel würde <span class="regex">m)^abc$</span> mit 123`r`n<span class="subj">abc</span>`r`n789 übereinstimmen. Ohne m-Option wäre keine Übereinstimmung möglich.</p></td>
  </tr>
	<tr>
	  <td style="align:center"><strong>\b</strong></td>
	  <td>\b dient als Abgrenzung eines Wortes. Es ist wie ein Anker, weil es keine Zeichen verbraucht. Es setzt voraus, dass das aktuelle Zeichen, welches ein <a href="#word">Wortzeichen (\w)</a> sein muss, das Gegenteil des vorherigen Zeichens ist. Dadurch kann man in der Regel verhindern, dass das gesuchte Wort innerhalb eines anderen Wortes gefunden wird. Zum Beispiel würde <span class="regex">\bcat\b</span> nicht mit catfish übereinstimmen, sondern nur mit <span class="subj">cat</span>, unabhängig von Interpunktion und Leerraumzeichen. Ein großgeschriebenes \B bewirkt genau das Gegenteil: Es setzt voraus, dass das aktuelle Zeichen <em>nicht</em> neben einer Wortabgrenzung zu finden ist.</td>
  </tr>
	<tr>
	  <td style="align:center"><strong>|</strong></td>
	  <td>Der senkrechte Strich trennt zwei oder mehr Alternativen. Eine Übereinstimmung erfolgt, wenn <em>eine</em> der Alternativen zutrifft. Zum Beispiel würde <span class="regex">gray|grey</span> sowohl mit <span class="subj">gray</span> als auch mit <span class="subj">grey</span> übereinstimmen. Das Suchmuster <span class="regex">gr(a|e)y</span> bewirkt das gleiche, allerdings muss man dazu die unten beschriebenen runden Klammern verwenden.</td>
  </tr>
	<tr id="subpat">
	  <td style="align:center"><strong>(...)</strong></td>
	  <td><p>Eingeklammerte Elemente werden häufig verwendet, ...:</p>
	    <ul>
	      <li>... um die Reihenfolge der Auswertung zu bestimmen. Zum Beispiel würde <span class="regex">(Sonn|Mon|Diens|Donners|Frei|Sams)tag|Mittwoch</span> den Namen jeden Tages finden.</li>
	      <li>... um <span class="regex">*</span>, <span class="regex">?</span>, <span class="regex">+</span> oder <span class="regex">{min,max}</span> auf <em>mehrere</em> Zeichen anzuwenden. <span class="regex">(abc)+</span> überprüft beispielsweise, ob "abc" mehr als einmal vorkommt; es wäre also in <span class="subj">abcabc</span>123 zu finden, aber nicht in ab123 oder bc123.</li>
          <li id="capture">... um ein Teilsuchmuster zur Weiterverarbeitung zu erfassen, wie der Punkt-Stern-Platzhalter in <span class="regex">abc<span class="red">(.*)</span>xyz</span>. Nur so kann <a href="../commands/RegExMatch.htm">RegExMatch()</a> ihre gefundene Zeichenketten in das <a href="../commands/RegExMatch.htm#Array">Ausgabe-Array</a> speichern. Und nur so kann <a href="../commands/RegExReplace.htm">RegExReplace()</a> ihre gefundene Zeichenketten in die resultierende Zeichenkette via <a href="../commands/RegExReplace.htm#BackRef">Rückreferenz</a> (z. B. $1) neu einfügen. Um zu verhindern, dass das Suchmuster in den runden Klammern erfasst wird, ist es notwendig, die zwei Zeichen <span class="regex">?:</span> direkt nach der runden Startklammer einzufügen; zum Beispiel: <span class="regex">(<span class="red">?:</span>.*)</span></li>
	      <li>... um <a href="#Options">Optionen</a> spontan zu ändern. Wenn man <span class="regex">(?im)</span> beispielsweise irgendwo in das Suchmuster einfügt, werden die Optionen nur für den restlichen Teil des Suchmusters (oder Teilsuchmusters) aktiv. <span class="regex">(?-im)</span> würde hingegen beide Optionen ausschalten. Es werden alle Optionen außer DPS`r`n`a unterstützt.</li>
	    </ul></td>
  </tr>
	<tr>
	  <td style="align:center"><strong>\t<br>
  
  \r<br>
  usw.</strong></td>
	  <td><p>Die Platzhalter für Sonderzeichen. Die am häufigsten verwendeten Platzhalter dieser Art sind <span class="regex">\t</span> (Tabulator), <span class="regex">\r</span> (CR-Zeichen) und <span class="regex">\n</span> (LF-Zeichen). In AutoHotkey kann der umgekehrte Schrägstrich von solchen Platzhaltern mit einem umgekehrten Häkchen (`) ersetzt werden. Platzhalter in Form von \xhh werden ebenfalls unterstützt; <em>hh</em> ist dabei der hexadezimale Code eines beliebigen ANSI-Zeichens zwischen 00 und FF.</p>
      <p><span class="ver">[v1.0.46.06+]</span>: <span class="regex">\R</span> bedeutet: "jeder Zeilenumbruch beliebiger Art". Das sind quasi alle Zeilenumbrüche, die bei der <a href="#NEWLINE_ANY">`a-Option</a> aufgelistet sind (innerhalb einer <a href="#class">Zeichenklasse</a> wird \R lediglich als normales "R" behandelt). <span class="ver">[v1.0.47.05+]</span>: Um <span class="regex">\R</span> auf CR, LF, und CRLF zu beschränken, gibt man (*BSR_ANYCRLF) in Großbuchstaben am Anfang eines Musters an (nach den Optionen); zum Beispiel: <span class="regex">im)(*BSR_ANYCRLF)abc\Rxyz</span></p></td>
  </tr>
  <tr id="slashP">
    <td style="align:center"><strong>\p{xx}<br>\P{xx}<br>\X</strong></td>
    <td><p><span class="ver">[AHK_L 61+]:</span> Platzhalter für Unicode-Zeichen. In der ANSI-Version von AutoHotkey werden sie nicht unterstützt. <span class="regex">\p{xx}</span> überprüft, ob ein Zeichen die xx-Eigenschaft hat, während <span class="regex">\P{xx}</span> überprüft, ob es ein Zeichen <i>ohne</i> xx-Eigenschaft ist. Zum Beispiel würde <span class="regex">\pL</span> mit einen beliebigen Buchstaben übereinstimmen, während <span class="regex">\p{Lu}</span> mit einem beliebigen Großbuchstaben übereinstimmen würde. <span class="regex">\X</span> stimmt mit einer beliebigen Anzahl an Zeichen überein, die eine erweiterte Unicode-Sequenz bildet.</p>
    <p>Suchen Sie nach "\p{xx}" auf <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a>, um eine vollständige Liste der unterstützten Eigenschaftsnamen zu erhalten und um weitere Details zu erfahren.</p></td>
  </tr>
  <tr id="UCP">
    <td style="align:center"><strong>(*UCP)</strong></td>
    <td><p><span class="ver">[AHK_L 61+]:</span> Aus Performance-Gründen stimmen die Platzhalter \d, \D, \s, \S, \w, \W, \b und \B standardmäßig nur mit ASCII-Zeichen überein, auch in der Unicode-Version von AutoHotkey. Wenn das Suchmuster mit <span class="regex">(*UCP)</span> beginnt, werden Unicode-Eigenschaften zum Finden von Zeichen benutzt. Zum Beispiel wäre \w dann <span class="regex">[\p{L}\p{N}_]</span> und \d dann <span class="regex">\p{Nd}</span>.</p>
    </td>
  </tr>
</table>
<p><strong>Greed (Gier)</strong>: Standardmäßig versuchen die Quantoren <span class="regex">*</span>, <span class="regex">?</span>, <span class="regex">+</span>, und <span class="regex">{min,max}</span>, <em>so viele Zeichen wie möglich</em> einzubeziehen, um eine Übereinstimmung zu finden. Um dieses Verhalten auf <em>so wenig Zeichen wie möglich</em> zu begrenzen, muss nach den Quantoren ein Fragezeichen eingefügt werden. Zum Beispiel würde das Suchmuster <span class="regex">&lt;.+&gt;</span> (also ohne Fragezeichen) bedeuten: "suche nach einer Zeichenkette, die sich zusammensetzt aus &lt;, mindestens einem Zeichen und &gt;". Um zu verhindern, dass das Suchmuster mit der <em>kompletten</em> Zeichenkette <span class="subj"><span class="red"><strong>&lt;</strong></span>em&gt;text&lt;/em<span class="red"><strong>&gt;</strong></span></span> übereinstimmt, ist es notwendig, nach dem Pluszeichen ein Fragezeichen einzufügen: <span class="regex">&lt;.+<span class="red">?</span>&gt;</span>. Die Suche stoppt bereits beim ersten '&gt;' und führt dazu, dass das erste HTML-Tag <span class="subj"><span class="red"><strong>&lt;</strong></span>em<span class="red"><strong>&gt;</strong></span></span> die gefundene Übereinstimmung ist.</p>
<p><strong>Vorausschauende und zurückschauende Behauptungen</strong>: Die Gruppen <span class="regex">(?=...)</span>, <span class="regex">(?!...)</span>, <span class="regex">(?&lt;=...)</span> und <span class="regex">(?&lt;!...)</span> werden <em>Behauptungen</em> genannt und verlangen, dass eine Bedingung erfüllt sein muss. Sie verbrauchen keine Zeichen. Zum Beispiel wäre <span class="regex">abc(?=.*xyz)</span> eine vorausschauende Behauptung, die verlangt, dass die Zeichenkette xyz irgendwo rechts neben der Zeichenkette abc vorkommen muss (wenn sie dort nicht ist, gilt das gesamte Suchmuster als keine Übereinstimmung). <span class="regex">(?=...)</span> nennt sich <em>positives</em> Vorausschauen, weil sie verlangt, dass das angegebene Suchmuster existieren muss. <span class="regex">(?!...)</span> nennt sich hingegen <em>negatives</em> Vorausschauen, weil sie verlangt, dass das angegebene Suchmuster <em>fehlen</em> muss. Im Vergleich dazu ist <span class="regex">(?&lt;=...)</span> und <span class="regex">(?&lt;!...)</span> positives und negatives <em>Zurückschauen</em>, weil sie auf der <em>linken</em> statt rechten Seite der aktuellen Position nachschauen. Zurückschauende Behauptungen haben mehr Einschränkungen als vorausschauende Behauptungen, weil sie keine Quantoren mit variierbarer Größe unterstützen, wie z. B. <span class="regex">*</span>, <span class="regex">?</span> und <span class="regex">+</span>. Die Escapesequenz \K ist mit einer zurückschauenden Behauptung vergleichbar, weil sie alle zuvor gefundenen Zeichen im Endergebnis wegfallen lässt. Zum Beispiel würde <span class="regex">foo\Kbar</span> mit "foobar" übereinstimmen, aber melden, dass nur "bar" gefunden wurde.</p>
<p><strong>Siehe auch</strong>: <a href="../commands/RegExMatch.htm">RegExMatch()</a>, <a href="../commands/RegExReplace.htm">RegExReplace()</a> und <a href="../commands/SetTitleMatchMode.htm">SetTitleMatchMode</a> unterstützen reguläre Ausdrücke.</p>
<p class="note"><strong>Abschließende Bemerkung</strong>: Beachten Sie, dass diese Seite nur RegEx-Features umfasst, die häufig zum Einsatz kommen. Andere Features wie z. B. bedingte Teilsuchmuster fehlen gänzlich. Das komplette Handbuch über PCRE finden Sie auf <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a>.</p>
<p>&nbsp;</p>
</body>
</html>
