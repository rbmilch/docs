<!DOCTYPE HTML>
<html>
<head>
<title>Callouts in Regulären Ausdrücken</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Callouts in Regulären Ausdrücken <span class="ver">[AHK_L 14+]</span></h1>

<p>Callouts bieten die Möglichkeit, inmitten der Mustererkennung die Kontrolle vorübergehend an das Skript zu übergeben. Für detaillierte Informationen über die PCRE-Standard-Callout-Funktion, siehe <a href="http://www.pcre.org/pcre.txt">pcre.txt</a>.</p>

<p>Callouts werden zurzeit nur in <a href="../commands/RegExMatch.htm">RegExMatch</a> und <a href="../commands/RegExReplace.htm">RegExReplace</a> unterstützt.</p>

<h3>Syntax</h3>

<p>Die Syntax zum Definieren eines Callouts ist <span class="Syntax">(?C<em>Nummer</em>:<em>Funktion</em>)</span>; <em>Nummer</em> und <em>Funktion</em> sind optional. Der Doppelpunkt (:) ist nur erlaubt, wenn <em>Funktion</em> angegeben ist, und optional, wenn <em>Nummer</em> fehlt. Wenn die <em>Funktion</em> angegeben ist, aber nicht der Name einer benutzerdefinierten Funktion ist, dann erscheint ein Kompilierungsfehler und die Mustererkennung startet nicht.</p>

<p>Fehlt <em>Funktion</em>, muss der Funktionsname in eine Variable namens <b>pcre_callout</b> gespeichert werden. Existiert sowohl eine globale als auch lokale Variable mit diesem Namen, gilt vorrangig die lokale Variable. Enthält <em>pcre_callout</em> nicht den Namen einer benutzerdefinierten Funktion, werden Callouts, bei denen <em>Funktion</em> fehlt, ignoriert.</p>

<h3>Callout-Funktionen</h3>

<pre class="Syntax">
Funktion(Übereinstimmung, Calloutnummer, Fundposition, Heuhaufen, NadelRegEx)
{
    ...
}
</pre>
<p>Callout-Funktionen können bis zu 5 Parameter definieren:</p>
<ul>
  <li><b>Übereinstimmung</b>: Entspricht der <em>AusgabeVar</em> von RegExMatch, einschließlich das Erstellen von Array-Variablen, falls notwendig.</li>
  <li><b>Calloutnummer</b>: Empfängt die <em>Nummer</em> des Callouts.</li>
  <li><b>Fundposition</b>: Empfängt die Position der aktuell möglichen Übereinstimmung.</li>
  <li><b>Heuhaufen</b>: Empfängt den <em>Heuhaufen</em>, der an RegExMatch oder RegExReplace übergeben wurde.</li>
  <li><b>NadelRegEx</b>: Empfängt <em>NadelRegEx</em>, der an RegExMatch oder RegExReplace übergeben wurde.</li>
</ul>
<p>Diese Namen sind nur zweckmäßig. Die tatsächlichen Namen können variieren.</p>

<p>Die Mustererkennung kann erfolgen oder fehlschlagen, abhängig vom Rückgabewert der Callout-Funktion:</p>
<ul>
  <li>Gibt die Funktion eine <b>0</b> oder einen nicht-numerischen Wert zurück, wird die Erkennung normal fortgesetzt.</li>
  <li>Gibt die Funktion eine <b>1</b> oder höher zurück, wird die Erkennung an aktueller Stelle fehlschlagen, aber das Testen von anderen Erkennungsmöglichkeiten fortgesetzt.</li>
  <li>Gibt die Funktion <b>-1</b> zurück, wird die Erkennung abgebrochen.</li>
  <li>Gibt die Funktion einen Wert kleiner als -1 zurück, wird es als PCRE-Fehlercode behandelt und die Erkennung abgebrochen. RegExMatch gibt eine leere Zeichenkette zurück, während RegExReplace den originalen <em>Heuhaufen</em> zurückgibt. In beiden Fällen wird ErrorLevel den Fehlercode enthalten.</li>
</ul>

<p>Zum Beispiel:</p>
<pre>Heuhaufen = The quick brown fox jumps over the lazy dog.
RegExMatch(Heuhaufen, "i)(The) (\w+)\b(?CFunktion)")
Funktion(m) {
    MsgBox m=%m%`nm1=%m1%`nm2=%m2%
    return 1
}</pre>
<p>Im oberen Beispiel wird <em>Funktion</em> für jede Teilzeichenkette einmal aufgerufen, die mit dem Teil des Musters vor dem Callout übereinstimmt. Mit <span class="Syntax">\b</span> können unvollständige Wörter in Übereinstimmungen wie <em>The quic</em>, <em>The qui</em>, <em>The qu</em>, etc. ausgeschlossen werden.</p>

<h3 id="EventInfo">EventInfo</h3>

<p>Es stehen zusätzliche Informationen zur Verfügung, wenn man per <b>A_EventInfo</b> auf die pcre_callout_block-Struktur zugreift.</p>
<pre>version           := NumGet(A_EventInfo,  0, "Int")
callout_number    := NumGet(A_EventInfo,  4, "Int")
offset_vector     := NumGet(A_EventInfo,  8)
subject           := NumGet(A_EventInfo,  8 + A_PtrSize)
subject_length    := NumGet(A_EventInfo,  8 + A_PtrSize*2, "Int")
start_match       := NumGet(A_EventInfo, 12 + A_PtrSize*2, "Int")
current_position  := NumGet(A_EventInfo, 16 + A_PtrSize*2, "Int")
capture_top       := NumGet(A_EventInfo, 20 + A_PtrSize*2, "Int")
capture_last      := NumGet(A_EventInfo, 24 + A_PtrSize*2, "Int")
pad := A_PtrSize=8 ? 4 : 0  <em>; Ausgleich für die 64-Bit-Datenausrichtung.</em>
callout_data      := NumGet(A_EventInfo, 28 + pad + A_PtrSize*2)
pattern_position  := NumGet(A_EventInfo, 28 + pad + A_PtrSize*3, "Int")
next_item_length  := NumGet(A_EventInfo, 32 + pad + A_PtrSize*3, "Int")
if version &gt;= 2
    mark   := StrGet(NumGet(A_EventInfo, 36 + pad + A_PtrSize*3, "Int"), "UTF-8")
</pre>
<p>Weitere Informationen können unter <a href="http://www.pcre.org/pcre.txt">pcre.txt</a>, <a href="../commands/NumGet.htm">NumGet</a> und <a href="../Variables.htm#PtrSize">A_PtrSize</a> gefunden werden.</p>

<h3 id="auto">Auto-Callout</h3>

<p>Das Einfügen von <span class="Syntax">C</span> in den Optionen des Musters aktiviert den Auto-Callout-Modus. Bei diesem Modus werden Callouts in Form von <span class="Syntax">(?C255)</span> vor jedem Element im Muster eingefügt. Das folgende Beispiel zeigt, wie man mit Callouts reguläre Ausdrücke debuggen kann:</p>
<pre><em>; Setzt die Standard-Callout-Funktion.</em>
pcre_callout = DebugRegEx

<em>; Ruft RegExMatch mit der Auto-Callout-Option C auf.</em>
RegExMatch("xxxabc123xyz", "C)abc.*xyz")

DebugRegEx(Übereinstimmung, Calloutnummer, Fundposition, Heuhaufen, NadelRegEx)
{
    <em>; Siehe pcre.txt, um mehr über diese Felder zu erfahren.</em>
    start_match       := NumGet(A_EventInfo, 12 + A_PtrSize*2, "Int")
    current_position  := NumGet(A_EventInfo, 16 + A_PtrSize*2, "Int")
    pad := A_PtrSize=8 ? 4 : 0
    pattern_position  := NumGet(A_EventInfo, 28 + pad + A_PtrSize*3, "Int")
    next_item_length  := NumGet(A_EventInfo, 32 + pad + A_PtrSize*3, "Int")

    <em>; Betont die &gt;&gt;aktuelle Übereinstimmung&lt;&lt;.</em>
    _HEUHAUFEN:=SubStr(Heuhaufen, 1, start_match)
        . "&gt;&gt;" SubStr(Heuhaufen, start_match + 1, current_position - start_match)
        . "&lt;&lt;" SubStr(Heuhaufen, current_position + 1)

    <em>; Betont das &gt;&gt;nächste auszuwertende Element&lt;&lt;.</em>
    _NADEL:=  SubStr(NadelRegEx, 1, pattern_position)
        . "&gt;&gt;" SubStr(NadelRegEx, pattern_position + 1, next_item_length)
        . "&lt;&lt;" SubStr(NadelRegEx, pattern_position + 1 + next_item_length)

    ListVars
    <em>; Drücken Sie PAUSE, um fortzufahren.</em>
    Pause
}</pre>

<h3>Bemerkungen</h3>

<p>Callouts werden auf den aktuellen Pseudo-Thread ausgeführt. Der vorherige Wert von A_EventInfo wird aber wiederhergestellt, nachdem die Callout-Funktion einen Wert zurückgegeben hat. ErrorLevel wird nicht gesetzt, bis RegExMatch oder RegExReplace einen Wert zurückgibt.</p>
<p>PCRE wurde optimiert, um in einigen Fällen früh abbrechen zu können, wenn es feststellt, dass eine Übereinstimmung nicht möglich ist. Damit Callouts in solchen Fällen aufgerufen werden können, müssen diese Optimierungen deaktiviert werden, indem man <code>(*NO_START_OPT)</code> an den Anfang des Musters setzt. Das benötigt <span class="ver">[v1.1.05]</span> oder höher.</p>

</body>
</html>
